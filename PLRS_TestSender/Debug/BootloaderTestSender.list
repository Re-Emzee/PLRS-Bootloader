
BootloaderTestSender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d00  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000096cf  08008f38  08008f38  00009f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012608  08012608  00013608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012610  08012610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012614  08012614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08012618  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002ee  20000088  080126a0  00014088  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  20000376  080126a0  00014376  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a3bc  00000000  00000000  000140be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003109  00000000  00000000  0002e47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001638  00000000  00000000  00031588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001124  00000000  00000000  00032bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034909  00000000  00000000  00033ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d16d  00000000  00000000  000685ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014ab2a  00000000  00000000  0008575a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0284  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000674c  00000000  00000000  001d02c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  001d6a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000088 	.word	0x20000088
 8000254:	00000000 	.word	0x00000000
 8000258:	08008f20 	.word	0x08008f20

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000008c 	.word	0x2000008c
 8000274:	08008f20 	.word	0x08008f20

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <CAN_SetRxBufferSize>:
/**
 * @brief Allocates memory for FDCAN receive buffers.
 * @param RxData1_Length: Length of buffer for FIFO0.
 * @param RxData2_Length: Length of buffer for FIFO1.
 */
void CAN_SetRxBufferSize(uint16_t RxData1_Length, uint16_t RxData2_Length) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	80fb      	strh	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	80bb      	strh	r3, [r7, #4]
    if (RxData1 != NULL) {
 80005a0:	4b1a      	ldr	r3, [pc, #104]	@ (800060c <CAN_SetRxBufferSize+0x7c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d004      	beq.n	80005b2 <CAN_SetRxBufferSize+0x22>
        free(RxData1);
 80005a8:	4b18      	ldr	r3, [pc, #96]	@ (800060c <CAN_SetRxBufferSize+0x7c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f007 fcc7 	bl	8007f40 <free>
    }
    if (RxData2 != NULL) {
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <CAN_SetRxBufferSize+0x80>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <CAN_SetRxBufferSize+0x34>
        free(RxData2);
 80005ba:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <CAN_SetRxBufferSize+0x80>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f007 fcbe 	bl	8007f40 <free>
    }

    RxData1_BufferLength = RxData1_Length;
 80005c4:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <CAN_SetRxBufferSize+0x84>)
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	8013      	strh	r3, [r2, #0]
    RxData2_BufferLength = RxData2_Length;
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <CAN_SetRxBufferSize+0x88>)
 80005cc:	88bb      	ldrh	r3, [r7, #4]
 80005ce:	8013      	strh	r3, [r2, #0]

    RxData1 = (uint8_t* )malloc(RxData1_Length);
 80005d0:	88fb      	ldrh	r3, [r7, #6]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f007 fcac 	bl	8007f30 <malloc>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <CAN_SetRxBufferSize+0x7c>)
 80005de:	601a      	str	r2, [r3, #0]
    RxData2 = (uint8_t* )malloc(RxData2_Length);
 80005e0:	88bb      	ldrh	r3, [r7, #4]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f007 fca4 	bl	8007f30 <malloc>
 80005e8:	4603      	mov	r3, r0
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <CAN_SetRxBufferSize+0x80>)
 80005ee:	601a      	str	r2, [r3, #0]
    if (RxData1 == NULL || RxData2 == NULL) {
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <CAN_SetRxBufferSize+0x7c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d003      	beq.n	8000600 <CAN_SetRxBufferSize+0x70>
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <CAN_SetRxBufferSize+0x80>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <CAN_SetRxBufferSize+0x74>
        Error_Handler();
 8000600:	f000 fc00 	bl	8000e04 <Error_Handler>
    }
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200000a8 	.word	0x200000a8
 8000610:	200000ac 	.word	0x200000ac
 8000614:	200000b0 	.word	0x200000b0
 8000618:	200000b2 	.word	0x200000b2

0800061c <CAN_Init>:
 * 			Configures global filter: Filter all remote frames with STD and EXT ID
 * 									  Reject non matching frames with STD ID and EXT ID
 * 			Starts the FDCAN controller (continuous listening CAN bus)
 * 			Activates Notifications
 */
void CAN_Init(FDCAN_HandleTypeDef *hfdcan1) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	@ 0x28
 8000620:	af02      	add	r7, sp, #8
 8000622:	6078      	str	r0, [r7, #4]
	/*##-1 Configures FDCAN meta data and controllers*/
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000630:	2301      	movs	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = 0x000;
 8000634:	2300      	movs	r3, #0
 8000636:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = 0x7FF;
 8000638:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800063c:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(hfdcan1, &sFilterConfig) != HAL_OK)
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4619      	mov	r1, r3
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f001 fc0b 	bl	8001e60 <HAL_FDCAN_ConfigFilter>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <CAN_Init+0x38>
	{
	Error_Handler();
 8000650:	f000 fbd8 	bl	8000e04 <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000658:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE_NO_EIDM;
 800065e:	2303      	movs	r3, #3
 8000660:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = 0x1111111;
 8000666:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <CAN_Init+0xcc>)
 8000668:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = 0x2222222;
 800066a:	4b20      	ldr	r3, [pc, #128]	@ (80006ec <CAN_Init+0xd0>)
 800066c:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(hfdcan1, &sFilterConfig) != HAL_OK)
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	4619      	mov	r1, r3
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f001 fbf3 	bl	8001e60 <HAL_FDCAN_ConfigFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <CAN_Init+0x68>
	{
	Error_Handler();
 8000680:	f000 fbc0 	bl	8000e04 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000684:	2300      	movs	r3, #0
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f001 fc40 	bl	8001f14 <HAL_FDCAN_ConfigGlobalFilter>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <CAN_Init+0x82>
	{
	  Error_Handler();
 800069a:	f000 fbb3 	bl	8000e04 <Error_Handler>
	}

	/*##-2 Start FDCAN controller (continuous listening CAN bus) ##############*/
	CanStartStatus = HAL_FDCAN_Start(hfdcan1);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f001 fc69 	bl	8001f76 <HAL_FDCAN_Start>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <CAN_Init+0xd4>)
 80006aa:	701a      	strb	r2, [r3, #0]
	if (CanStartStatus != HAL_OK)
 80006ac:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <CAN_Init+0xd4>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <CAN_Init+0x9c>
	{
	Error_Handler();
 80006b4:	f000 fba6 	bl	8000e04 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006b8:	2200      	movs	r2, #0
 80006ba:	2101      	movs	r1, #1
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f001 fdcf 	bl	8002260 <HAL_FDCAN_ActivateNotification>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <CAN_Init+0xb0>
	{
	Error_Handler();
 80006c8:	f000 fb9c 	bl	8000e04 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 80006cc:	2200      	movs	r2, #0
 80006ce:	2108      	movs	r1, #8
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f001 fdc5 	bl	8002260 <HAL_FDCAN_ActivateNotification>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <CAN_Init+0xc4>
	{
	Error_Handler();
 80006dc:	f000 fb92 	bl	8000e04 <Error_Handler>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	01111111 	.word	0x01111111
 80006ec:	02222222 	.word	0x02222222
 80006f0:	200000a4 	.word	0x200000a4

080006f4 <CAN_Transmit>:
 * 						FDCAN_DLC_BYTES_24, FDCAN_DLC_BYTES_32, FDCAN_DLC_BYTES_48,
 * 						FDCAN_DLC_BYTES_64
 * @param 	DataBuffer: Pointer to the TxData buffer.
 * @return 	HAL_StatusTypeDef HAL_OK if successful, !HAL_OK otherwise.
 */
HAL_StatusTypeDef CAN_Transmit(uint32_t Identifier, uint32_t IdType, uint32_t DataLength, uint8_t* DataBuffer, FDCAN_HandleTypeDef *hfdcan1) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
 8000700:	603b      	str	r3, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = Identifier;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	617b      	str	r3, [r7, #20]
    TxHeader.IdType = IdType;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	61bb      	str	r3, [r7, #24]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
    TxHeader.DataLength = DataLength;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	623b      	str	r3, [r7, #32]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000712:	2300      	movs	r3, #0
 8000714:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8000716:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.FDFormat = FDCAN_FD_CAN;
 800071c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8000722:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8000726:	633b      	str	r3, [r7, #48]	@ 0x30

    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &TxHeader, DataBuffer);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	683a      	ldr	r2, [r7, #0]
 800072e:	4619      	mov	r1, r3
 8000730:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000732:	f001 fc48 	bl	8001fc6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000736:	4603      	mov	r3, r0
}
 8000738:	4618      	mov	r0, r3
 800073a:	3738      	adds	r7, #56	@ 0x38
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_FDCAN_RxFifo0Callback>:
/**
 * @brief Callback function for handling messages received in FIFO0.
 * @param hfdcan: Pointer to FDCAN handle.
 * @param RxFifo0ITs: FIFO0 interrupt flags.
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	@ 0x30
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d02c      	beq.n	80007ae <HAL_FDCAN_RxFifo0Callback+0x6e>
        FDCAN_RxHeaderTypeDef RxHeader;
        memset(RxData1, 0, 64);
 8000754:	4b1a      	ldr	r3, [pc, #104]	@ (80007c0 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2240      	movs	r2, #64	@ 0x40
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f007 feb7 	bl	80084d0 <memset>
        if (RxData1 == NULL) {
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <HAL_FDCAN_RxFifo0Callback+0x2e>
            Error_Handler();
 800076a:	f000 fb4b 	bl	8000e04 <Error_Handler>
        }
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData1) != HAL_OK) {
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f107 0208 	add.w	r2, r7, #8
 8000776:	2140      	movs	r1, #64	@ 0x40
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f001 fc69 	bl	8002050 <HAL_FDCAN_GetRxMessage>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d006      	beq.n	8000792 <HAL_FDCAN_RxFifo0Callback+0x52>
            Error_Handler();
 8000784:	f000 fb3e 	bl	8000e04 <Error_Handler>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2104      	movs	r1, #4
 800078c:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <HAL_FDCAN_RxFifo0Callback+0x84>)
 800078e:	f002 fa7b 	bl	8002c88 <HAL_GPIO_WritePin>
        }
        //check actual length incoming against the buf len rather than stringcmp?
        RxData1_BufferLength = dlc_to_bytes(RxHeader.DataLength);
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f8bc 	bl	8000914 <dlc_to_bytes>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80007a2:	801a      	strh	r2, [r3, #0]
        RxData1_Identifier = RxHeader.Identifier;
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <HAL_FDCAN_RxFifo0Callback+0x8c>)
 80007a8:	6013      	str	r3, [r2, #0]
        CAN_PrintRxData();
 80007aa:	f000 f84d 	bl	8000848 <CAN_PrintRxData>
    }
    /* added for debug */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <HAL_FDCAN_RxFifo0Callback+0x90>)
 80007b4:	f002 fa68 	bl	8002c88 <HAL_GPIO_WritePin>
}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	@ 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200000a8 	.word	0x200000a8
 80007c4:	42021800 	.word	0x42021800
 80007c8:	200000b0 	.word	0x200000b0
 80007cc:	200000b4 	.word	0x200000b4
 80007d0:	42020800 	.word	0x42020800

080007d4 <HAL_FDCAN_RxFifo1Callback>:
/**
 * @brief Callback function for handling messages received in FIFO1.
 * @param hfdcan: Pointer to FDCAN handle.
 * @param RxFifo1ITs: FIFO1 interrupt flags.
 */
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	@ 0x30
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
    if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d025      	beq.n	8000834 <HAL_FDCAN_RxFifo1Callback+0x60>
        FDCAN_RxHeaderTypeDef RxHeader;
        memset(RxData2, 0, 64);
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_FDCAN_RxFifo1Callback+0x68>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2240      	movs	r2, #64	@ 0x40
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f007 fe6d 	bl	80084d0 <memset>
        if (RxData2 == NULL) {
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_FDCAN_RxFifo1Callback+0x68>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d101      	bne.n	8000802 <HAL_FDCAN_RxFifo1Callback+0x2e>
            Error_Handler();
 80007fe:	f000 fb01 	bl	8000e04 <Error_Handler>
        }
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData2) != HAL_OK) {
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_FDCAN_RxFifo1Callback+0x68>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f107 0208 	add.w	r2, r7, #8
 800080a:	2141      	movs	r1, #65	@ 0x41
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f001 fc1f 	bl	8002050 <HAL_FDCAN_GetRxMessage>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <HAL_FDCAN_RxFifo1Callback+0x48>
            Error_Handler();
 8000818:	f000 faf4 	bl	8000e04 <Error_Handler>
        }
        RxData2_BufferLength = dlc_to_bytes(RxHeader.DataLength);
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f877 	bl	8000914 <dlc_to_bytes>
 8000826:	4603      	mov	r3, r0
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_FDCAN_RxFifo1Callback+0x6c>)
 800082c:	801a      	strh	r2, [r3, #0]
        RxData2_Identifier = RxHeader.Identifier;
 800082e:	68bb      	ldr	r3, [r7, #8]
 8000830:	4a04      	ldr	r2, [pc, #16]	@ (8000844 <HAL_FDCAN_RxFifo1Callback+0x70>)
 8000832:	6013      	str	r3, [r2, #0]
    }
}
 8000834:	bf00      	nop
 8000836:	3730      	adds	r7, #48	@ 0x30
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200000ac 	.word	0x200000ac
 8000840:	200000b2 	.word	0x200000b2
 8000844:	200000b8 	.word	0x200000b8

08000848 <CAN_PrintRxData>:
 * @note 	This function assumes that RxData1 and RxData2 have been allocated and
 *       	populated by the Rx FIFO callbacks.
 *
 * @retval 	None
 */
void CAN_PrintRxData(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
    if (RxData1 != NULL && RxData1_BufferLength > 0) {
 800084e:	4b28      	ldr	r3, [pc, #160]	@ (80008f0 <CAN_PrintRxData+0xa8>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d01e      	beq.n	8000894 <CAN_PrintRxData+0x4c>
 8000856:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <CAN_PrintRxData+0xac>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d01a      	beq.n	8000894 <CAN_PrintRxData+0x4c>
        printf("\r\nFIFO0 Received: \r\n");
 800085e:	4826      	ldr	r0, [pc, #152]	@ (80008f8 <CAN_PrintRxData+0xb0>)
 8000860:	f007 fd56 	bl	8008310 <puts>
        for (uint16_t i = 0; i < RxData1_BufferLength; i++) {
 8000864:	2300      	movs	r3, #0
 8000866:	80fb      	strh	r3, [r7, #6]
 8000868:	e00b      	b.n	8000882 <CAN_PrintRxData+0x3a>
            printf("%02X ", RxData1[i]);
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <CAN_PrintRxData+0xa8>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	88fb      	ldrh	r3, [r7, #6]
 8000870:	4413      	add	r3, r2
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	4821      	ldr	r0, [pc, #132]	@ (80008fc <CAN_PrintRxData+0xb4>)
 8000878:	f007 fcda 	bl	8008230 <iprintf>
        for (uint16_t i = 0; i < RxData1_BufferLength; i++) {
 800087c:	88fb      	ldrh	r3, [r7, #6]
 800087e:	3301      	adds	r3, #1
 8000880:	80fb      	strh	r3, [r7, #6]
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <CAN_PrintRxData+0xac>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	88fa      	ldrh	r2, [r7, #6]
 8000888:	429a      	cmp	r2, r3
 800088a:	d3ee      	bcc.n	800086a <CAN_PrintRxData+0x22>
        }
        printf("\n");
 800088c:	200a      	movs	r0, #10
 800088e:	f007 fce1 	bl	8008254 <putchar>
 8000892:	e002      	b.n	800089a <CAN_PrintRxData+0x52>
    } else {
        printf("FIFO0: No data received.\n");
 8000894:	481a      	ldr	r0, [pc, #104]	@ (8000900 <CAN_PrintRxData+0xb8>)
 8000896:	f007 fd3b 	bl	8008310 <puts>
    }

    if (RxData2 != NULL && RxData2_BufferLength > 0) {
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <CAN_PrintRxData+0xbc>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d01e      	beq.n	80008e0 <CAN_PrintRxData+0x98>
 80008a2:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <CAN_PrintRxData+0xc0>)
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d01a      	beq.n	80008e0 <CAN_PrintRxData+0x98>
        printf("\r\nFIFO1 Received: \r\n");
 80008aa:	4818      	ldr	r0, [pc, #96]	@ (800090c <CAN_PrintRxData+0xc4>)
 80008ac:	f007 fd30 	bl	8008310 <puts>
        for (uint16_t i = 0; i < RxData1_BufferLength; i++) {
 80008b0:	2300      	movs	r3, #0
 80008b2:	80bb      	strh	r3, [r7, #4]
 80008b4:	e00b      	b.n	80008ce <CAN_PrintRxData+0x86>
            printf("%02X ", RxData2[i]);
 80008b6:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <CAN_PrintRxData+0xbc>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	88bb      	ldrh	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	480e      	ldr	r0, [pc, #56]	@ (80008fc <CAN_PrintRxData+0xb4>)
 80008c4:	f007 fcb4 	bl	8008230 <iprintf>
        for (uint16_t i = 0; i < RxData1_BufferLength; i++) {
 80008c8:	88bb      	ldrh	r3, [r7, #4]
 80008ca:	3301      	adds	r3, #1
 80008cc:	80bb      	strh	r3, [r7, #4]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <CAN_PrintRxData+0xac>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	88ba      	ldrh	r2, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d3ee      	bcc.n	80008b6 <CAN_PrintRxData+0x6e>
        }
        printf("\n");
 80008d8:	200a      	movs	r0, #10
 80008da:	f007 fcbb 	bl	8008254 <putchar>
 80008de:	e003      	b.n	80008e8 <CAN_PrintRxData+0xa0>
    } else {
        printf("FIFO1: No data received.\n");
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <CAN_PrintRxData+0xc8>)
 80008e2:	f007 fd15 	bl	8008310 <puts>
    }
}
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200000a8 	.word	0x200000a8
 80008f4:	200000b0 	.word	0x200000b0
 80008f8:	08008f38 	.word	0x08008f38
 80008fc:	08008f4c 	.word	0x08008f4c
 8000900:	08008f54 	.word	0x08008f54
 8000904:	200000ac 	.word	0x200000ac
 8000908:	200000b2 	.word	0x200000b2
 800090c:	08008f70 	.word	0x08008f70
 8000910:	08008f84 	.word	0x08008f84

08000914 <dlc_to_bytes>:

/* DLC to bytes lookup */
uint8_t dlc_to_bytes(uint8_t dlc) {
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
    static const uint8_t dlc_lut[16] = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64
    };
    return dlc_lut[dlc & 0x0F];
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 030f 	and.w	r3, r3, #15
 8000924:	4a03      	ldr	r2, [pc, #12]	@ (8000934 <dlc_to_bytes+0x20>)
 8000926:	5cd3      	ldrb	r3, [r2, r3]
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	08008ff4 	.word	0x08008ff4

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b096      	sub	sp, #88	@ 0x58
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f000 ff09 	bl	8001754 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000942:	f000 f935 	bl	8000bb0 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f8d7 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 f99b 	bl	8000c84 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800094e:	f000 f985 	bl	8000c5c <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8000952:	f000 f93b 	bl	8000bcc <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Init(&hfdcan1);
 8000956:	485f      	ldr	r0, [pc, #380]	@ (8000ad4 <main+0x19c>)
 8000958:	f7ff fe60 	bl	800061c <CAN_Init>
  CAN_SetRxBufferSize(64,64);
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	2040      	movs	r0, #64	@ 0x40
 8000960:	f7ff fe16 	bl	8000590 <CAN_SetRxBufferSize>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000964:	2000      	movs	r0, #0
 8000966:	f000 fca3 	bl	80012b0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800096a:	2001      	movs	r0, #1
 800096c:	f000 fca0 	bl	80012b0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000970:	2002      	movs	r0, #2
 8000972:	f000 fc9d 	bl	80012b0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000976:	2101      	movs	r1, #1
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fd7d 	bl	8001478 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800097e:	4b56      	ldr	r3, [pc, #344]	@ (8000ad8 <main+0x1a0>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000986:	4b54      	ldr	r3, [pc, #336]	@ (8000ad8 <main+0x1a0>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800098c:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <main+0x1a0>)
 800098e:	2200      	movs	r2, #0
 8000990:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000992:	4b51      	ldr	r3, [pc, #324]	@ (8000ad8 <main+0x1a0>)
 8000994:	2200      	movs	r2, #0
 8000996:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000998:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <main+0x1a0>)
 800099a:	2200      	movs	r2, #0
 800099c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800099e:	494e      	ldr	r1, [pc, #312]	@ (8000ad8 <main+0x1a0>)
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 fdf7 	bl	8001594 <BSP_COM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x78>
  {
    Error_Handler();
 80009ac:	f000 fa2a 	bl	8000e04 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Bootloader Test Sender\n\r");
 80009b0:	484a      	ldr	r0, [pc, #296]	@ (8000adc <main+0x1a4>)
 80009b2:	f007 fc3d 	bl	8008230 <iprintf>
  /* USER CODE END BSP */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //Send Data
  	int offset = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  	uint8_t TxData1[64];
  	uint8_t CRCData[4];
  	uint32_t crc = crc32(data, data_len);
 80009ba:	4b49      	ldr	r3, [pc, #292]	@ (8000ae0 <main+0x1a8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	4848      	ldr	r0, [pc, #288]	@ (8000ae4 <main+0x1ac>)
 80009c2:	f000 f9a7 	bl	8000d14 <crc32>
 80009c6:	4603      	mov	r3, r0
 80009c8:	603b      	str	r3, [r7, #0]
  	memcpy(CRCData, &crc, 4);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	607b      	str	r3, [r7, #4]

  	printf("Data Length: %u\n\r", data_len);
 80009ce:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <main+0x1a8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4844      	ldr	r0, [pc, #272]	@ (8000ae8 <main+0x1b0>)
 80009d6:	f007 fc2b 	bl	8008230 <iprintf>
  	printf("CRC: %lu\n\r", crc);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	4843      	ldr	r0, [pc, #268]	@ (8000aec <main+0x1b4>)
 80009e0:	f007 fc26 	bl	8008230 <iprintf>
  	while (offset < data_len) {
 80009e4:	e033      	b.n	8000a4e <main+0x116>
  	   uint32_t chunk_size = (data_len - offset >= 64) ? 64 : (data_len - offset);
 80009e6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ae0 <main+0x1a8>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	2b40      	cmp	r3, #64	@ 0x40
 80009f0:	bf28      	it	cs
 80009f2:	2340      	movcs	r3, #64	@ 0x40
 80009f4:	64bb      	str	r3, [r7, #72]	@ 0x48

  	   memset(TxData1, 0xFF, 64);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	2240      	movs	r2, #64	@ 0x40
 80009fc:	21ff      	movs	r1, #255	@ 0xff
 80009fe:	4618      	mov	r0, r3
 8000a00:	f007 fd66 	bl	80084d0 <memset>
  	   memcpy(TxData1, &data[offset], chunk_size);
 8000a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000a06:	4a37      	ldr	r2, [pc, #220]	@ (8000ae4 <main+0x1ac>)
 8000a08:	1899      	adds	r1, r3, r2
 8000a0a:	f107 0308 	add.w	r3, r7, #8
 8000a0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000a10:	4618      	mov	r0, r3
 8000a12:	f007 fde8 	bl	80085e6 <memcpy>

  	   if(CAN_Transmit(FILTER_ID1, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_64, TxData1,&hfdcan1) != HAL_OK){
 8000a16:	4b36      	ldr	r3, [pc, #216]	@ (8000af0 <main+0x1b8>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad4 <main+0x19c>)
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	220f      	movs	r2, #15
 8000a24:	2100      	movs	r1, #0
 8000a26:	f7ff fe65 	bl	80006f4 <CAN_Transmit>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <main+0x102>
  		  BSP_LED_On(LED_RED);
 8000a30:	2002      	movs	r0, #2
 8000a32:	f000 fccd 	bl	80013d0 <BSP_LED_On>
  		  Error_Handler();
 8000a36:	f000 f9e5 	bl	8000e04 <Error_Handler>
  	   }
  	   BSP_LED_Toggle(LED_GREEN);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f000 fcf2 	bl	8001424 <BSP_LED_Toggle>
  	   offset += chunk_size;
 8000a40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a44:	4413      	add	r3, r2
 8000a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  	   HAL_Delay(50);
 8000a48:	2032      	movs	r0, #50	@ 0x32
 8000a4a:	f000 fed3 	bl	80017f4 <HAL_Delay>
  	while (offset < data_len) {
 8000a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000a50:	4b23      	ldr	r3, [pc, #140]	@ (8000ae0 <main+0x1a8>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d3c6      	bcc.n	80009e6 <main+0xae>
  	}
  	//Send CRC

  	if(CAN_Transmit(FILTER_ID1, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_4, CRCData, &hfdcan1) != HAL_OK) {
 8000a58:	4b25      	ldr	r3, [pc, #148]	@ (8000af0 <main+0x1b8>)
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad4 <main+0x19c>)
 8000a60:	9200      	str	r2, [sp, #0]
 8000a62:	2204      	movs	r2, #4
 8000a64:	2100      	movs	r1, #0
 8000a66:	f7ff fe45 	bl	80006f4 <CAN_Transmit>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d004      	beq.n	8000a7a <main+0x142>
  		BSP_LED_On(LED_BLUE);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f000 fcad 	bl	80013d0 <BSP_LED_On>
  		Error_Handler();
 8000a76:	f000 f9c5 	bl	8000e04 <Error_Handler>
  	}
    HAL_Delay(50);
 8000a7a:	2032      	movs	r0, #50	@ 0x32
 8000a7c:	f000 feba 	bl	80017f4 <HAL_Delay>
  	CAN_Transmit(FILTER_ID1, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_4, CRCData, &hfdcan1);
 8000a80:	4b1b      	ldr	r3, [pc, #108]	@ (8000af0 <main+0x1b8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4a13      	ldr	r2, [pc, #76]	@ (8000ad4 <main+0x19c>)
 8000a88:	9200      	str	r2, [sp, #0]
 8000a8a:	2204      	movs	r2, #4
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f7ff fe31 	bl	80006f4 <CAN_Transmit>
    HAL_Delay(50);
 8000a92:	2032      	movs	r0, #50	@ 0x32
 8000a94:	f000 feae 	bl	80017f4 <HAL_Delay>
  	CAN_Transmit(FILTER_ID1, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_4, CRCData, &hfdcan1);
 8000a98:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <main+0x1b8>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <main+0x19c>)
 8000aa0:	9200      	str	r2, [sp, #0]
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	f7ff fe25 	bl	80006f4 <CAN_Transmit>
  	BSP_LED_On(LED_GREEN);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 fc90 	bl	80013d0 <BSP_LED_On>

  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8000ab0:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <main+0x1bc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d1fb      	bne.n	8000ab0 <main+0x178>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <main+0x1bc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f000 fcb0 	bl	8001424 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_BLUE);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 fcad 	bl	8001424 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 8000aca:	2002      	movs	r0, #2
 8000acc:	f000 fcaa 	bl	8001424 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000ad0:	e7ee      	b.n	8000ab0 <main+0x178>
 8000ad2:	bf00      	nop
 8000ad4:	200000d0 	.word	0x200000d0
 8000ad8:	200000bc 	.word	0x200000bc
 8000adc:	08008fa0 	.word	0x08008fa0
 8000ae0:	080124c4 	.word	0x080124c4
 8000ae4:	08009004 	.word	0x08009004
 8000ae8:	08008fbc 	.word	0x08008fbc
 8000aec:	08008fd0 	.word	0x08008fd0
 8000af0:	20000000 	.word	0x20000000
 8000af4:	200000cc 	.word	0x200000cc

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09e      	sub	sp, #120	@ 0x78
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2260      	movs	r2, #96	@ 0x60
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f007 fce2 	bl	80084d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	463b      	mov	r3, r7
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
 8000b1a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b1c:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000b20:	f002 f914 	bl	8002d4c <HAL_PWREx_ControlVoltageScaling>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000b2a:	f000 f96b 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b2e:	2310      	movs	r3, #16
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000b36:	2310      	movs	r3, #16
 8000b38:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b42:	2301      	movs	r3, #1
 8000b44:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000b46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b50:	230a      	movs	r3, #10
 8000b52:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b54:	2302      	movs	r3, #2
 8000b56:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000b60:	230c      	movs	r3, #12
 8000b62:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b68:	f107 0318 	add.w	r3, r7, #24
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f9e9 	bl	8002f44 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000b78:	f000 f944 	bl	8000e04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7c:	231f      	movs	r3, #31
 8000b7e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2303      	movs	r3, #3
 8000b82:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b94:	463b      	mov	r3, r7
 8000b96:	2104      	movs	r1, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 f8af 	bl	8003cfc <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ba4:	f000 f92e 	bl	8000e04 <Error_Handler>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3778      	adds	r7, #120	@ 0x78
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bb4:	f002 f9b6 	bl	8002f24 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f002 f953 	bl	8002e64 <HAL_PWREx_ConfigSupply>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000bc4:	f000 f91e 	bl	8000e04 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bd0:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bd2:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <MX_FDCAN1_Init+0x8c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bde:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000be2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8000c02:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c04:	2203      	movs	r2, #3
 8000c06:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c0a:	2210      	movs	r2, #16
 8000c0c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8000c0e:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c10:	2203      	movs	r2, #3
 8000c12:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 16;
 8000c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 23;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c22:	2217      	movs	r2, #23
 8000c24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 16;
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c28:	2210      	movs	r2, #16
 8000c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000c32:	4b08      	ldr	r3, [pc, #32]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <MX_FDCAN1_Init+0x88>)
 8000c40:	f000 ffbc 	bl	8001bbc <HAL_FDCAN_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000c4a:	f000 f8db 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200000d0 	.word	0x200000d0
 8000c58:	4000a400 	.word	0x4000a400

08000c5c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000c60:	2000      	movs	r0, #0
 8000c62:	f002 f843 	bl	8002cec <HAL_ICACHE_ConfigAssociativityMode>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000c6c:	f000 f8ca 	bl	8000e04 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000c70:	f002 f85c 	bl	8002d2c <HAL_ICACHE_Enable>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000c7a:	f000 f8c3 	bl	8000e04 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c90:	4a1f      	ldr	r2, [pc, #124]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca0:	f003 0304 	and.w	r3, r3, #4
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cae:	4a18      	ldr	r2, [pc, #96]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cb8:	4b15      	ldr	r3, [pc, #84]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ccc:	4a10      	ldr	r2, [pc, #64]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cdc:	f003 0308 	and.w	r3, r3, #8
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <MX_GPIO_Init+0x8c>)
 8000cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	46020c00 	.word	0x46020c00

08000d14 <crc32>:

/* USER CODE BEGIN 4 */
uint32_t crc32(uint8_t *data, size_t len) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	61fb      	str	r3, [r7, #28]

    // Calculate number of bytes to pad so total length is a multiple of 64
    size_t padded_len = len;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	61bb      	str	r3, [r7, #24]
    size_t rem = len % 64;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d2e:	60fb      	str	r3, [r7, #12]
    if (rem != 0) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d004      	beq.n	8000d40 <crc32+0x2c>
        padded_len += (64 - rem);
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	3340      	adds	r3, #64	@ 0x40
 8000d3e:	61bb      	str	r3, [r7, #24]
    }

    for (size_t i = 0; i < padded_len; i++) {
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e025      	b.n	8000d92 <crc32+0x7e>
        uint8_t byte;
        if (i < len) {
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d205      	bcs.n	8000d5a <crc32+0x46>
            byte = data[i];
 8000d4e:	687a      	ldr	r2, [r7, #4]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	4413      	add	r3, r2
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	74fb      	strb	r3, [r7, #19]
 8000d58:	e001      	b.n	8000d5e <crc32+0x4a>
        } else {
            byte = 0xFF;  // Pad byte
 8000d5a:	23ff      	movs	r3, #255	@ 0xff
 8000d5c:	74fb      	strb	r3, [r7, #19]
        }

        crc ^= byte;
 8000d5e:	7cfb      	ldrb	r3, [r7, #19]
 8000d60:	69fa      	ldr	r2, [r7, #28]
 8000d62:	4053      	eors	r3, r2
 8000d64:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; j < 8; j++) {
 8000d66:	2300      	movs	r3, #0
 8000d68:	74bb      	strb	r3, [r7, #18]
 8000d6a:	e00c      	b.n	8000d86 <crc32+0x72>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	085a      	lsrs	r2, r3, #1
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	4259      	negs	r1, r3
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <crc32+0x9c>)
 8000d7a:	400b      	ands	r3, r1
 8000d7c:	4053      	eors	r3, r2
 8000d7e:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; j < 8; j++) {
 8000d80:	7cbb      	ldrb	r3, [r7, #18]
 8000d82:	3301      	adds	r3, #1
 8000d84:	74bb      	strb	r3, [r7, #18]
 8000d86:	7cbb      	ldrb	r3, [r7, #18]
 8000d88:	2b07      	cmp	r3, #7
 8000d8a:	d9ef      	bls.n	8000d6c <crc32+0x58>
    for (size_t i = 0; i < padded_len; i++) {
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3d5      	bcc.n	8000d46 <crc32+0x32>
        }
    }
    printf("Padded Length: %u \n\r", padded_len);
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	4805      	ldr	r0, [pc, #20]	@ (8000db4 <crc32+0xa0>)
 8000d9e:	f007 fa47 	bl	8008230 <iprintf>
    return ~crc;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	43db      	mvns	r3, r3
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	edb88320 	.word	0xedb88320
 8000db4:	08008fdc 	.word	0x08008fdc

08000db8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000dca:	f000 fcf3 	bl	80017b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40014800 	.word	0x40014800

08000ddc <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <BSP_PB_Callback+0x24>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	200000cc 	.word	0x200000cc

08000e04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e08:	b672      	cpsid	i
}
 8000e0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <Error_Handler+0x8>

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_MspInit+0x34>)
 8000e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e1c:	4a09      	ldr	r2, [pc, #36]	@ (8000e44 <HAL_MspInit+0x34>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_MspInit+0x34>)
 8000e28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000e34:	2004      	movs	r0, #4
 8000e36:	f000 fdae 	bl	8001996 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	46020c00 	.word	0x46020c00

08000e48 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	22c0      	movs	r2, #192	@ 0xc0
 8000e66:	2100      	movs	r1, #0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fb31 	bl	80084d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <HAL_FDCAN_MspInit+0xd8>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d14e      	bne.n	8000f16 <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN1;
 8000e78:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e7c:	f04f 0300 	mov.w	r3, #0
 8000e80:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Fdcan1ClockSelection = RCC_FDCAN1CLKSOURCE_PLL1;
 8000e84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4618      	mov	r0, r3
 8000e92:	f003 fb3b 	bl	800450c <HAL_RCCEx_PeriphCLKConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000e9c:	f7ff ffb2 	bl	8000e04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8000ea0:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <HAL_FDCAN_MspInit+0xdc>)
 8000ea2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f24 <HAL_FDCAN_MspInit+0xdc>)
 8000ea8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eac:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f24 <HAL_FDCAN_MspInit+0xdc>)
 8000eb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	4b19      	ldr	r3, [pc, #100]	@ (8000f24 <HAL_FDCAN_MspInit+0xdc>)
 8000ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ec4:	4a17      	ldr	r2, [pc, #92]	@ (8000f24 <HAL_FDCAN_MspInit+0xdc>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_FDCAN_MspInit+0xdc>)
 8000ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000ef4:	2309      	movs	r3, #9
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4809      	ldr	r0, [pc, #36]	@ (8000f28 <HAL_FDCAN_MspInit+0xe0>)
 8000f02:	f001 fce9 	bl	80028d8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2027      	movs	r0, #39	@ 0x27
 8000f0c:	f000 fd4e 	bl	80019ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f10:	2027      	movs	r0, #39	@ 0x27
 8000f12:	f000 fd65 	bl	80019e0 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000f16:	bf00      	nop
 8000f18:	37e8      	adds	r7, #232	@ 0xe8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	4000a400 	.word	0x4000a400
 8000f24:	46020c00 	.word	0x46020c00
 8000f28:	42020c00 	.word	0x42020c00

08000f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08e      	sub	sp, #56	@ 0x38
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_InitTick+0xcc>)
 8000f3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f42:	4a2d      	ldr	r2, [pc, #180]	@ (8000ff8 <HAL_InitTick+0xcc>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f48:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_InitTick+0xcc>)
 8000f4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000f52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f5a:	f107 0210 	add.w	r2, r7, #16
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4611      	mov	r1, r2
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fa13 	bl	8004390 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f6a:	f003 f9e9 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8000f6e:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f72:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <HAL_InitTick+0xd0>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	0c9b      	lsrs	r3, r3, #18
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000f7e:	4b20      	ldr	r3, [pc, #128]	@ (8001000 <HAL_InitTick+0xd4>)
 8000f80:	4a20      	ldr	r2, [pc, #128]	@ (8001004 <HAL_InitTick+0xd8>)
 8000f82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8000f84:	4b1e      	ldr	r3, [pc, #120]	@ (8001000 <HAL_InitTick+0xd4>)
 8000f86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f8a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001000 <HAL_InitTick+0xd4>)
 8000f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f90:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <HAL_InitTick+0xd4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	@ (8001000 <HAL_InitTick+0xd4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8000f9e:	4818      	ldr	r0, [pc, #96]	@ (8001000 <HAL_InitTick+0xd4>)
 8000fa0:	f005 ff4c 	bl	8006e3c <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8000faa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8000fb2:	4813      	ldr	r0, [pc, #76]	@ (8001000 <HAL_InitTick+0xd4>)
 8000fb4:	f005 ffa4 	bl	8006f00 <HAL_TIM_Base_Start_IT>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8000fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b0f      	cmp	r3, #15
 8000fca:	d808      	bhi.n	8000fde <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	2047      	movs	r0, #71	@ 0x47
 8000fd2:	f000 fceb 	bl	80019ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <HAL_InitTick+0xdc>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	e002      	b.n	8000fe4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000fe4:	2047      	movs	r0, #71	@ 0x47
 8000fe6:	f000 fcfb 	bl	80019e0 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000fea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3738      	adds	r7, #56	@ 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	46020c00 	.word	0x46020c00
 8000ffc:	431bde83 	.word	0x431bde83
 8001000:	20000134 	.word	0x20000134
 8001004:	40014800 	.word	0x40014800
 8001008:	20000024 	.word	0x20000024

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <NMI_Handler+0x4>

08001014 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <MemManage_Handler+0x4>

08001024 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <BusFault_Handler+0x4>

0800102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <UsageFault_Handler+0x4>

08001034 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001070:	2000      	movs	r0, #0
 8001072:	f000 fa79 	bl	8001568 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001080:	4802      	ldr	r0, [pc, #8]	@ (800108c <FDCAN1_IT0_IRQHandler+0x10>)
 8001082:	f001 f9d3 	bl	800242c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000d0 	.word	0x200000d0

08001090 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001094:	4802      	ldr	r0, [pc, #8]	@ (80010a0 <TIM17_IRQHandler+0x10>)
 8001096:	f005 ffd3 	bl	8007040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000134 	.word	0x20000134

080010a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	e00a      	b.n	80010cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b6:	f3af 8000 	nop.w
 80010ba:	4601      	mov	r1, r0
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	60ba      	str	r2, [r7, #8]
 80010c2:	b2ca      	uxtb	r2, r1
 80010c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf0      	blt.n	80010b6 <_read+0x12>
  }

  return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	60f8      	str	r0, [r7, #12]
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	e009      	b.n	8001104 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 faaf 	bl	800165c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	dbf1      	blt.n	80010f0 <_write+0x12>
  }
  return len;
 800110c:	687b      	ldr	r3, [r7, #4]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_close>:

int _close(int file)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800113e:	605a      	str	r2, [r3, #4]
  return 0;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_isatty>:

int _isatty(int file)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001188:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	@ (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001194:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b0:	f007 f9ec 	bl	800858c <__errno>
 80011b4:	4603      	mov	r3, r0
 80011b6:	220c      	movs	r2, #12
 80011b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c6:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	@ (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011d2:	68fb      	ldr	r3, [r7, #12]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200c0000 	.word	0x200c0000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	20000180 	.word	0x20000180
 80011e8:	20000378 	.word	0x20000378

080011ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <SystemInit+0x68>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011f6:	4a17      	ldr	r2, [pc, #92]	@ (8001254 <SystemInit+0x68>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <SystemInit+0x6c>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <SystemInit+0x6c>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <SystemInit+0x6c>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <SystemInit+0x6c>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001218:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <SystemInit+0x6c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <SystemInit+0x6c>)
 800121e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001222:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001226:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <SystemInit+0x6c>)
 800122a:	2200      	movs	r2, #0
 800122c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <SystemInit+0x6c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a09      	ldr	r2, [pc, #36]	@ (8001258 <SystemInit+0x6c>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001238:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800123a:	4b07      	ldr	r3, [pc, #28]	@ (8001258 <SystemInit+0x6c>)
 800123c:	2200      	movs	r2, #0
 800123e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001240:	4b04      	ldr	r3, [pc, #16]	@ (8001254 <SystemInit+0x68>)
 8001242:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001246:	609a      	str	r2, [r3, #8]
  #endif
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00
 8001258:	46020c00 	.word	0x46020c00

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001294 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff ffc4 	bl	80011ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001264:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001266:	e003      	b.n	8001270 <LoopCopyDataInit>

08001268 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800126a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800126c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800126e:	3104      	adds	r1, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001270:	480a      	ldr	r0, [pc, #40]	@ (800129c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001274:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001276:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001278:	d3f6      	bcc.n	8001268 <CopyDataInit>
	ldr	r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800127c:	e002      	b.n	8001284 <LoopFillZerobss>

0800127e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800127e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001280:	f842 3b04 	str.w	r3, [r2], #4

08001284 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <LoopForever+0x16>)
	cmp	r2, r3
 8001286:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001288:	d3f9      	bcc.n	800127e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f007 f985 	bl	8008598 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff fb53 	bl	8000938 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001294:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001298:	08012618 	.word	0x08012618
	ldr	r0, =_sdata
 800129c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012a0:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80012a4:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80012a8:	20000376 	.word	0x20000376

080012ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_IRQHandler>
	...

080012b0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d009      	beq.n	80012dc <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d006      	beq.n	80012dc <BSP_LED_Init+0x2c>
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d003      	beq.n	80012dc <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012d4:	f06f 0301 	mvn.w	r3, #1
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80012da:	e06e      	b.n	80013ba <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d10f      	bne.n	8001302 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80012e2:	4b38      	ldr	r3, [pc, #224]	@ (80013c4 <BSP_LED_Init+0x114>)
 80012e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e8:	4a36      	ldr	r2, [pc, #216]	@ (80013c4 <BSP_LED_Init+0x114>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012f2:	4b34      	ldr	r3, [pc, #208]	@ (80013c4 <BSP_LED_Init+0x114>)
 80012f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	61bb      	str	r3, [r7, #24]
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	e046      	b.n	8001390 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d10f      	bne.n	8001328 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8001308:	4b2e      	ldr	r3, [pc, #184]	@ (80013c4 <BSP_LED_Init+0x114>)
 800130a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800130e:	4a2d      	ldr	r2, [pc, #180]	@ (80013c4 <BSP_LED_Init+0x114>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001318:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <BSP_LED_Init+0x114>)
 800131a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800131e:	f003 0304 	and.w	r3, r3, #4
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	e033      	b.n	8001390 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001328:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <BSP_LED_Init+0x114>)
 800132a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	2b00      	cmp	r3, #0
 8001334:	d110      	bne.n	8001358 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b23      	ldr	r3, [pc, #140]	@ (80013c4 <BSP_LED_Init+0x114>)
 8001338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800133c:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <BSP_LED_Init+0x114>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <BSP_LED_Init+0x114>)
 8001348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001354:	2301      	movs	r3, #1
 8001356:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8001358:	f001 fdd4 	bl	8002f04 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 800135c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800135e:	2b01      	cmp	r3, #1
 8001360:	d107      	bne.n	8001372 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001362:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <BSP_LED_Init+0x114>)
 8001364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001368:	4a16      	ldr	r2, [pc, #88]	@ (80013c4 <BSP_LED_Init+0x114>)
 800136a:	f023 0304 	bic.w	r3, r3, #4
 800136e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <BSP_LED_Init+0x114>)
 8001374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001378:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <BSP_LED_Init+0x114>)
 800137a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800137e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <BSP_LED_Init+0x114>)
 8001384:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	4a0d      	ldr	r2, [pc, #52]	@ (80013c8 <BSP_LED_Init+0x118>)
 8001394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001398:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a2:	2303      	movs	r3, #3
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a08      	ldr	r2, [pc, #32]	@ (80013cc <BSP_LED_Init+0x11c>)
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	f107 021c 	add.w	r2, r7, #28
 80013b2:	4611      	mov	r1, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fa8f 	bl	80028d8 <HAL_GPIO_Init>
  }

  return ret;
 80013ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3738      	adds	r7, #56	@ 0x38
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	46020c00 	.word	0x46020c00
 80013c8:	08012520 	.word	0x08012520
 80013cc:	2000000c 	.word	0x2000000c

080013d0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d009      	beq.n	80013f8 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <BSP_LED_On+0x28>
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d003      	beq.n	80013f8 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80013f0:	f06f 0301 	mvn.w	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	e00b      	b.n	8001410 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4a08      	ldr	r2, [pc, #32]	@ (800141c <BSP_LED_On+0x4c>)
 80013fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <BSP_LED_On+0x50>)
 8001404:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001408:	2201      	movs	r2, #1
 800140a:	4619      	mov	r1, r3
 800140c:	f001 fc3c 	bl	8002c88 <HAL_GPIO_WritePin>
  }

  return ret;
 8001410:	68fb      	ldr	r3, [r7, #12]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000000c 	.word	0x2000000c
 8001420:	08012520 	.word	0x08012520

08001424 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d009      	beq.n	800144c <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d006      	beq.n	800144c <BSP_LED_Toggle+0x28>
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d003      	beq.n	800144c <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001444:	f06f 0301 	mvn.w	r3, #1
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	e00b      	b.n	8001464 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <BSP_LED_Toggle+0x4c>)
 8001450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4907      	ldr	r1, [pc, #28]	@ (8001474 <BSP_LED_Toggle+0x50>)
 8001458:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f001 fc2a 	bl	8002cb8 <HAL_GPIO_TogglePin>
  }

  return ret;
 8001464:	68fb      	ldr	r3, [r7, #12]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c
 8001474:	08012520 	.word	0x08012520

08001478 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	460a      	mov	r2, r1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4613      	mov	r3, r2
 8001486:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001488:	4b30      	ldr	r3, [pc, #192]	@ (800154c <BSP_PB_Init+0xd4>)
 800148a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800148e:	4a2f      	ldr	r2, [pc, #188]	@ (800154c <BSP_PB_Init+0xd4>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001498:	4b2c      	ldr	r3, [pc, #176]	@ (800154c <BSP_PB_Init+0xd4>)
 800149a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80014a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014aa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80014ac:	2302      	movs	r3, #2
 80014ae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2302      	movs	r3, #2
 80014b2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80014b4:	79bb      	ldrb	r3, [r7, #6]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <BSP_PB_Init+0xd8>)
 80014c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f001 fa03 	bl	80028d8 <HAL_GPIO_Init>
 80014d2:	e036      	b.n	8001542 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <BSP_PB_Init+0xdc>)
 80014d6:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a1d      	ldr	r2, [pc, #116]	@ (8001550 <BSP_PB_Init+0xd8>)
 80014dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e0:	f107 020c 	add.w	r2, r7, #12
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 f9f6 	bl	80028d8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <BSP_PB_Init+0xe0>)
 80014f8:	441a      	add	r2, r3
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4917      	ldr	r1, [pc, #92]	@ (800155c <BSP_PB_Init+0xe4>)
 80014fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f000 fafd 	bl	8001b04 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800150a:	79fa      	ldrb	r2, [r7, #7]
 800150c:	4613      	mov	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4a10      	ldr	r2, [pc, #64]	@ (8001558 <BSP_PB_Init+0xe0>)
 8001516:	1898      	adds	r0, r3, r2
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <BSP_PB_Init+0xe8>)
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	461a      	mov	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	f000 fac2 	bl	8001aac <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001528:	2018      	movs	r0, #24
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <BSP_PB_Init+0xec>)
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	f000 fa39 	bl	80019ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800153a:	2318      	movs	r3, #24
 800153c:	4618      	mov	r0, r3
 800153e:	f000 fa4f 	bl	80019e0 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3720      	adds	r7, #32
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	46020c00 	.word	0x46020c00
 8001550:	20000018 	.word	0x20000018
 8001554:	10110000 	.word	0x10110000
 8001558:	20000184 	.word	0x20000184
 800155c:	08012528 	.word	0x08012528
 8001560:	2000001c 	.word	0x2000001c
 8001564:	20000020 	.word	0x20000020

08001568 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001572:	79fa      	ldrb	r2, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <BSP_PB_IRQHandler+0x28>)
 800157e:	4413      	add	r3, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fad3 	bl	8001b2c <HAL_EXTI_IRQHandler>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000184 	.word	0x20000184

08001594 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80015aa:	f06f 0301 	mvn.w	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	e018      	b.n	80015e4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2294      	movs	r2, #148	@ 0x94
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <BSP_COM_Init+0x5c>)
 80015bc:	4413      	add	r3, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 f870 	bl	80016a4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2294      	movs	r2, #148	@ 0x94
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <BSP_COM_Init+0x5c>)
 80015ce:	4413      	add	r3, r2
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f80e 	bl	80015f4 <MX_USART1_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80015de:	f06f 0303 	mvn.w	r3, #3
 80015e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80015e4:	68fb      	ldr	r3, [r7, #12]
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000190 	.word	0x20000190

080015f4 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80015fe:	4b16      	ldr	r3, [pc, #88]	@ (8001658 <MX_USART1_Init+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	220c      	movs	r2, #12
 8001612:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	895b      	ldrh	r3, [r3, #10]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	891b      	ldrh	r3, [r3, #8]
 800162a:	461a      	mov	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	899b      	ldrh	r3, [r3, #12]
 8001634:	461a      	mov	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001640:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f005 ffb7 	bl	80075bc <HAL_UART_Init>
 800164e:	4603      	mov	r3, r0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000008 	.word	0x20000008

0800165c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001664:	4b09      	ldr	r3, [pc, #36]	@ (800168c <__io_putchar+0x30>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	2394      	movs	r3, #148	@ 0x94
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <__io_putchar+0x34>)
 8001672:	1898      	adds	r0, r3, r2
 8001674:	1d39      	adds	r1, r7, #4
 8001676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800167a:	2201      	movs	r2, #1
 800167c:	f005 fff8 	bl	8007670 <HAL_UART_Transmit>
  return ch;
 8001680:	687b      	ldr	r3, [r7, #4]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000224 	.word	0x20000224
 8001690:	20000190 	.word	0x20000190

08001694 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fb9f 	bl	8000ddc <BSP_PB_Callback>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <COM1_MspInit+0xa8>)
 80016ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016b2:	4a26      	ldr	r2, [pc, #152]	@ (800174c <COM1_MspInit+0xa8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <COM1_MspInit+0xa8>)
 80016be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <COM1_MspInit+0xa8>)
 80016cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016d0:	4a1e      	ldr	r2, [pc, #120]	@ (800174c <COM1_MspInit+0xa8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80016da:	4b1c      	ldr	r3, [pc, #112]	@ (800174c <COM1_MspInit+0xa8>)
 80016dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80016e8:	4b18      	ldr	r3, [pc, #96]	@ (800174c <COM1_MspInit+0xa8>)
 80016ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016ee:	4a17      	ldr	r2, [pc, #92]	@ (800174c <COM1_MspInit+0xa8>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <COM1_MspInit+0xa8>)
 80016fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80016fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800170a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001710:	2302      	movs	r3, #2
 8001712:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001718:	2307      	movs	r3, #7
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	4619      	mov	r1, r3
 8001722:	480b      	ldr	r0, [pc, #44]	@ (8001750 <COM1_MspInit+0xac>)
 8001724:	f001 f8d8 	bl	80028d8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001728:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800172c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001732:	2307      	movs	r3, #7
 8001734:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4804      	ldr	r0, [pc, #16]	@ (8001750 <COM1_MspInit+0xac>)
 800173e:	f001 f8cb 	bl	80028d8 <HAL_GPIO_Init>
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	46020c00 	.word	0x46020c00
 8001750:	42020000 	.word	0x42020000

08001754 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_Init+0x50>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_Init+0x50>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 f916 	bl	8001996 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800176a:	f002 fcb9 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <HAL_Init+0x54>)
 8001772:	6a1b      	ldr	r3, [r3, #32]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	490c      	ldr	r1, [pc, #48]	@ (80017ac <HAL_Init+0x58>)
 800177a:	5ccb      	ldrb	r3, [r1, r3]
 800177c:	fa22 f303 	lsr.w	r3, r2, r3
 8001780:	4a0b      	ldr	r2, [pc, #44]	@ (80017b0 <HAL_Init+0x5c>)
 8001782:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001784:	2004      	movs	r0, #4
 8001786:	f000 f939 	bl	80019fc <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800178a:	2007      	movs	r0, #7
 800178c:	f7ff fbce 	bl	8000f2c <HAL_InitTick>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e002      	b.n	80017a0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800179a:	f7ff fb39 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40022000 	.word	0x40022000
 80017a8:	46020c00 	.word	0x46020c00
 80017ac:	080124c8 	.word	0x080124c8
 80017b0:	20000004 	.word	0x20000004

080017b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x20>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4413      	add	r3, r2
 80017c4:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <HAL_IncTick+0x24>)
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	20000028 	.word	0x20000028
 80017d8:	20000228 	.word	0x20000228

080017dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return uwTick;
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <HAL_GetTick+0x14>)
 80017e2:	681b      	ldr	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000228 	.word	0x20000228

080017f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017fc:	f7ff ffee 	bl	80017dc <HAL_GetTick>
 8001800:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180c:	d005      	beq.n	800181a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_Delay+0x44>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800181a:	bf00      	nop
 800181c:	f7ff ffde 	bl	80017dc <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	429a      	cmp	r2, r3
 800182a:	d8f7      	bhi.n	800181c <HAL_Delay+0x28>
  {
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000028 	.word	0x20000028

0800183c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800184c:	4b0c      	ldr	r3, [pc, #48]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186e:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <__NVIC_SetPriorityGrouping+0x44>)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	60d3      	str	r3, [r2, #12]
}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <__NVIC_GetPriorityGrouping+0x18>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	f003 0307 	and.w	r3, r3, #7
}
 8001892:	4618      	mov	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	db0b      	blt.n	80018ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	f003 021f 	and.w	r2, r3, #31
 80018b8:	4907      	ldr	r1, [pc, #28]	@ (80018d8 <__NVIC_EnableIRQ+0x38>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	095b      	lsrs	r3, r3, #5
 80018c0:	2001      	movs	r0, #1
 80018c2:	fa00 f202 	lsl.w	r2, r0, r2
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100

080018dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	6039      	str	r1, [r7, #0]
 80018e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	db0a      	blt.n	8001906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	490c      	ldr	r1, [pc, #48]	@ (8001928 <__NVIC_SetPriority+0x4c>)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	0112      	lsls	r2, r2, #4
 80018fc:	b2d2      	uxtb	r2, r2
 80018fe:	440b      	add	r3, r1
 8001900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001904:	e00a      	b.n	800191c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	4908      	ldr	r1, [pc, #32]	@ (800192c <__NVIC_SetPriority+0x50>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	3b04      	subs	r3, #4
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	440b      	add	r3, r1
 800191a:	761a      	strb	r2, [r3, #24]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e000e100 	.word	0xe000e100
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b480      	push	{r7}
 8001932:	b089      	sub	sp, #36	@ 0x24
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f1c3 0307 	rsb	r3, r3, #7
 800194a:	2b04      	cmp	r3, #4
 800194c:	bf28      	it	cs
 800194e:	2304      	movcs	r3, #4
 8001950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3304      	adds	r3, #4
 8001956:	2b06      	cmp	r3, #6
 8001958:	d902      	bls.n	8001960 <NVIC_EncodePriority+0x30>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3b03      	subs	r3, #3
 800195e:	e000      	b.n	8001962 <NVIC_EncodePriority+0x32>
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	f04f 32ff 	mov.w	r2, #4294967295
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001978:	f04f 31ff 	mov.w	r1, #4294967295
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	43d9      	mvns	r1, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	4313      	orrs	r3, r2
         );
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff4c 	bl	800183c <__NVIC_SetPriorityGrouping>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ba:	f7ff ff63 	bl	8001884 <__NVIC_GetPriorityGrouping>
 80019be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	6978      	ldr	r0, [r7, #20]
 80019c6:	f7ff ffb3 	bl	8001930 <NVIC_EncodePriority>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff ff82 	bl	80018dc <__NVIC_SetPriority>
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ff56 	bl	80018a0 <__NVIC_EnableIRQ>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d844      	bhi.n	8001a94 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a10 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a10:	08001a33 	.word	0x08001a33
 8001a14:	08001a51 	.word	0x08001a51
 8001a18:	08001a73 	.word	0x08001a73
 8001a1c:	08001a95 	.word	0x08001a95
 8001a20:	08001a25 	.word	0x08001a25
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a2a:	f043 0304 	orr.w	r3, r3, #4
 8001a2e:	6013      	str	r3, [r2, #0]
      break;
 8001a30:	e031      	b.n	8001a96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a38:	f023 0304 	bic.w	r3, r3, #4
 8001a3c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a44:	4a18      	ldr	r2, [pc, #96]	@ (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a46:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a4e:	e022      	b.n	8001a96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a50:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a13      	ldr	r2, [pc, #76]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a66:	4a10      	ldr	r2, [pc, #64]	@ (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a70:	e011      	b.n	8001a96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001a72:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001a78:	f023 0304 	bic.w	r3, r3, #4
 8001a7c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001a88:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001a8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001a92:	e000      	b.n	8001a96 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001a94:	bf00      	nop
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010
 8001aa8:	46020c00 	.word	0x46020c00

08001aac <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d011      	beq.n	8001ae8 <HAL_EXTI_RegisterCallback+0x3c>
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	dc13      	bgt.n	8001af0 <HAL_EXTI_RegisterCallback+0x44>
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_EXTI_RegisterCallback+0x26>
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d007      	beq.n	8001ae0 <HAL_EXTI_RegisterCallback+0x34>
 8001ad0:	e00e      	b.n	8001af0 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	609a      	str	r2, [r3, #8]
      break;
 8001ade:	e00a      	b.n	8001af6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	605a      	str	r2, [r3, #4]
      break;
 8001ae6:	e006      	b.n	8001af6 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	75fb      	strb	r3, [r7, #23]
      break;
 8001af4:	bf00      	nop
  }

  return status;
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e003      	b.n	8001b20 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0c1b      	lsrs	r3, r3, #16
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2201      	movs	r2, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <HAL_EXTI_IRQHandler+0x88>)
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb8 <HAL_EXTI_IRQHandler+0x8c>)
 8001b84:	4413      	add	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4798      	blx	r3
    }
  }
}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	4602200c 	.word	0x4602200c
 8001bb8:	46022010 	.word	0x46022010

08001bbc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e142      	b.n	8001e54 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff f930 	bl	8000e48 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0210 	bic.w	r2, r2, #16
 8001bf6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf8:	f7ff fdf0 	bl	80017dc <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001bfe:	e012      	b.n	8001c26 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c00:	f7ff fdec 	bl	80017dc <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	2b0a      	cmp	r3, #10
 8001c0c:	d90b      	bls.n	8001c26 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e116      	b.n	8001e54 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d0e5      	beq.n	8001c00 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff fdca 	bl	80017dc <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001c4c:	f7ff fdc6 	bl	80017dc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0f0      	b.n	8001e54 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0e5      	beq.n	8001c4c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0202 	orr.w	r2, r2, #2
 8001c8e:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001c90:	4a72      	ldr	r2, [pc, #456]	@ (8001e5c <HAL_FDCAN_Init+0x2a0>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7c1b      	ldrb	r3, [r3, #16]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	699a      	ldr	r2, [r3, #24]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	e007      	b.n	8001cc2 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699a      	ldr	r2, [r3, #24]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	7c5b      	ldrb	r3, [r3, #17]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d108      	bne.n	8001cdc <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001cd8:	619a      	str	r2, [r3, #24]
 8001cda:	e007      	b.n	8001cec <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001cea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7c9b      	ldrb	r3, [r3, #18]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d108      	bne.n	8001d06 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699a      	ldr	r2, [r3, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	e007      	b.n	8001d16 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699a      	ldr	r2, [r3, #24]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001d14:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001d3a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0210 	bic.w	r2, r2, #16
 8001d4a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d108      	bne.n	8001d66 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0204 	orr.w	r2, r2, #4
 8001d62:	619a      	str	r2, [r3, #24]
 8001d64:	e02c      	b.n	8001dc0 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d028      	beq.n	8001dc0 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d01c      	beq.n	8001db0 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d84:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0210 	orr.w	r2, r2, #16
 8001d94:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d110      	bne.n	8001dc0 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699a      	ldr	r2, [r3, #24]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0220 	orr.w	r2, r2, #32
 8001dac:	619a      	str	r2, [r3, #24]
 8001dae:	e007      	b.n	8001dc0 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699a      	ldr	r2, [r3, #24]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0220 	orr.w	r2, r2, #32
 8001dbe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dd0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001dd8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001de8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001dea:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001df4:	d115      	bne.n	8001e22 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dfa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e00:	3b01      	subs	r3, #1
 8001e02:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e04:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001e0e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	3b01      	subs	r3, #1
 8001e18:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001e1e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001e20:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fc7b 	bl	8002734 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	4000a500 	.word	0x4000a500

08001e60 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001e70:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d002      	beq.n	8001e7e <HAL_FDCAN_ConfigFilter+0x1e>
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d13d      	bne.n	8001efa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d119      	bne.n	8001eba <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001e92:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001e9a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	e01d      	b.n	8001ef6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	075a      	lsls	r2, r3, #29
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	079a      	lsls	r2, r3, #30
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3304      	adds	r3, #4
 8001eee:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e006      	b.n	8001f08 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001efe:	f043 0202 	orr.w	r2, r3, #2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d116      	bne.n	8001f5c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f36:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	011a      	lsls	r2, r3, #4
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	431a      	orrs	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e006      	b.n	8001f6a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f60:	f043 0204 	orr.w	r2, r3, #4
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d110      	bne.n	8001fac <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e006      	b.n	8001fba <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb0:	f043 0204 	orr.w	r2, r3, #4
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
  }
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b086      	sub	sp, #24
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	60f8      	str	r0, [r7, #12]
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d12c      	bne.n	8002038 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e023      	b.n	8002046 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	68b9      	ldr	r1, [r7, #8]
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 fbe3 	bl	80027e0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2101      	movs	r1, #1
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	fa01 f202 	lsl.w	r2, r1, r2
 8002026:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800202a:	2201      	movs	r2, #1
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002034:	2300      	movs	r3, #0
 8002036:	e006      	b.n	8002046 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800203c:	f043 0208 	orr.w	r2, r3, #8
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	@ 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002068:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 800206a:	7efb      	ldrb	r3, [r7, #27]
 800206c:	2b02      	cmp	r3, #2
 800206e:	f040 80e8 	bne.w	8002242 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b40      	cmp	r3, #64	@ 0x40
 8002076:	d137      	bne.n	80020e8 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	2b00      	cmp	r3, #0
 8002086:	d107      	bne.n	8002098 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0db      	b.n	8002250 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	0e1b      	lsrs	r3, r3, #24
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10a      	bne.n	80020c0 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020b2:	0a5b      	lsrs	r3, r3, #9
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80020bc:	2301      	movs	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	4413      	add	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80020d8:	69fa      	ldr	r2, [r7, #28]
 80020da:	4613      	mov	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020e6:	e036      	b.n	8002156 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020f0:	f003 030f 	and.w	r3, r3, #15
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0a3      	b.n	8002250 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002110:	0e1b      	lsrs	r3, r3, #24
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b01      	cmp	r3, #1
 8002118:	d10a      	bne.n	8002130 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800212c:	2301      	movs	r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	69fa      	ldr	r2, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	4613      	mov	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800216a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e005      	b.n	8002186 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	3304      	adds	r3, #4
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	f003 020f 	and.w	r2, r3, #15
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	0e1b      	lsrs	r3, r3, #24
 80021da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0fda      	lsrs	r2, r3, #31
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	3304      	adds	r3, #4
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
 80021fa:	e00a      	b.n	8002212 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	441a      	add	r2, r3
 8002202:	6839      	ldr	r1, [r7, #0]
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	440b      	add	r3, r1
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	3301      	adds	r3, #1
 8002210:	623b      	str	r3, [r7, #32]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	4a11      	ldr	r2, [pc, #68]	@ (800225c <HAL_FDCAN_GetRxMessage+0x20c>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	461a      	mov	r2, r3
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	4293      	cmp	r3, r2
 8002220:	d3ec      	bcc.n	80021fc <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b40      	cmp	r3, #64	@ 0x40
 8002226:	d105      	bne.n	8002234 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8002232:	e004      	b.n	800223e <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	69fa      	ldr	r2, [r7, #28]
 800223a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e006      	b.n	8002250 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002246:	f043 0208 	orr.w	r2, r3, #8
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
  }
}
 8002250:	4618      	mov	r0, r3
 8002252:	372c      	adds	r7, #44	@ 0x2c
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	0801252c 	.word	0x0801252c

08002260 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002272:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d003      	beq.n	8002282 <HAL_FDCAN_ActivateNotification+0x22>
 800227a:	7dfb      	ldrb	r3, [r7, #23]
 800227c:	2b02      	cmp	r3, #2
 800227e:	f040 80c8 	bne.w	8002412 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002288:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03b      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d031      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d027      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01d      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d004      	beq.n	80022ee <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d013      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d004      	beq.n	8002302 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00c      	beq.n	8002326 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0201 	orr.w	r2, r2, #1
 8002324:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	2b00      	cmp	r3, #0
 800232e:	d004      	beq.n	800233a <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d13b      	bne.n	80023b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002340:	2b00      	cmp	r3, #0
 8002342:	d004      	beq.n	800234e <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d131      	bne.n	80023b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	d127      	bne.n	80023b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11d      	bne.n	80023b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	2b00      	cmp	r3, #0
 8002388:	d113      	bne.n	80023b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00c      	beq.n	80023c2 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d007      	beq.n	80023c2 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0202 	orr.w	r2, r2, #2
 80023c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	430a      	orrs	r2, r1
 80023dc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d009      	beq.n	80023fe <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e006      	b.n	8002420 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800243a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002448:	4013      	ands	r3, r2
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002460:	4013      	ands	r3, r2
 8002462:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800246a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002478:	4013      	ands	r3, r2
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002482:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8002486:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248e:	6a3a      	ldr	r2, [r7, #32]
 8002490:	4013      	ands	r3, r2
 8002492:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800249e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024ba:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2240      	movs	r2, #64	@ 0x40
 80024d6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f90b 	bl	80026f4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d019      	beq.n	800251c <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d014      	beq.n	800251c <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80024fa:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002512:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002514:	6939      	ldr	r1, [r7, #16]
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8cd 	bl	80026b6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800251c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002528:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800252a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f8a2 	bl	8002676 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800253e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe f8fc 	bl	8000740 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	2b00      	cmp	r3, #0
 800254c:	d007      	beq.n	800255e <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002554:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7fe f93b 	bl	80007d4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00c      	beq.n	8002582 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800257a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f885 	bl	800268c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	d018      	beq.n	80025be <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d013      	beq.n	80025be <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800259e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2280      	movs	r2, #128	@ 0x80
 80025b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f871 	bl	80026a0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00c      	beq.n	80025e2 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025da:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f875 	bl	80026cc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00c      	beq.n	8002606 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f86d 	bl	80026e0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00f      	beq.n	8002630 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00a      	beq.n	8002630 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002622:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800263e:	69f9      	ldr	r1, [r7, #28]
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f86b 	bl	800271c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 f84d 	bl	8002708 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800266e:	bf00      	nop
 8002670:	3730      	adds	r7, #48	@ 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800273c:	4b27      	ldr	r3, [pc, #156]	@ (80027dc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800273e:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800274e:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002756:	041a      	lsls	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002774:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277c:	061a      	lsls	r2, r3, #24
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	e005      	b.n	80027c2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3304      	adds	r3, #4
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d3f3      	bcc.n	80027b6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80027ce:	bf00      	nop
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	4000ac00 	.word	0x4000ac00

080027e0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10a      	bne.n	800280c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80027fe:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002806:	4313      	orrs	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e00a      	b.n	8002822 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002814:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800281a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800281c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002820:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800282c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002832:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002838:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	3304      	adds	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	3304      	adds	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e020      	b.n	80028b6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	3303      	adds	r3, #3
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3302      	adds	r3, #2
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	440b      	add	r3, r1
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800288c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	3301      	adds	r3, #1
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	440b      	add	r3, r1
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800289a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	440a      	add	r2, r1
 80028a2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80028a4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	3304      	adds	r3, #4
 80028ae:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	3304      	adds	r3, #4
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a06      	ldr	r2, [pc, #24]	@ (80028d4 <FDCAN_CopyMessageToRAM+0xf4>)
 80028bc:	5cd3      	ldrb	r3, [r2, r3]
 80028be:	461a      	mov	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d3d6      	bcc.n	8002874 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80028c6:	bf00      	nop
 80028c8:	bf00      	nop
 80028ca:	3724      	adds	r7, #36	@ 0x24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	0801252c 	.word	0x0801252c

080028d8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80028d8:	b480      	push	{r7}
 80028da:	b089      	sub	sp, #36	@ 0x24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80028ea:	e1ba      	b.n	8002c62 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f000 81aa 	beq.w	8002c5c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a55      	ldr	r2, [pc, #340]	@ (8002a60 <HAL_GPIO_Init+0x188>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d15d      	bne.n	80029cc <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002916:	2201      	movs	r2, #1
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	4013      	ands	r3, r2
 8002924:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	4313      	orrs	r3, r2
 8002938:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002940:	4a48      	ldr	r2, [pc, #288]	@ (8002a64 <HAL_GPIO_Init+0x18c>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002948:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800294a:	4a46      	ldr	r2, [pc, #280]	@ (8002a64 <HAL_GPIO_Init+0x18c>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	3208      	adds	r2, #8
 800295e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002962:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	220f      	movs	r2, #15
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43db      	mvns	r3, r3
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	4013      	ands	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220b      	movs	r2, #11
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69fa      	ldr	r2, [r7, #28]
 800298a:	4313      	orrs	r3, r2
 800298c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	08da      	lsrs	r2, r3, #3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	3208      	adds	r2, #8
 8002996:	69f9      	ldr	r1, [r7, #28]
 8002998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	2203      	movs	r2, #3
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69fa      	ldr	r2, [r7, #28]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	2202      	movs	r2, #2
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	69fa      	ldr	r2, [r7, #28]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	69fa      	ldr	r2, [r7, #28]
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	e067      	b.n	8002a9c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x104>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b12      	cmp	r3, #18
 80029da:	d145      	bne.n	8002a68 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	08da      	lsrs	r2, r3, #3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3208      	adds	r2, #8
 80029e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69fa      	ldr	r2, [r7, #28]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69fa      	ldr	r2, [r7, #28]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	08da      	lsrs	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	3208      	adds	r2, #8
 8002a22:	69f9      	ldr	r1, [r7, #28]
 8002a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0203 	and.w	r2, r3, #3
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	69fa      	ldr	r2, [r7, #28]
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e01e      	b.n	8002a9c <HAL_GPIO_Init+0x1c4>
 8002a5e:	bf00      	nop
 8002a60:	46020000 	.word	0x46020000
 8002a64:	0801253c 	.word	0x0801253c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	2203      	movs	r2, #3
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0203 	and.w	r2, r3, #3
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d00b      	beq.n	8002abc <HAL_GPIO_Init+0x1e4>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d007      	beq.n	8002abc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b12      	cmp	r3, #18
 8002aba:	d130      	bne.n	8002b1e <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69fa      	ldr	r2, [r7, #28]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	69fa      	ldr	r2, [r7, #28]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002af2:	2201      	movs	r2, #1
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	091b      	lsrs	r3, r3, #4
 8002b08:	f003 0201 	and.w	r2, r3, #1
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d017      	beq.n	8002b56 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	69fa      	ldr	r2, [r7, #28]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d07c      	beq.n	8002c5c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002b62:	4a47      	ldr	r2, [pc, #284]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	089b      	lsrs	r3, r3, #2
 8002b68:	3318      	adds	r3, #24
 8002b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0303 	and.w	r3, r3, #3
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	0a9a      	lsrs	r2, r3, #10
 8002b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c84 <HAL_GPIO_Init+0x3ac>)
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	f002 0203 	and.w	r2, r2, #3
 8002b94:	00d2      	lsls	r2, r2, #3
 8002b96:	4093      	lsls	r3, r2
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b9e:	4938      	ldr	r1, [pc, #224]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002bac:	4b34      	ldr	r3, [pc, #208]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69fa      	ldr	r2, [r7, #28]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002bd0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002bfa:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002c00:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c06:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	43db      	mvns	r3, r3
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002c26:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002c2e:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c34:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d003      	beq.n	8002c54 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002c54:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <HAL_GPIO_Init+0x3a8>)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f ae3d 	bne.w	80028ec <HAL_GPIO_Init+0x14>
  }
}
 8002c72:	bf00      	nop
 8002c74:	bf00      	nop
 8002c76:	3724      	adds	r7, #36	@ 0x24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	46022000 	.word	0x46022000
 8002c84:	002f7f7f 	.word	0x002f7f7f

08002c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	460b      	mov	r3, r1
 8002c92:	807b      	strh	r3, [r7, #2]
 8002c94:	4613      	mov	r3, r2
 8002c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c98:	787b      	ldrb	r3, [r7, #1]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c9e:	887a      	ldrh	r2, [r7, #2]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cca:	887a      	ldrh	r2, [r7, #2]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	041a      	lsls	r2, r3, #16
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	43d9      	mvns	r1, r3
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	400b      	ands	r3, r1
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	e007      	b.n	8002d1a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002d0a:	4b07      	ldr	r3, [pc, #28]	@ (8002d28 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 0204 	bic.w	r2, r3, #4
 8002d12:	4905      	ldr	r1, [pc, #20]	@ (8002d28 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40030400 	.word	0x40030400

08002d2c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002d30:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <HAL_ICACHE_Enable+0x1c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a04      	ldr	r2, [pc, #16]	@ (8002d48 <HAL_ICACHE_Enable+0x1c>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	40030400 	.word	0x40030400

08002d4c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8002d54:	4b39      	ldr	r3, [pc, #228]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d5c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d10b      	bne.n	8002d7e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6c:	d905      	bls.n	8002d7a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8002d6e:	4b33      	ldr	r3, [pc, #204]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	4a32      	ldr	r2, [pc, #200]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d78:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e057      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d84:	d90a      	bls.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8002d86:	4b2d      	ldr	r3, [pc, #180]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	4a2a      	ldr	r2, [pc, #168]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002d94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d98:	60d3      	str	r3, [r2, #12]
 8002d9a:	e007      	b.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8002d9c:	4b27      	ldr	r3, [pc, #156]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8002da4:	4925      	ldr	r1, [pc, #148]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002dac:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a24      	ldr	r2, [pc, #144]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	2232      	movs	r2, #50	@ 0x32
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	4a21      	ldr	r2, [pc, #132]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002dca:	e002      	b.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d102      	bne.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x98>
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f3      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01b      	beq.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a15      	ldr	r2, [pc, #84]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	2232      	movs	r2, #50	@ 0x32
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	4a11      	ldr	r2, [pc, #68]	@ (8002e44 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	3301      	adds	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002e08:	e002      	b.n	8002e10 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8002e10:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f3      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e000      	b.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	46020800 	.word	0x46020800
 8002e40:	20000004 	.word	0x20000004
 8002e44:	10624dd3 	.word	0x10624dd3

08002e48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8002e4c:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	46020800 	.word	0x46020800

08002e64 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8002e6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_PWREx_ConfigSupply+0x94>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a22      	ldr	r2, [pc, #136]	@ (8002efc <HAL_PWREx_ConfigSupply+0x98>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	2232      	movs	r2, #50	@ 0x32
 8002e7a:	fb02 f303 	mul.w	r3, r2, r3
 8002e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002efc <HAL_PWREx_ConfigSupply+0x98>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	099b      	lsrs	r3, r3, #6
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d113      	bne.n	8002eb8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002e90:	4b1b      	ldr	r3, [pc, #108]	@ (8002f00 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	@ (8002f00 <HAL_PWREx_ConfigSupply+0x9c>)
 8002e96:	f023 0302 	bic.w	r3, r3, #2
 8002e9a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002e9c:	e002      	b.n	8002ea4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002ea4:	4b16      	ldr	r3, [pc, #88]	@ (8002f00 <HAL_PWREx_ConfigSupply+0x9c>)
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d116      	bne.n	8002ede <HAL_PWREx_ConfigSupply+0x7a>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f3      	bne.n	8002e9e <HAL_PWREx_ConfigSupply+0x3a>
 8002eb6:	e012      	b.n	8002ede <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <HAL_PWREx_ConfigSupply+0x9c>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a10      	ldr	r2, [pc, #64]	@ (8002f00 <HAL_PWREx_ConfigSupply+0x9c>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002ec4:	e002      	b.n	8002ecc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HAL_PWREx_ConfigSupply+0x9c>)
 8002ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <HAL_PWREx_ConfigSupply+0x7a>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f3      	bne.n	8002ec6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e000      	b.n	8002eea <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	10624dd3 	.word	0x10624dd3
 8002f00:	46020800 	.word	0x46020800

08002f04 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002f0e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002f12:	6113      	str	r3, [r2, #16]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	46020800 	.word	0x46020800

08002f24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	4a04      	ldr	r2, [pc, #16]	@ (8002f40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f2e:	f043 0301 	orr.w	r3, r3, #1
 8002f32:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	46020800 	.word	0x46020800

08002f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08e      	sub	sp, #56	@ 0x38
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f000 bec8 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5e:	4b99      	ldr	r3, [pc, #612]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f68:	4b96      	ldr	r3, [pc, #600]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 816c 	beq.w	8003258 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_RCC_OscConfig+0x52>
 8002f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	f040 80de 	bne.w	800314a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 80da 	bne.w	800314a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f000 bea5 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fa8:	4b86      	ldr	r3, [pc, #536]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d004      	beq.n	8002fbe <HAL_RCC_OscConfig+0x7a>
 8002fb4:	4b83      	ldr	r3, [pc, #524]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002fbc:	e005      	b.n	8002fca <HAL_RCC_OscConfig+0x86>
 8002fbe:	4b81      	ldr	r3, [pc, #516]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d255      	bcs.n	800307a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 fa11 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	f000 be82 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8002fea:	4b76      	ldr	r3, [pc, #472]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	4a75      	ldr	r2, [pc, #468]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002ff0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ff4:	6093      	str	r3, [r2, #8]
 8002ff6:	4b73      	ldr	r3, [pc, #460]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003002:	4970      	ldr	r1, [pc, #448]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003010:	d309      	bcc.n	8003026 <HAL_RCC_OscConfig+0xe2>
 8003012:	4b6c      	ldr	r3, [pc, #432]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	f023 021f 	bic.w	r2, r3, #31
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4969      	ldr	r1, [pc, #420]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003020:	4313      	orrs	r3, r2
 8003022:	60cb      	str	r3, [r1, #12]
 8003024:	e07e      	b.n	8003124 <HAL_RCC_OscConfig+0x1e0>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302a:	2b00      	cmp	r3, #0
 800302c:	da0a      	bge.n	8003044 <HAL_RCC_OscConfig+0x100>
 800302e:	4b65      	ldr	r3, [pc, #404]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	015b      	lsls	r3, r3, #5
 800303c:	4961      	ldr	r1, [pc, #388]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800303e:	4313      	orrs	r3, r2
 8003040:	60cb      	str	r3, [r1, #12]
 8003042:	e06f      	b.n	8003124 <HAL_RCC_OscConfig+0x1e0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800304c:	d30a      	bcc.n	8003064 <HAL_RCC_OscConfig+0x120>
 800304e:	4b5d      	ldr	r3, [pc, #372]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	4959      	ldr	r1, [pc, #356]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800305e:	4313      	orrs	r3, r2
 8003060:	60cb      	str	r3, [r1, #12]
 8003062:	e05f      	b.n	8003124 <HAL_RCC_OscConfig+0x1e0>
 8003064:	4b57      	ldr	r3, [pc, #348]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	03db      	lsls	r3, r3, #15
 8003072:	4954      	ldr	r1, [pc, #336]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003074:	4313      	orrs	r3, r2
 8003076:	60cb      	str	r3, [r1, #12]
 8003078:	e054      	b.n	8003124 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800307a:	4b52      	ldr	r3, [pc, #328]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4a51      	ldr	r2, [pc, #324]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003084:	6093      	str	r3, [r2, #8]
 8003086:	4b4f      	ldr	r3, [pc, #316]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	494c      	ldr	r1, [pc, #304]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003094:	4313      	orrs	r3, r2
 8003096:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80030a0:	d309      	bcc.n	80030b6 <HAL_RCC_OscConfig+0x172>
 80030a2:	4b48      	ldr	r3, [pc, #288]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f023 021f 	bic.w	r2, r3, #31
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4945      	ldr	r1, [pc, #276]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60cb      	str	r3, [r1, #12]
 80030b4:	e028      	b.n	8003108 <HAL_RCC_OscConfig+0x1c4>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	da0a      	bge.n	80030d4 <HAL_RCC_OscConfig+0x190>
 80030be:	4b41      	ldr	r3, [pc, #260]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	015b      	lsls	r3, r3, #5
 80030cc:	493d      	ldr	r1, [pc, #244]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	60cb      	str	r3, [r1, #12]
 80030d2:	e019      	b.n	8003108 <HAL_RCC_OscConfig+0x1c4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030dc:	d30a      	bcc.n	80030f4 <HAL_RCC_OscConfig+0x1b0>
 80030de:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	4935      	ldr	r1, [pc, #212]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]
 80030f2:	e009      	b.n	8003108 <HAL_RCC_OscConfig+0x1c4>
 80030f4:	4b33      	ldr	r3, [pc, #204]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	03db      	lsls	r3, r3, #15
 8003102:	4930      	ldr	r1, [pc, #192]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003104:	4313      	orrs	r3, r2
 8003106:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003112:	4618      	mov	r0, r3
 8003114:	f001 f974 	bl	8004400 <RCC_SetFlashLatencyFromMSIRange>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	f000 bde5 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003124:	f001 f8de 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003128:	4b27      	ldr	r3, [pc, #156]	@ (80031c8 <HAL_RCC_OscConfig+0x284>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7fd fefd 	bl	8000f2c <HAL_InitTick>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003138:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 808a 	beq.w	8003256 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003142:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003146:	f000 bdd2 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d066      	beq.n	8003220 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003152:	4b1c      	ldr	r3, [pc, #112]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1b      	ldr	r2, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800315e:	f7fe fb3d 	bl	80017dc <HAL_GetTick>
 8003162:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003164:	e009      	b.n	800317a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003166:	f7fe fb39 	bl	80017dc <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d902      	bls.n	800317a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	f000 bdba 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800317a:	4b12      	ldr	r3, [pc, #72]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ef      	beq.n	8003166 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003186:	4b0f      	ldr	r3, [pc, #60]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	4a0e      	ldr	r2, [pc, #56]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 800318c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003190:	6093      	str	r3, [r2, #8]
 8003192:	4b0c      	ldr	r3, [pc, #48]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	4909      	ldr	r1, [pc, #36]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80031ac:	d30e      	bcc.n	80031cc <HAL_RCC_OscConfig+0x288>
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f023 021f 	bic.w	r2, r3, #31
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4902      	ldr	r1, [pc, #8]	@ (80031c4 <HAL_RCC_OscConfig+0x280>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	60cb      	str	r3, [r1, #12]
 80031c0:	e04a      	b.n	8003258 <HAL_RCC_OscConfig+0x314>
 80031c2:	bf00      	nop
 80031c4:	46020c00 	.word	0x46020c00
 80031c8:	20000024 	.word	0x20000024
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0a      	bge.n	80031ea <HAL_RCC_OscConfig+0x2a6>
 80031d4:	4b98      	ldr	r3, [pc, #608]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	015b      	lsls	r3, r3, #5
 80031e2:	4995      	ldr	r1, [pc, #596]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60cb      	str	r3, [r1, #12]
 80031e8:	e036      	b.n	8003258 <HAL_RCC_OscConfig+0x314>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031f2:	d30a      	bcc.n	800320a <HAL_RCC_OscConfig+0x2c6>
 80031f4:	4b90      	ldr	r3, [pc, #576]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	029b      	lsls	r3, r3, #10
 8003202:	498d      	ldr	r1, [pc, #564]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	60cb      	str	r3, [r1, #12]
 8003208:	e026      	b.n	8003258 <HAL_RCC_OscConfig+0x314>
 800320a:	4b8b      	ldr	r3, [pc, #556]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	03db      	lsls	r3, r3, #15
 8003218:	4987      	ldr	r1, [pc, #540]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]
 800321e:	e01b      	b.n	8003258 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003220:	4b85      	ldr	r3, [pc, #532]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a84      	ldr	r2, [pc, #528]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800322c:	f7fe fad6 	bl	80017dc <HAL_GetTick>
 8003230:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003232:	e009      	b.n	8003248 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003234:	f7fe fad2 	bl	80017dc <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d902      	bls.n	8003248 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	f000 bd53 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003248:	4b7b      	ldr	r3, [pc, #492]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ef      	bne.n	8003234 <HAL_RCC_OscConfig+0x2f0>
 8003254:	e000      	b.n	8003258 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003256:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 808b 	beq.w	800337c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	2b08      	cmp	r3, #8
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x334>
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d109      	bne.n	8003286 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	2b03      	cmp	r3, #3
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d17d      	bne.n	800337c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f000 bd34 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x35a>
 8003290:	4b69      	ldr	r3, [pc, #420]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a68      	ldr	r2, [pc, #416]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	e041      	b.n	8003322 <HAL_RCC_OscConfig+0x3de>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a6:	d112      	bne.n	80032ce <HAL_RCC_OscConfig+0x38a>
 80032a8:	4b63      	ldr	r3, [pc, #396]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a62      	ldr	r2, [pc, #392]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b60      	ldr	r3, [pc, #384]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a5f      	ldr	r2, [pc, #380]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b5d      	ldr	r3, [pc, #372]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e029      	b.n	8003322 <HAL_RCC_OscConfig+0x3de>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80032d6:	d112      	bne.n	80032fe <HAL_RCC_OscConfig+0x3ba>
 80032d8:	4b57      	ldr	r3, [pc, #348]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a56      	ldr	r2, [pc, #344]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e2:	6013      	str	r3, [r2, #0]
 80032e4:	4b54      	ldr	r3, [pc, #336]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a53      	ldr	r2, [pc, #332]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	4b51      	ldr	r3, [pc, #324]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80032f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	e011      	b.n	8003322 <HAL_RCC_OscConfig+0x3de>
 80032fe:	4b4e      	ldr	r3, [pc, #312]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a4d      	ldr	r2, [pc, #308]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003304:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	4b4b      	ldr	r3, [pc, #300]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a4a      	ldr	r2, [pc, #296]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003310:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	4b48      	ldr	r3, [pc, #288]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a47      	ldr	r2, [pc, #284]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 800331c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003320:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d014      	beq.n	8003354 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800332a:	f7fe fa57 	bl	80017dc <HAL_GetTick>
 800332e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003330:	e009      	b.n	8003346 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003332:	f7fe fa53 	bl	80017dc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b64      	cmp	r3, #100	@ 0x64
 800333e:	d902      	bls.n	8003346 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	f000 bcd4 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003346:	4b3c      	ldr	r3, [pc, #240]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0ef      	beq.n	8003332 <HAL_RCC_OscConfig+0x3ee>
 8003352:	e013      	b.n	800337c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003354:	f7fe fa42 	bl	80017dc <HAL_GetTick>
 8003358:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800335a:	e009      	b.n	8003370 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fa3e 	bl	80017dc <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	@ 0x64
 8003368:	d902      	bls.n	8003370 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	f000 bcbf 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003370:	4b31      	ldr	r3, [pc, #196]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ef      	bne.n	800335c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d05f      	beq.n	8003448 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	2b04      	cmp	r3, #4
 800338c:	d005      	beq.n	800339a <HAL_RCC_OscConfig+0x456>
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d114      	bne.n	80033be <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003396:	2b02      	cmp	r3, #2
 8003398:	d111      	bne.n	80033be <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d102      	bne.n	80033a8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	f000 bca3 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80033a8:	4b23      	ldr	r3, [pc, #140]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	041b      	lsls	r3, r3, #16
 80033b6:	4920      	ldr	r1, [pc, #128]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033bc:	e044      	b.n	8003448 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d024      	beq.n	8003410 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80033c6:	4b1c      	ldr	r3, [pc, #112]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80033d2:	f7fe fa03 	bl	80017dc <HAL_GetTick>
 80033d6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033d8:	e009      	b.n	80033ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033da:	f7fe f9ff 	bl	80017dc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d902      	bls.n	80033ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	f000 bc80 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ee:	4b12      	ldr	r3, [pc, #72]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ef      	beq.n	80033da <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	490b      	ldr	r1, [pc, #44]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]
 800340e:	e01b      	b.n	8003448 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003410:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <HAL_RCC_OscConfig+0x4f4>)
 8003416:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800341a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800341c:	f7fe f9de 	bl	80017dc <HAL_GetTick>
 8003420:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe f9da 	bl	80017dc <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d904      	bls.n	800343c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	f000 bc5b 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
 8003438:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800343c:	4baf      	ldr	r3, [pc, #700]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ed      	bne.n	8003424 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80c8 	beq.w	80035e6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800345c:	4ba7      	ldr	r3, [pc, #668]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800345e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d111      	bne.n	800348e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346a:	4ba4      	ldr	r3, [pc, #656]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003470:	4aa2      	ldr	r2, [pc, #648]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003472:	f043 0304 	orr.w	r3, r3, #4
 8003476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800347a:	4ba0      	ldr	r3, [pc, #640]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003488:	2301      	movs	r3, #1
 800348a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800348e:	4b9c      	ldr	r3, [pc, #624]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 8003490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d119      	bne.n	80034ce <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800349a:	4b99      	ldr	r3, [pc, #612]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 800349c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349e:	4a98      	ldr	r2, [pc, #608]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fe f999 	bl	80017dc <HAL_GetTick>
 80034aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034ac:	e009      	b.n	80034c2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ae:	f7fe f995 	bl	80017dc <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d902      	bls.n	80034c2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	f000 bc16 	b.w	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80034c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 80034c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0ef      	beq.n	80034ae <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d05f      	beq.n	8003596 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80034d6:	4b89      	ldr	r3, [pc, #548]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80034d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80034dc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d037      	beq.n	800355c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e3f4      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d01b      	beq.n	8003546 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800350e:	4b7b      	ldr	r3, [pc, #492]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003514:	4a79      	ldr	r2, [pc, #484]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003516:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800351a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 800351e:	f7fe f95d 	bl	80017dc <HAL_GetTick>
 8003522:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003526:	f7fe f959 	bl	80017dc <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b05      	cmp	r3, #5
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e3da      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003538:	4b70      	ldr	r3, [pc, #448]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800353a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800353e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ef      	bne.n	8003526 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003546:	4b6d      	ldr	r3, [pc, #436]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800354c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	4969      	ldr	r1, [pc, #420]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800355c:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800355e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003562:	4a66      	ldr	r2, [pc, #408]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003564:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003568:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800356c:	f7fe f936 	bl	80017dc <HAL_GetTick>
 8003570:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe f932 	bl	80017dc <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b05      	cmp	r3, #5
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e3b3      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003586:	4b5d      	ldr	r3, [pc, #372]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800358c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ef      	beq.n	8003574 <HAL_RCC_OscConfig+0x630>
 8003594:	e01b      	b.n	80035ce <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003596:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003598:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800359c:	4a57      	ldr	r2, [pc, #348]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800359e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80035a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80035a6:	f7fe f919 	bl	80017dc <HAL_GetTick>
 80035aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fe f915 	bl	80017dc <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b05      	cmp	r3, #5
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e396      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80035c0:	4b4e      	ldr	r3, [pc, #312]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80035c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80035c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1ef      	bne.n	80035ae <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035ce:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035d6:	4b49      	ldr	r3, [pc, #292]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035dc:	4a47      	ldr	r2, [pc, #284]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80035de:	f023 0304 	bic.w	r3, r3, #4
 80035e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8111 	beq.w	8003816 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80035f4:	2300      	movs	r3, #0
 80035f6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b40      	ldr	r3, [pc, #256]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b00      	cmp	r3, #0
 8003606:	d111      	bne.n	800362c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4b3c      	ldr	r3, [pc, #240]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800360a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360e:	4a3b      	ldr	r2, [pc, #236]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003618:	4b38      	ldr	r3, [pc, #224]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800362c:	4b34      	ldr	r3, [pc, #208]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	2b00      	cmp	r3, #0
 8003636:	d118      	bne.n	800366a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003638:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	4a30      	ldr	r2, [pc, #192]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003644:	f7fe f8ca 	bl	80017dc <HAL_GetTick>
 8003648:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364c:	f7fe f8c6 	bl	80017dc <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e347      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCC_OscConfig+0x7bc>)
 8003660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d01f      	beq.n	80036b6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d010      	beq.n	80036a4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003682:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003688:	4a1c      	ldr	r2, [pc, #112]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003692:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 8003694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036a2:	e018      	b.n	80036d6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036a4:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80036a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036aa:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80036b4:	e00f      	b.n	80036d6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036b6:	4b11      	ldr	r3, [pc, #68]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80036b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036bc:	4a0f      	ldr	r2, [pc, #60]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036c6:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80036c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80036cc:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <HAL_RCC_OscConfig+0x7b8>)
 80036ce:	f023 0304 	bic.w	r3, r3, #4
 80036d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d057      	beq.n	800378e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80036de:	f7fe f87d 	bl	80017dc <HAL_GetTick>
 80036e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036e4:	e00e      	b.n	8003704 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fe f879 	bl	80017dc <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d905      	bls.n	8003704 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e2f8      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
 80036fc:	46020c00 	.word	0x46020c00
 8003700:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003704:	4b9c      	ldr	r3, [pc, #624]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0e9      	beq.n	80036e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01b      	beq.n	8003756 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800371e:	4b96      	ldr	r3, [pc, #600]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003720:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003724:	4a94      	ldr	r2, [pc, #592]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800372a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fe f854 	bl	80017dc <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e2d3      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003746:	4b8c      	ldr	r3, [pc, #560]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800374c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ed      	beq.n	8003730 <HAL_RCC_OscConfig+0x7ec>
 8003754:	e053      	b.n	80037fe <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003756:	4b88      	ldr	r3, [pc, #544]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800375c:	4a86      	ldr	r2, [pc, #536]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 800375e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003766:	e00a      	b.n	800377e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003768:	f7fe f838 	bl	80017dc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e2b7      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800377e:	4b7e      	ldr	r3, [pc, #504]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1ed      	bne.n	8003768 <HAL_RCC_OscConfig+0x824>
 800378c:	e037      	b.n	80037fe <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800378e:	f7fe f825 	bl	80017dc <HAL_GetTick>
 8003792:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fe f821 	bl	80017dc <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e2a0      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ac:	4b72      	ldr	r3, [pc, #456]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80037ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1ed      	bne.n	8003796 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80037ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80037bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01a      	beq.n	80037fe <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80037c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80037ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037ce:	4a6a      	ldr	r2, [pc, #424]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80037d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fd ffff 	bl	80017dc <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e27e      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80037f0:	4b61      	ldr	r3, [pc, #388]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80037f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ed      	bne.n	80037da <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037fe:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b5c      	ldr	r3, [pc, #368]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003808:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800380c:	4a5a      	ldr	r2, [pc, #360]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 800380e:	f023 0304 	bic.w	r3, r3, #4
 8003812:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b00      	cmp	r3, #0
 8003820:	d036      	beq.n	8003890 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	2b00      	cmp	r3, #0
 8003828:	d019      	beq.n	800385e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800382a:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003834:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003836:	f7fd ffd1 	bl	80017dc <HAL_GetTick>
 800383a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800383e:	f7fd ffcd 	bl	80017dc <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e24e      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003850:	4b49      	ldr	r3, [pc, #292]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x8fa>
 800385c:	e018      	b.n	8003890 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800385e:	4b46      	ldr	r3, [pc, #280]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a45      	ldr	r2, [pc, #276]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003868:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800386a:	f7fd ffb7 	bl	80017dc <HAL_GetTick>
 800386e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003872:	f7fd ffb3 	bl	80017dc <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e234      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003884:	4b3c      	ldr	r3, [pc, #240]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003898:	2b00      	cmp	r3, #0
 800389a:	d036      	beq.n	800390a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d019      	beq.n	80038d8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80038a4:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a33      	ldr	r2, [pc, #204]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80038aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038ae:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038b0:	f7fd ff94 	bl	80017dc <HAL_GetTick>
 80038b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80038b8:	f7fd ff90 	bl	80017dc <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e211      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80038ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x974>
 80038d6:	e018      	b.n	800390a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80038d8:	4b27      	ldr	r3, [pc, #156]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a26      	ldr	r2, [pc, #152]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 80038de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80038e4:	f7fd ff7a 	bl	80017dc <HAL_GetTick>
 80038e8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80038ec:	f7fd ff76 	bl	80017dc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1f7      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d07f      	beq.n	8003a16 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391a:	2b00      	cmp	r3, #0
 800391c:	d062      	beq.n	80039e4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800391e:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	4a15      	ldr	r2, [pc, #84]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003928:	6093      	str	r3, [r2, #8]
 800392a:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003936:	4910      	ldr	r1, [pc, #64]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003938:	4313      	orrs	r3, r2
 800393a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003940:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003944:	d309      	bcc.n	800395a <HAL_RCC_OscConfig+0xa16>
 8003946:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f023 021f 	bic.w	r2, r3, #31
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4909      	ldr	r1, [pc, #36]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003954:	4313      	orrs	r3, r2
 8003956:	60cb      	str	r3, [r1, #12]
 8003958:	e02a      	b.n	80039b0 <HAL_RCC_OscConfig+0xa6c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	2b00      	cmp	r3, #0
 8003960:	da0c      	bge.n	800397c <HAL_RCC_OscConfig+0xa38>
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	015b      	lsls	r3, r3, #5
 8003970:	4901      	ldr	r1, [pc, #4]	@ (8003978 <HAL_RCC_OscConfig+0xa34>)
 8003972:	4313      	orrs	r3, r2
 8003974:	60cb      	str	r3, [r1, #12]
 8003976:	e01b      	b.n	80039b0 <HAL_RCC_OscConfig+0xa6c>
 8003978:	46020c00 	.word	0x46020c00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003984:	d30a      	bcc.n	800399c <HAL_RCC_OscConfig+0xa58>
 8003986:	4ba1      	ldr	r3, [pc, #644]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	029b      	lsls	r3, r3, #10
 8003994:	499d      	ldr	r1, [pc, #628]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
 800399a:	e009      	b.n	80039b0 <HAL_RCC_OscConfig+0xa6c>
 800399c:	4b9b      	ldr	r3, [pc, #620]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	03db      	lsls	r3, r3, #15
 80039aa:	4998      	ldr	r1, [pc, #608]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80039b0:	4b96      	ldr	r3, [pc, #600]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a95      	ldr	r2, [pc, #596]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 80039b6:	f043 0310 	orr.w	r3, r3, #16
 80039ba:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80039bc:	f7fd ff0e 	bl	80017dc <HAL_GetTick>
 80039c0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80039c4:	f7fd ff0a 	bl	80017dc <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e18b      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80039d6:	4b8d      	ldr	r3, [pc, #564]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0xa80>
 80039e2:	e018      	b.n	8003a16 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80039e4:	4b89      	ldr	r3, [pc, #548]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a88      	ldr	r2, [pc, #544]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 80039ea:	f023 0310 	bic.w	r3, r3, #16
 80039ee:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80039f0:	f7fd fef4 	bl	80017dc <HAL_GetTick>
 80039f4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80039f8:	f7fd fef0 	bl	80017dc <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e171      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003a0a:	4b80      	ldr	r3, [pc, #512]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8166 	beq.w	8003cec <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a26:	4b79      	ldr	r3, [pc, #484]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b0c      	cmp	r3, #12
 8003a30:	f000 80f2 	beq.w	8003c18 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f040 80c5 	bne.w	8003bc8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b73      	ldr	r3, [pc, #460]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a72      	ldr	r2, [pc, #456]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a48:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a4a:	f7fd fec7 	bl	80017dc <HAL_GetTick>
 8003a4e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fd fec3 	bl	80017dc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e144      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003a64:	4b69      	ldr	r3, [pc, #420]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1f0      	bne.n	8003a52 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a70:	4b66      	ldr	r3, [pc, #408]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d111      	bne.n	8003aa2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	4b63      	ldr	r3, [pc, #396]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a84:	4a61      	ldr	r2, [pc, #388]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a86:	f043 0304 	orr.w	r3, r3, #4
 8003a8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003aa2:	4b5b      	ldr	r3, [pc, #364]	@ (8003c10 <HAL_RCC_OscConfig+0xccc>)
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003aae:	d102      	bne.n	8003ab6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003ab6:	4b56      	ldr	r3, [pc, #344]	@ (8003c10 <HAL_RCC_OscConfig+0xccc>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4a55      	ldr	r2, [pc, #340]	@ (8003c10 <HAL_RCC_OscConfig+0xccc>)
 8003abc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ac0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003ac2:	4b52      	ldr	r3, [pc, #328]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0212      	lsls	r2, r2, #8
 8003ada:	4311      	orrs	r1, r2
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	494a      	ldr	r1, [pc, #296]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ae8:	4b48      	ldr	r3, [pc, #288]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aec:	4b49      	ldr	r3, [pc, #292]	@ (8003c14 <HAL_RCC_OscConfig+0xcd0>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003af4:	3a01      	subs	r2, #1
 8003af6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003afe:	3a01      	subs	r2, #1
 8003b00:	0252      	lsls	r2, r2, #9
 8003b02:	b292      	uxth	r2, r2
 8003b04:	4311      	orrs	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	0412      	lsls	r2, r2, #16
 8003b0e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003b18:	3a01      	subs	r2, #1
 8003b1a:	0612      	lsls	r2, r2, #24
 8003b1c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003b20:	430a      	orrs	r2, r1
 8003b22:	493a      	ldr	r1, [pc, #232]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003b28:	4b38      	ldr	r3, [pc, #224]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2c:	4a37      	ldr	r2, [pc, #220]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b2e:	f023 0310 	bic.w	r3, r3, #16
 8003b32:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	4a34      	ldr	r2, [pc, #208]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003b3e:	4b33      	ldr	r3, [pc, #204]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	4a32      	ldr	r2, [pc, #200]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b44:	f043 0310 	orr.w	r3, r3, #16
 8003b48:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003b4a:	4b30      	ldr	r3, [pc, #192]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	f023 020c 	bic.w	r2, r3, #12
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	492d      	ldr	r1, [pc, #180]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d105      	bne.n	8003b70 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003b64:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <HAL_RCC_OscConfig+0xccc>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <HAL_RCC_OscConfig+0xccc>)
 8003b6a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b6e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003b70:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7e:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b80:	f023 0304 	bic.w	r3, r3, #4
 8003b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003b88:	4b20      	ldr	r3, [pc, #128]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003b94:	f7fd fe22 	bl	80017dc <HAL_GetTick>
 8003b98:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9c:	f7fd fe1e 	bl	80017dc <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e09f      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003bae:	4b17      	ldr	r3, [pc, #92]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bba:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbe:	4a13      	ldr	r2, [pc, #76]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bc4:	6293      	str	r3, [r2, #40]	@ 0x28
 8003bc6:	e091      	b.n	8003cec <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003bc8:	4b10      	ldr	r3, [pc, #64]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0f      	ldr	r2, [pc, #60]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bd4:	f7fd fe02 	bl	80017dc <HAL_GetTick>
 8003bd8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fd fdfe 	bl	80017dc <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e07f      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003bee:	4b07      	ldr	r3, [pc, #28]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003bfa:	4b04      	ldr	r3, [pc, #16]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	4a03      	ldr	r2, [pc, #12]	@ (8003c0c <HAL_RCC_OscConfig+0xcc8>)
 8003c00:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003c04:	f023 0303 	bic.w	r3, r3, #3
 8003c08:	6293      	str	r3, [r2, #40]	@ 0x28
 8003c0a:	e06f      	b.n	8003cec <HAL_RCC_OscConfig+0xda8>
 8003c0c:	46020c00 	.word	0x46020c00
 8003c10:	46020800 	.word	0x46020800
 8003c14:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003c18:	4b37      	ldr	r3, [pc, #220]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c1e:	4b36      	ldr	r3, [pc, #216]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c22:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d039      	beq.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 0203 	and.w	r2, r3, #3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d132      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d129      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d122      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c64:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d11a      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	0a5b      	lsrs	r3, r3, #9
 8003c6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d111      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c88:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d108      	bne.n	8003ca0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	0e1b      	lsrs	r3, r3, #24
 8003c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d001      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e024      	b.n	8003cee <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003ca4:	4b14      	ldr	r3, [pc, #80]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca8:	08db      	lsrs	r3, r3, #3
 8003caa:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d01a      	beq.n	8003cec <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003cb6:	4b10      	ldr	r3, [pc, #64]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cba:	4a0f      	ldr	r2, [pc, #60]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003cbc:	f023 0310 	bic.w	r3, r3, #16
 8003cc0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7fd fd8b 	bl	80017dc <HAL_GetTick>
 8003cc6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003cc8:	bf00      	nop
 8003cca:	f7fd fd87 	bl	80017dc <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d0f9      	beq.n	8003cca <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cda:	4a07      	ldr	r2, [pc, #28]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003ce0:	4b05      	ldr	r3, [pc, #20]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <HAL_RCC_OscConfig+0xdb4>)
 8003ce6:	f043 0310 	orr.w	r3, r3, #16
 8003cea:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3738      	adds	r7, #56	@ 0x38
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	46020c00 	.word	0x46020c00

08003cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e1d9      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d10:	4b9b      	ldr	r3, [pc, #620]	@ (8003f80 <HAL_RCC_ClockConfig+0x284>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d910      	bls.n	8003d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1e:	4b98      	ldr	r3, [pc, #608]	@ (8003f80 <HAL_RCC_ClockConfig+0x284>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 020f 	bic.w	r2, r3, #15
 8003d26:	4996      	ldr	r1, [pc, #600]	@ (8003f80 <HAL_RCC_ClockConfig+0x284>)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2e:	4b94      	ldr	r3, [pc, #592]	@ (8003f80 <HAL_RCC_ClockConfig+0x284>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e1c1      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d010      	beq.n	8003d6e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	4b8c      	ldr	r3, [pc, #560]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d908      	bls.n	8003d6e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8003d5c:	4b89      	ldr	r3, [pc, #548]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	4986      	ldr	r1, [pc, #536]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d012      	beq.n	8003da0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	4b81      	ldr	r3, [pc, #516]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	091b      	lsrs	r3, r3, #4
 8003d84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d909      	bls.n	8003da0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8003d8c:	4b7d      	ldr	r3, [pc, #500]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	497a      	ldr	r1, [pc, #488]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d010      	beq.n	8003dce <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	4b74      	ldr	r3, [pc, #464]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d908      	bls.n	8003dce <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8003dbc:	4b71      	ldr	r3, [pc, #452]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	496e      	ldr	r1, [pc, #440]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d010      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	4b69      	ldr	r3, [pc, #420]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d908      	bls.n	8003dfc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003dea:	4b66      	ldr	r3, [pc, #408]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	f023 020f 	bic.w	r2, r3, #15
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	4963      	ldr	r1, [pc, #396]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 80d2 	beq.w	8003fae <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d143      	bne.n	8003e9e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b5b      	ldr	r3, [pc, #364]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d110      	bne.n	8003e46 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003e24:	4b57      	ldr	r3, [pc, #348]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e2a:	4a56      	ldr	r2, [pc, #344]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003e34:	4b53      	ldr	r3, [pc, #332]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	60bb      	str	r3, [r7, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8003e42:	2301      	movs	r3, #1
 8003e44:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8003e46:	f7fd fcc9 	bl	80017dc <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8003e4c:	4b4e      	ldr	r3, [pc, #312]	@ (8003f88 <HAL_RCC_ClockConfig+0x28c>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00f      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8003e5a:	f7fd fcbf 	bl	80017dc <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e12b      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8003e6c:	4b46      	ldr	r3, [pc, #280]	@ (8003f88 <HAL_RCC_ClockConfig+0x28c>)
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e7e:	4b41      	ldr	r3, [pc, #260]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e84:	4a3f      	ldr	r2, [pc, #252]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e86:	f023 0304 	bic.w	r3, r3, #4
 8003e8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d121      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e112      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d107      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ea6:	4b37      	ldr	r3, [pc, #220]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d115      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e106      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003ebe:	4b31      	ldr	r3, [pc, #196]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0304 	and.w	r3, r3, #4
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e0fa      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ece:	4b2d      	ldr	r3, [pc, #180]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0f2      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8003ede:	4b29      	ldr	r3, [pc, #164]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f023 0203 	bic.w	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4926      	ldr	r1, [pc, #152]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8003ef0:	f7fd fc74 	bl	80017dc <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d112      	bne.n	8003f24 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003efe:	e00a      	b.n	8003f16 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f00:	f7fd fc6c 	bl	80017dc <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e0d6      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f16:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d1ee      	bne.n	8003f00 <HAL_RCC_ClockConfig+0x204>
 8003f22:	e044      	b.n	8003fae <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d112      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f2c:	e00a      	b.n	8003f44 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f2e:	f7fd fc55 	bl	80017dc <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e0bf      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f44:	4b0f      	ldr	r3, [pc, #60]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f003 030c 	and.w	r3, r3, #12
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d1ee      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x232>
 8003f50:	e02d      	b.n	8003fae <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d123      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f5a:	e00a      	b.n	8003f72 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f5c:	f7fd fc3e 	bl	80017dc <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e0a8      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f72:	4b04      	ldr	r3, [pc, #16]	@ (8003f84 <HAL_RCC_ClockConfig+0x288>)
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1ee      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x260>
 8003f7e:	e016      	b.n	8003fae <HAL_RCC_ClockConfig+0x2b2>
 8003f80:	40022000 	.word	0x40022000
 8003f84:	46020c00 	.word	0x46020c00
 8003f88:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f8c:	f7fd fc26 	bl	80017dc <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e090      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d1ee      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d010      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d208      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8003fca:	4b40      	ldr	r3, [pc, #256]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	f023 020f 	bic.w	r2, r3, #15
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	493d      	ldr	r1, [pc, #244]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fdc:	4b3c      	ldr	r3, [pc, #240]	@ (80040d0 <HAL_RCC_ClockConfig+0x3d4>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 030f 	and.w	r3, r3, #15
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d210      	bcs.n	800400c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fea:	4b39      	ldr	r3, [pc, #228]	@ (80040d0 <HAL_RCC_ClockConfig+0x3d4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 020f 	bic.w	r2, r3, #15
 8003ff2:	4937      	ldr	r1, [pc, #220]	@ (80040d0 <HAL_RCC_ClockConfig+0x3d4>)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b35      	ldr	r3, [pc, #212]	@ (80040d0 <HAL_RCC_ClockConfig+0x3d4>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e05b      	b.n	80040c4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68da      	ldr	r2, [r3, #12]
 800401c:	4b2b      	ldr	r3, [pc, #172]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004024:	429a      	cmp	r2, r3
 8004026:	d208      	bcs.n	800403a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b28      	ldr	r3, [pc, #160]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4925      	ldr	r1, [pc, #148]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8004036:	4313      	orrs	r3, r2
 8004038:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	4b20      	ldr	r3, [pc, #128]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	091b      	lsrs	r3, r3, #4
 8004050:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004054:	429a      	cmp	r2, r3
 8004056:	d209      	bcs.n	800406c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004058:	4b1c      	ldr	r3, [pc, #112]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	4919      	ldr	r1, [pc, #100]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8004068:	4313      	orrs	r3, r2
 800406a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0310 	and.w	r3, r3, #16
 8004074:	2b00      	cmp	r3, #0
 8004076:	d010      	beq.n	800409a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	4b13      	ldr	r3, [pc, #76]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004084:	429a      	cmp	r2, r3
 8004086:	d208      	bcs.n	800409a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004088:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 800408a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	490d      	ldr	r1, [pc, #52]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800409a:	f000 f821 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_RCC_ClockConfig+0x3d0>)
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	490a      	ldr	r1, [pc, #40]	@ (80040d4 <HAL_RCC_ClockConfig+0x3d8>)
 80040aa:	5ccb      	ldrb	r3, [r1, r3]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	4a09      	ldr	r2, [pc, #36]	@ (80040d8 <HAL_RCC_ClockConfig+0x3dc>)
 80040b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040b4:	4b09      	ldr	r3, [pc, #36]	@ (80040dc <HAL_RCC_ClockConfig+0x3e0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fc ff37 	bl	8000f2c <HAL_InitTick>
 80040be:	4603      	mov	r3, r0
 80040c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	46020c00 	.word	0x46020c00
 80040d0:	40022000 	.word	0x40022000
 80040d4:	080124c8 	.word	0x080124c8
 80040d8:	20000004 	.word	0x20000004
 80040dc:	20000024 	.word	0x20000024

080040e0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b08b      	sub	sp, #44	@ 0x2c
 80040e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ee:	4b78      	ldr	r3, [pc, #480]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 030c 	and.w	r3, r3, #12
 80040f6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f8:	4b75      	ldr	r3, [pc, #468]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80040fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fc:	f003 0303 	and.w	r3, r3, #3
 8004100:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_GetSysClockFreq+0x34>
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	2b0c      	cmp	r3, #12
 800410c:	d121      	bne.n	8004152 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d11e      	bne.n	8004152 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004114:	4b6e      	ldr	r3, [pc, #440]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d107      	bne.n	8004130 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004120:	4b6b      	ldr	r3, [pc, #428]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004122:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004126:	0b1b      	lsrs	r3, r3, #12
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
 800412e:	e005      	b.n	800413c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004130:	4b67      	ldr	r3, [pc, #412]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	0f1b      	lsrs	r3, r3, #28
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800413c:	4a65      	ldr	r2, [pc, #404]	@ (80042d4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800413e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004144:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d110      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004150:	e00d      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004152:	4b5f      	ldr	r3, [pc, #380]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b04      	cmp	r3, #4
 800415c:	d102      	bne.n	8004164 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800415e:	4b5e      	ldr	r3, [pc, #376]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004160:	623b      	str	r3, [r7, #32]
 8004162:	e004      	b.n	800416e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d101      	bne.n	800416e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800416a:	4b5b      	ldr	r3, [pc, #364]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800416c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	f040 80a5 	bne.w	80042c0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004176:	4b56      	ldr	r3, [pc, #344]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004180:	4b53      	ldr	r3, [pc, #332]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	3301      	adds	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800418e:	4b50      	ldr	r3, [pc, #320]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800419a:	4b4d      	ldr	r3, [pc, #308]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800419c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419e:	08db      	lsrs	r3, r3, #3
 80041a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041a4:	68ba      	ldr	r2, [r7, #8]
 80041a6:	fb02 f303 	mul.w	r3, r2, r3
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d003      	beq.n	80041c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d022      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x128>
 80041c2:	e043      	b.n	800424c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80042dc <HAL_RCC_GetSysClockFreq+0x1fc>
 80041d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d6:	4b3e      	ldr	r3, [pc, #248]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041e6:	ed97 6a01 	vldr	s12, [r7, #4]
 80041ea:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80042e0 <HAL_RCC_GetSysClockFreq+0x200>
 80041ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80041f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80041fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004206:	e046      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	ee07 3a90 	vmov	s15, r3
 800420e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004212:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80042dc <HAL_RCC_GetSysClockFreq+0x1fc>
 8004216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800421a:	4b2d      	ldr	r3, [pc, #180]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800422a:	ed97 6a01 	vldr	s12, [r7, #4]
 800422e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80042e0 <HAL_RCC_GetSysClockFreq+0x200>
 8004232:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004236:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800423a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800423e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800424a:	e024      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	ee07 3a90 	vmov	s15, r3
 800425c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004260:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004264:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800426c:	ee07 3a90 	vmov	s15, r3
 8004270:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004274:	ed97 6a01 	vldr	s12, [r7, #4]
 8004278:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80042e0 <HAL_RCC_GetSysClockFreq+0x200>
 800427c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004280:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004284:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004288:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800428c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004290:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004294:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004296:	4b0e      	ldr	r3, [pc, #56]	@ (80042d0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042a0:	3301      	adds	r3, #1
 80042a2:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80042b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042ba:	ee17 3a90 	vmov	r3, s15
 80042be:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80042c0:	6a3b      	ldr	r3, [r7, #32]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	372c      	adds	r7, #44	@ 0x2c
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	46020c00 	.word	0x46020c00
 80042d4:	080124e0 	.word	0x080124e0
 80042d8:	00f42400 	.word	0x00f42400
 80042dc:	4b742400 	.word	0x4b742400
 80042e0:	46000000 	.word	0x46000000

080042e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80042e8:	f7ff fefa 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80042ec:	4602      	mov	r2, r0
 80042ee:	4b07      	ldr	r3, [pc, #28]	@ (800430c <HAL_RCC_GetHCLKFreq+0x28>)
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	4906      	ldr	r1, [pc, #24]	@ (8004310 <HAL_RCC_GetHCLKFreq+0x2c>)
 80042f8:	5ccb      	ldrb	r3, [r1, r3]
 80042fa:	fa22 f303 	lsr.w	r3, r2, r3
 80042fe:	4a05      	ldr	r2, [pc, #20]	@ (8004314 <HAL_RCC_GetHCLKFreq+0x30>)
 8004300:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004302:	4b04      	ldr	r3, [pc, #16]	@ (8004314 <HAL_RCC_GetHCLKFreq+0x30>)
 8004304:	681b      	ldr	r3, [r3, #0]
}
 8004306:	4618      	mov	r0, r3
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	46020c00 	.word	0x46020c00
 8004310:	080124c8 	.word	0x080124c8
 8004314:	20000004 	.word	0x20000004

08004318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 800431c:	f7ff ffe2 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b05      	ldr	r3, [pc, #20]	@ (8004338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	091b      	lsrs	r3, r3, #4
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	4903      	ldr	r1, [pc, #12]	@ (800433c <HAL_RCC_GetPCLK1Freq+0x24>)
 800432e:	5ccb      	ldrb	r3, [r1, r3]
 8004330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004334:	4618      	mov	r0, r3
 8004336:	bd80      	pop	{r7, pc}
 8004338:	46020c00 	.word	0x46020c00
 800433c:	080124d8 	.word	0x080124d8

08004340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004344:	f7ff ffce 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	0a1b      	lsrs	r3, r3, #8
 8004350:	f003 0307 	and.w	r3, r3, #7
 8004354:	4903      	ldr	r1, [pc, #12]	@ (8004364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	bd80      	pop	{r7, pc}
 8004360:	46020c00 	.word	0x46020c00
 8004364:	080124d8 	.word	0x080124d8

08004368 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 800436c:	f7ff ffba 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b05      	ldr	r3, [pc, #20]	@ (8004388 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4903      	ldr	r1, [pc, #12]	@ (800438c <HAL_RCC_GetPCLK3Freq+0x24>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004384:	4618      	mov	r0, r3
 8004386:	bd80      	pop	{r7, pc}
 8004388:	46020c00 	.word	0x46020c00
 800438c:	080124d8 	.word	0x080124d8

08004390 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	221f      	movs	r2, #31
 800439e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80043a0:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <HAL_RCC_GetClockConfig+0x68>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 80043ac:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <HAL_RCC_GetClockConfig+0x68>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f003 020f 	and.w	r2, r3, #15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 80043b8:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <HAL_RCC_GetClockConfig+0x68>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 80043c4:	4b0c      	ldr	r3, [pc, #48]	@ (80043f8 <HAL_RCC_GetClockConfig+0x68>)
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 80043d2:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <HAL_RCC_GetClockConfig+0x68>)
 80043d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043de:	4b07      	ldr	r3, [pc, #28]	@ (80043fc <HAL_RCC_GetClockConfig+0x6c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	601a      	str	r2, [r3, #0]
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	46020c00 	.word	0x46020c00
 80043fc:	40022000 	.word	0x40022000

08004400 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004408:	4b3e      	ldr	r3, [pc, #248]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004416:	f7fe fd17 	bl	8002e48 <HAL_PWREx_GetVoltageRange>
 800441a:	6178      	str	r0, [r7, #20]
 800441c:	e019      	b.n	8004452 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004424:	4a37      	ldr	r2, [pc, #220]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800442e:	4b35      	ldr	r3, [pc, #212]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800443c:	f7fe fd04 	bl	8002e48 <HAL_PWREx_GetVoltageRange>
 8004440:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004442:	4b30      	ldr	r3, [pc, #192]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004448:	4a2e      	ldr	r2, [pc, #184]	@ (8004504 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800444a:	f023 0304 	bic.w	r3, r3, #4
 800444e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004458:	d003      	beq.n	8004462 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004460:	d109      	bne.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004468:	d202      	bcs.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800446a:	2301      	movs	r3, #1
 800446c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800446e:	e033      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004474:	e030      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800447c:	d208      	bcs.n	8004490 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004484:	d102      	bne.n	800448c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004486:	2303      	movs	r3, #3
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	e025      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e035      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004496:	d90f      	bls.n	80044b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d109      	bne.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044a4:	d902      	bls.n	80044ac <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e015      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80044ac:	2301      	movs	r3, #1
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	e012      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	e00f      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044be:	d109      	bne.n	80044d4 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044c6:	d102      	bne.n	80044ce <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80044c8:	2301      	movs	r3, #1
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e004      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80044ce:	2302      	movs	r3, #2
 80044d0:	613b      	str	r3, [r7, #16]
 80044d2:	e001      	b.n	80044d8 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80044d4:	2301      	movs	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f023 020f 	bic.w	r2, r3, #15
 80044e0:	4909      	ldr	r1, [pc, #36]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80044e8:	4b07      	ldr	r3, [pc, #28]	@ (8004508 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	46020c00 	.word	0x46020c00
 8004508:	40022000 	.word	0x40022000

0800450c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b0b8      	sub	sp, #224	@ 0xe0
 8004512:	af00      	add	r7, sp, #0
 8004514:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004518:	2300      	movs	r3, #0
 800451a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800451e:	2300      	movs	r3, #0
 8004520:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004524:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0401 	and.w	r4, r2, #1
 8004530:	2500      	movs	r5, #0
 8004532:	ea54 0305 	orrs.w	r3, r4, r5
 8004536:	d00b      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004538:	4bca      	ldr	r3, [pc, #808]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800453a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800453e:	f023 0103 	bic.w	r1, r3, #3
 8004542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004548:	4ac6      	ldr	r2, [pc, #792]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800454a:	430b      	orrs	r3, r1
 800454c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f002 0802 	and.w	r8, r2, #2
 800455c:	f04f 0900 	mov.w	r9, #0
 8004560:	ea58 0309 	orrs.w	r3, r8, r9
 8004564:	d00b      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004566:	4bbf      	ldr	r3, [pc, #764]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800456c:	f023 010c 	bic.w	r1, r3, #12
 8004570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004576:	4abb      	ldr	r2, [pc, #748]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004578:	430b      	orrs	r3, r1
 800457a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800457e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f002 0a04 	and.w	sl, r2, #4
 800458a:	f04f 0b00 	mov.w	fp, #0
 800458e:	ea5a 030b 	orrs.w	r3, sl, fp
 8004592:	d00b      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004594:	4bb3      	ldr	r3, [pc, #716]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800459a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800459e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a4:	4aaf      	ldr	r2, [pc, #700]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 0308 	and.w	r3, r2, #8
 80045b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d00b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80045cc:	4ba5      	ldr	r3, [pc, #660]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80045d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	4aa1      	ldr	r2, [pc, #644]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80045de:	430b      	orrs	r3, r1
 80045e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f002 0310 	and.w	r3, r2, #16
 80045f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80045fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80045fe:	460b      	mov	r3, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	d00b      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004604:	4b97      	ldr	r3, [pc, #604]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800460a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800460e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004614:	4a93      	ldr	r2, [pc, #588]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004616:	430b      	orrs	r3, r1
 8004618:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800461c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f002 0320 	and.w	r3, r2, #32
 8004628:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004632:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004636:	460b      	mov	r3, r1
 8004638:	4313      	orrs	r3, r2
 800463a:	d00b      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800463c:	4b89      	ldr	r3, [pc, #548]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800463e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004642:	f023 0107 	bic.w	r1, r3, #7
 8004646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800464a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800464c:	4a85      	ldr	r2, [pc, #532]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800464e:	430b      	orrs	r3, r1
 8004650:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004660:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800466a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d00b      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004674:	4b7b      	ldr	r3, [pc, #492]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800467a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800467e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004682:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004684:	4a77      	ldr	r2, [pc, #476]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004686:	430b      	orrs	r3, r1
 8004688:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004698:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800469c:	2300      	movs	r3, #0
 800469e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80046a2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4313      	orrs	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80046ac:	4b6d      	ldr	r3, [pc, #436]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046bc:	4a69      	ldr	r2, [pc, #420]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046be:	430b      	orrs	r3, r1
 80046c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d4:	2300      	movs	r3, #0
 80046d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d00b      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80046e4:	4b5f      	ldr	r3, [pc, #380]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f4:	4a5b      	ldr	r2, [pc, #364]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800470c:	2300      	movs	r3, #0
 800470e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004712:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004716:	460b      	mov	r3, r1
 8004718:	4313      	orrs	r3, r2
 800471a:	d00b      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800471c:	4b51      	ldr	r3, [pc, #324]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800471e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004722:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8004726:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800472a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800472c:	4a4d      	ldr	r2, [pc, #308]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800472e:	430b      	orrs	r3, r1
 8004730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004740:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800474a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d00b      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004754:	4b43      	ldr	r3, [pc, #268]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800475a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800475e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004762:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004764:	4a3f      	ldr	r2, [pc, #252]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004766:	430b      	orrs	r3, r1
 8004768:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004778:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800477c:	2300      	movs	r3, #0
 800477e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004782:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004786:	460b      	mov	r3, r1
 8004788:	4313      	orrs	r3, r2
 800478a:	d00b      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800478c:	4b35      	ldr	r3, [pc, #212]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800478e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004792:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479c:	4a31      	ldr	r2, [pc, #196]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800479e:	430b      	orrs	r3, r1
 80047a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80047a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80047b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047b2:	2300      	movs	r3, #0
 80047b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047b6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d00c      	beq.n	80047da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80047c0:	4b28      	ldr	r3, [pc, #160]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80047c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047d2:	4a24      	ldr	r2, [pc, #144]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80047e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80047e8:	2300      	movs	r3, #0
 80047ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80047ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80047f0:	460b      	mov	r3, r1
 80047f2:	4313      	orrs	r3, r2
 80047f4:	d04f      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80047f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80047fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047fe:	2b80      	cmp	r3, #128	@ 0x80
 8004800:	d02d      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8004802:	2b80      	cmp	r3, #128	@ 0x80
 8004804:	d827      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004806:	2b60      	cmp	r3, #96	@ 0x60
 8004808:	d02e      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800480a:	2b60      	cmp	r3, #96	@ 0x60
 800480c:	d823      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800480e:	2b40      	cmp	r3, #64	@ 0x40
 8004810:	d006      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004812:	2b40      	cmp	r3, #64	@ 0x40
 8004814:	d81f      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800481a:	2b20      	cmp	r3, #32
 800481c:	d011      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800481e:	e01a      	b.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	4a0f      	ldr	r2, [pc, #60]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800482c:	e01d      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800482e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004832:	3308      	adds	r3, #8
 8004834:	4618      	mov	r0, r3
 8004836:	f002 f9d1 	bl	8006bdc <RCCEx_PLL2_Config>
 800483a:	4603      	mov	r3, r0
 800483c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004840:	e013      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004842:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004846:	332c      	adds	r3, #44	@ 0x2c
 8004848:	4618      	mov	r0, r3
 800484a:	f002 fa5f 	bl	8006d0c <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004854:	e009      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800485c:	e005      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800485e:	bf00      	nop
 8004860:	e003      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004862:	bf00      	nop
 8004864:	46020c00 	.word	0x46020c00
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10d      	bne.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004872:	4bb6      	ldr	r3, [pc, #728]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004874:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004878:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800487c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004884:	4ab1      	ldr	r2, [pc, #708]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004886:	430b      	orrs	r3, r1
 8004888:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800488c:	e003      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004892:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004896:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80048a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048a4:	2300      	movs	r3, #0
 80048a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048a8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d053      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80048b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048be:	d033      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c4:	d82c      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ca:	d02f      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80048cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048d0:	d826      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d6:	d008      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80048d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048dc:	d820      	bhi.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80048e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048e6:	d011      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x400>
 80048e8:	e01a      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80048ea:	4b98      	ldr	r3, [pc, #608]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	4a97      	ldr	r2, [pc, #604]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80048f6:	e01a      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80048f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80048fc:	3308      	adds	r3, #8
 80048fe:	4618      	mov	r0, r3
 8004900:	f002 f96c 	bl	8006bdc <RCCEx_PLL2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800490a:	e010      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800490c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004910:	332c      	adds	r3, #44	@ 0x2c
 8004912:	4618      	mov	r0, r3
 8004914:	f002 f9fa 	bl	8006d0c <RCCEx_PLL3_Config>
 8004918:	4603      	mov	r3, r0
 800491a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800491e:	e006      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004926:	e002      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800492c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800492e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10d      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004936:	4b85      	ldr	r3, [pc, #532]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004938:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800493c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004940:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004948:	4a80      	ldr	r2, [pc, #512]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800494a:	430b      	orrs	r3, r1
 800494c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004950:	e003      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004952:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004956:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800495a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800495e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004962:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004966:	663b      	str	r3, [r7, #96]	@ 0x60
 8004968:	2300      	movs	r3, #0
 800496a:	667b      	str	r3, [r7, #100]	@ 0x64
 800496c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004970:	460b      	mov	r3, r1
 8004972:	4313      	orrs	r3, r2
 8004974:	d046      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800497a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800497e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004982:	d028      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004984:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004988:	d821      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800498a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800498e:	d022      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004990:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004994:	d81b      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8004996:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800499a:	d01c      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800499c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049a0:	d815      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049a6:	d008      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80049a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049ac:	d80f      	bhi.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d011      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b6:	d00e      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80049b8:	e009      	b.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80049ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049be:	3308      	adds	r3, #8
 80049c0:	4618      	mov	r0, r3
 80049c2:	f002 f90b 	bl	8006bdc <RCCEx_PLL2_Config>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80049cc:	e004      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80049d4:	e000      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 80049d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10d      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80049e0:	4b5a      	ldr	r3, [pc, #360]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80049e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049e6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80049ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80049ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049f2:	4a56      	ldr	r2, [pc, #344]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80049fa:	e003      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004a04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004a10:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a12:	2300      	movs	r3, #0
 8004a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a16:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d03f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d81e      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8004a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a34 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a73 	.word	0x08004a73
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a57 	.word	0x08004a57
 8004a40:	08004a73 	.word	0x08004a73
 8004a44:	08004a73 	.word	0x08004a73
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a48:	4b40      	ldr	r3, [pc, #256]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a52:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004a54:	e00e      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a5a:	332c      	adds	r3, #44	@ 0x2c
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f002 f955 	bl	8006d0c <RCCEx_PLL3_Config>
 8004a62:	4603      	mov	r3, r0
 8004a64:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004a68:	e004      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004a70:	e000      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8004a72:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004a74:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004a7c:	4b33      	ldr	r3, [pc, #204]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a82:	f023 0107 	bic.w	r1, r3, #7
 8004a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	4a2f      	ldr	r2, [pc, #188]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004a96:	e003      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a98:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004a9c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004aac:	653b      	str	r3, [r7, #80]	@ 0x50
 8004aae:	2300      	movs	r3, #0
 8004ab0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ab2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d04d      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ac4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ac8:	d028      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8004aca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ace:	d821      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ad0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ad4:	d024      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8004ad6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004ada:	d81b      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004adc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae0:	d00e      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8004ae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ae6:	d815      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01b      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af0:	d110      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004af2:	4b16      	ldr	r3, [pc, #88]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004afe:	e012      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b04:	332c      	adds	r3, #44	@ 0x2c
 8004b06:	4618      	mov	r0, r3
 8004b08:	f002 f900 	bl	8006d0c <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b12:	e008      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004b1a:	e004      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e002      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8004b24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004b26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d110      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004b2e:	4b07      	ldr	r3, [pc, #28]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b34:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004b38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b40:	4a02      	ldr	r2, [pc, #8]	@ (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8004b42:	430b      	orrs	r3, r1
 8004b44:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b48:	e006      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004b4a:	bf00      	nop
 8004b4c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004b54:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b66:	2300      	movs	r3, #0
 8004b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f000 80b5 	beq.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b7c:	4b9d      	ldr	r3, [pc, #628]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d113      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b8a:	4b9a      	ldr	r3, [pc, #616]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b90:	4a98      	ldr	r2, [pc, #608]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004b9a:	4b96      	ldr	r3, [pc, #600]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ba8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004bb2:	4b91      	ldr	r3, [pc, #580]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	4a90      	ldr	r2, [pc, #576]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fe0d 	bl	80017dc <HAL_GetTick>
 8004bc2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004bc6:	e00b      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc8:	f7fc fe08 	bl	80017dc <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d903      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004bde:	e005      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004be0:	4b85      	ldr	r3, [pc, #532]	@ (8004df8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8004be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ed      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8004bec:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d165      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d023      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8004c0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c0e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8004c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d01b      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c1a:	4b76      	ldr	r3, [pc, #472]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c28:	4b72      	ldr	r3, [pc, #456]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c2e:	4a71      	ldr	r2, [pc, #452]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c34:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c38:	4b6e      	ldr	r3, [pc, #440]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3e:	4a6d      	ldr	r2, [pc, #436]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c48:	4a6a      	ldr	r2, [pc, #424]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d019      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fc fdbd 	bl	80017dc <HAL_GetTick>
 8004c62:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c66:	e00d      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fc fdb8 	bl	80017dc <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c72:	1ad2      	subs	r2, r2, r3
 8004c74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d903      	bls.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8004c82:	e006      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c84:	4b5b      	ldr	r3, [pc, #364]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0ea      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8004c92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004c9a:	4b56      	ldr	r3, [pc, #344]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ca0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ca8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004cac:	4a51      	ldr	r2, [pc, #324]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004cba:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004cc4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cc8:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d107      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd0:	4b48      	ldr	r3, [pc, #288]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cd6:	4a47      	ldr	r2, [pc, #284]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004cd8:	f023 0304 	bic.w	r3, r3, #4
 8004cdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8004ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004cec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cee:	2300      	movs	r3, #0
 8004cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d042      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8004cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d04:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d08:	d022      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8004d0a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004d0e:	d81b      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004d10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d14:	d011      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d1a:	d815      	bhi.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d019      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8004d20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d24:	d110      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 ff55 	bl	8006bdc <RCCEx_PLL2_Config>
 8004d32:	4603      	mov	r3, r0
 8004d34:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d38:	e00d      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d44:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004d46:	e006      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004d50:	bf00      	nop
 8004d52:	e000      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8004d54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004d56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10d      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d64:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d70:	4a20      	ldr	r2, [pc, #128]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004d72:	430b      	orrs	r3, r1
 8004d74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004d7e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d94:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	d032      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004d9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004daa:	d00b      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004db0:	d804      	bhi.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	d007      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004dc2:	e004      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004dc4:	bf00      	nop
 8004dc6:	e002      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004dc8:	bf00      	nop
 8004dca:	e000      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8004dcc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dce:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d112      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8004dd6:	4b07      	ldr	r3, [pc, #28]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004ddc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004de0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de8:	4a02      	ldr	r2, [pc, #8]	@ (8004df4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8004dea:	430b      	orrs	r3, r1
 8004dec:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8004df2:	bf00      	nop
 8004df4:	46020c00 	.word	0x46020c00
 8004df8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004e00:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8004e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e12:	2300      	movs	r3, #0
 8004e14:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	d019      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8004e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e24:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e2c:	d105      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e2e:	4b88      	ldr	r3, [pc, #544]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	4a87      	ldr	r2, [pc, #540]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e38:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8004e3a:	4b85      	ldr	r3, [pc, #532]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004e40:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e4c:	4a80      	ldr	r2, [pc, #512]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8004e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e62:	2300      	movs	r3, #0
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e66:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d00c      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8004e70:	4b77      	ldr	r3, [pc, #476]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004e76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e82:	4973      	ldr	r1, [pc, #460]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8004e8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004e96:	623b      	str	r3, [r7, #32]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	d00c      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004eac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eb8:	4965      	ldr	r1, [pc, #404]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8004ec0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d00c      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8004edc:	4b5c      	ldr	r3, [pc, #368]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004ee2:	f023 0218 	bic.w	r2, r3, #24
 8004ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004eea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004eee:	4958      	ldr	r1, [pc, #352]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ef6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efe:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004f02:	613b      	str	r3, [r7, #16]
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	d032      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8004f12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f20:	4b4b      	ldr	r3, [pc, #300]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	4a4a      	ldr	r2, [pc, #296]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f2a:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8004f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f38:	d108      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f3e:	3308      	adds	r3, #8
 8004f40:	4618      	mov	r0, r3
 8004f42:	f001 fe4b 	bl	8006bdc <RCCEx_PLL2_Config>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8004f4c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10d      	bne.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8004f54:	4b3e      	ldr	r3, [pc, #248]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004f5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004f66:	493a      	ldr	r1, [pc, #232]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f70:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004f74:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8004f78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f80:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]
 8004f8a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4313      	orrs	r3, r2
 8004f92:	d03a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8004f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8004fa2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fa6:	d815      	bhi.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d017      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8004fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fb0:	d110      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb2:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb6:	4a26      	ldr	r2, [pc, #152]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbc:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004fbe:	e00e      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f001 fe08 	bl	8006bdc <RCCEx_PLL2_Config>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8004fdc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004fde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10d      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fec:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ff8:	4915      	ldr	r1, [pc, #84]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005000:	e003      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005002:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005006:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800500a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	2300      	movs	r3, #0
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005020:	460b      	mov	r3, r1
 8005022:	4313      	orrs	r3, r2
 8005024:	d00c      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005026:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800502c:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005030:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005034:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005038:	4905      	ldr	r1, [pc, #20]	@ (8005050 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005040:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005044:	4618      	mov	r0, r3
 8005046:	37e0      	adds	r7, #224	@ 0xe0
 8005048:	46bd      	mov	sp, r7
 800504a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800504e:	bf00      	nop
 8005050:	46020c00 	.word	0x46020c00

08005054 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005054:	b480      	push	{r7}
 8005056:	b089      	sub	sp, #36	@ 0x24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800505c:	4ba6      	ldr	r3, [pc, #664]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800505e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005064:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005066:	4ba4      	ldr	r3, [pc, #656]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506a:	f003 0303 	and.w	r3, r3, #3
 800506e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005070:	4ba1      	ldr	r3, [pc, #644]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	3301      	adds	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800507e:	4b9e      	ldr	r3, [pc, #632]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800508a:	4b9b      	ldr	r3, [pc, #620]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800508c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508e:	08db      	lsrs	r3, r3, #3
 8005090:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	fb02 f303 	mul.w	r3, r2, r3
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d062      	beq.n	8005172 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	f200 8081 	bhi.w	80051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d024      	beq.n	8005104 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d17a      	bne.n	80051b6 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ca:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80052fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80050ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d2:	4b89      	ldr	r3, [pc, #548]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80050e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050e6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80050ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005102:	e08f      	b.n	8005224 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005104:	4b7c      	ldr	r3, [pc, #496]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005110:	4b79      	ldr	r3, [pc, #484]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	0f1b      	lsrs	r3, r3, #28
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	e006      	b.n	800512a <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 800511c:	4b76      	ldr	r3, [pc, #472]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800511e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005122:	041b      	lsls	r3, r3, #16
 8005124:	0f1b      	lsrs	r3, r3, #28
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	4a76      	ldr	r2, [pc, #472]	@ (8005304 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800512c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	ee07 3a90 	vmov	s15, r3
 800514c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005150:	ed97 6a02 	vldr	s12, [r7, #8]
 8005154:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005158:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005160:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005164:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005170:	e058      	b.n	8005224 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	ee07 3a90 	vmov	s15, r3
 8005178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80052fc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005180:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005184:	4b5c      	ldr	r3, [pc, #368]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	ee07 3a90 	vmov	s15, r3
 8005190:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005194:	ed97 6a02 	vldr	s12, [r7, #8]
 8005198:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800519c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80051a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051b4:	e036      	b.n	8005224 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80051b6:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 80051c2:	4b4d      	ldr	r3, [pc, #308]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0f1b      	lsrs	r3, r3, #28
 80051c8:	f003 030f 	and.w	r3, r3, #15
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 80051ce:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80051d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	0f1b      	lsrs	r3, r3, #28
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	4a49      	ldr	r2, [pc, #292]	@ (8005304 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80051de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	ee07 3a90 	vmov	s15, r3
 80051f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a02 	vldr	s12, [r7, #8]
 8005206:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005300 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005222:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005224:	4b34      	ldr	r3, [pc, #208]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d017      	beq.n	8005260 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005230:	4b31      	ldr	r3, [pc, #196]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005232:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005234:	0a5b      	lsrs	r3, r3, #9
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005246:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800524a:	edd7 6a07 	vldr	s13, [r7, #28]
 800524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e002      	b.n	8005266 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005266:	4b24      	ldr	r3, [pc, #144]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d017      	beq.n	80052a2 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005272:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005274:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005276:	0c1b      	lsrs	r3, r3, #16
 8005278:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800527c:	ee07 3a90 	vmov	s15, r3
 8005280:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005284:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005288:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800528c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005298:	ee17 2a90 	vmov	r2, s15
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	e002      	b.n	80052a8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80052a8:	4b13      	ldr	r3, [pc, #76]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052b4:	4b10      	ldr	r3, [pc, #64]	@ (80052f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80052b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b8:	0e1b      	lsrs	r3, r3, #24
 80052ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80052c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ca:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80052ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80052d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052da:	ee17 2a90 	vmov	r2, s15
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80052e2:	e002      	b.n	80052ea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	609a      	str	r2, [r3, #8]
}
 80052ea:	bf00      	nop
 80052ec:	3724      	adds	r7, #36	@ 0x24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	46020c00 	.word	0x46020c00
 80052fc:	4b742400 	.word	0x4b742400
 8005300:	46000000 	.word	0x46000000
 8005304:	080124e0 	.word	0x080124e0

08005308 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005310:	4ba6      	ldr	r3, [pc, #664]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005318:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800531a:	4ba4      	ldr	r3, [pc, #656]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005324:	4ba1      	ldr	r3, [pc, #644]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	0a1b      	lsrs	r3, r3, #8
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	3301      	adds	r3, #1
 8005330:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005332:	4b9e      	ldr	r3, [pc, #632]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	091b      	lsrs	r3, r3, #4
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800533e:	4b9b      	ldr	r3, [pc, #620]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	08db      	lsrs	r3, r3, #3
 8005344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	ee07 3a90 	vmov	s15, r3
 8005352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005356:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2b03      	cmp	r3, #3
 800535e:	d062      	beq.n	8005426 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2b03      	cmp	r3, #3
 8005364:	f200 8081 	bhi.w	800546a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d024      	beq.n	80053b8 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b02      	cmp	r3, #2
 8005372:	d17a      	bne.n	800546a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b89      	ldr	r3, [pc, #548]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005396:	ed97 6a02 	vldr	s12, [r7, #8]
 800539a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053b6:	e08f      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80053b8:	4b7c      	ldr	r3, [pc, #496]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 80053c4:	4b79      	ldr	r3, [pc, #484]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	0f1b      	lsrs	r3, r3, #28
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	e006      	b.n	80053de <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 80053d0:	4b76      	ldr	r3, [pc, #472]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80053d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	0f1b      	lsrs	r3, r3, #28
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	4a76      	ldr	r2, [pc, #472]	@ (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80053e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	ee07 3a90 	vmov	s15, r3
 8005400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005404:	ed97 6a02 	vldr	s12, [r7, #8]
 8005408:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 800540c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005410:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005414:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005418:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800541c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005420:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005424:	e058      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	ee07 3a90 	vmov	s15, r3
 800542c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005430:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80055b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005434:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005438:	4b5c      	ldr	r3, [pc, #368]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800543a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005448:	ed97 6a02 	vldr	s12, [r7, #8]
 800544c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005450:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005454:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005458:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005464:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005468:	e036      	b.n	80054d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800546a:	4b50      	ldr	r3, [pc, #320]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005476:	4b4d      	ldr	r3, [pc, #308]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	0f1b      	lsrs	r3, r3, #28
 800547c:	f003 030f 	and.w	r3, r3, #15
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005482:	4b4a      	ldr	r3, [pc, #296]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005488:	041b      	lsls	r3, r3, #16
 800548a:	0f1b      	lsrs	r3, r3, #28
 800548c:	f003 030f 	and.w	r3, r3, #15
 8005490:	4a49      	ldr	r2, [pc, #292]	@ (80055b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	ee07 3a90 	vmov	s15, r3
 80054a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80055b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054d6:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80054d8:	4b34      	ldr	r3, [pc, #208]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d017      	beq.n	8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054e4:	4b31      	ldr	r3, [pc, #196]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80054e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e8:	0a5b      	lsrs	r3, r3, #9
 80054ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80054f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054fa:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80054fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800550a:	ee17 2a90 	vmov	r2, s15
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	e002      	b.n	800551a <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800551a:	4b24      	ldr	r3, [pc, #144]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800551c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005526:	4b21      	ldr	r3, [pc, #132]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552a:	0c1b      	lsrs	r3, r3, #16
 800552c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005530:	ee07 3a90 	vmov	s15, r3
 8005534:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005538:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800553c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005540:	edd7 6a07 	vldr	s13, [r7, #28]
 8005544:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554c:	ee17 2a90 	vmov	r2, s15
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	e002      	b.n	800555c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800555c:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d017      	beq.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005568:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800556a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556c:	0e1b      	lsrs	r3, r3, #24
 800556e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800557a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800557e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005582:	edd7 6a07 	vldr	s13, [r7, #28]
 8005586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800558a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800558e:	ee17 2a90 	vmov	r2, s15
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005596:	e002      	b.n	800559e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	609a      	str	r2, [r3, #8]
}
 800559e:	bf00      	nop
 80055a0:	3724      	adds	r7, #36	@ 0x24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	46020c00 	.word	0x46020c00
 80055b0:	4b742400 	.word	0x4b742400
 80055b4:	46000000 	.word	0x46000000
 80055b8:	080124e0 	.word	0x080124e0

080055bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80055bc:	b480      	push	{r7}
 80055be:	b089      	sub	sp, #36	@ 0x24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80055c4:	4ba6      	ldr	r3, [pc, #664]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055cc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80055ce:	4ba4      	ldr	r3, [pc, #656]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d2:	f003 0303 	and.w	r3, r3, #3
 80055d6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80055d8:	4ba1      	ldr	r3, [pc, #644]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	3301      	adds	r3, #1
 80055e4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80055e6:	4b9e      	ldr	r3, [pc, #632]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	091b      	lsrs	r3, r3, #4
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80055f2:	4b9b      	ldr	r3, [pc, #620]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b03      	cmp	r3, #3
 8005612:	d062      	beq.n	80056da <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b03      	cmp	r3, #3
 8005618:	f200 8081 	bhi.w	800571e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d024      	beq.n	800566c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d17a      	bne.n	800571e <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	ee07 3a90 	vmov	s15, r3
 800562e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005632:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800563a:	4b89      	ldr	r3, [pc, #548]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800563c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800563e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800564a:	ed97 6a02 	vldr	s12, [r7, #8]
 800564e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005652:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005656:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800565a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800565e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005666:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800566a:	e08f      	b.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800566c:	4b7c      	ldr	r3, [pc, #496]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005678:	4b79      	ldr	r3, [pc, #484]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	0f1b      	lsrs	r3, r3, #28
 800567e:	f003 030f 	and.w	r3, r3, #15
 8005682:	e006      	b.n	8005692 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005684:	4b76      	ldr	r3, [pc, #472]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800568a:	041b      	lsls	r3, r3, #16
 800568c:	0f1b      	lsrs	r3, r3, #28
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	4a76      	ldr	r2, [pc, #472]	@ (800586c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	ee07 3a90 	vmov	s15, r3
 80056a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80056bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80056c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d8:	e058      	b.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	ee07 3a90 	vmov	s15, r3
 80056e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005864 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80056e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056f4:	ee07 3a90 	vmov	s15, r3
 80056f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80056fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005700:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005704:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005708:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800570c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005710:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005718:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800571c:	e036      	b.n	800578c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800571e:	4b50      	ldr	r3, [pc, #320]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 800572a:	4b4d      	ldr	r3, [pc, #308]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0f1b      	lsrs	r3, r3, #28
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	e006      	b.n	8005744 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005736:	4b4a      	ldr	r3, [pc, #296]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800573c:	041b      	lsls	r3, r3, #16
 800573e:	0f1b      	lsrs	r3, r3, #28
 8005740:	f003 030f 	and.w	r3, r3, #15
 8005744:	4a49      	ldr	r2, [pc, #292]	@ (800586c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576a:	ed97 6a02 	vldr	s12, [r7, #8]
 800576e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005868 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800577e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005786:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800578a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800578c:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005798:	4b31      	ldr	r3, [pc, #196]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800579a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579c:	0a5b      	lsrs	r3, r3, #9
 800579e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a2:	ee07 3a90 	vmov	s15, r3
 80057a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80057aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057be:	ee17 2a90 	vmov	r2, s15
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80057ce:	4b24      	ldr	r3, [pc, #144]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d017      	beq.n	800580a <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057da:	4b21      	ldr	r3, [pc, #132]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057e4:	ee07 3a90 	vmov	s15, r3
 80057e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80057ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057f0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80057f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80057f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005800:	ee17 2a90 	vmov	r2, s15
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	605a      	str	r2, [r3, #4]
 8005808:	e002      	b.n	8005810 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005810:	4b13      	ldr	r3, [pc, #76]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800581c:	4b10      	ldr	r3, [pc, #64]	@ (8005860 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800581e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005820:	0e1b      	lsrs	r3, r3, #24
 8005822:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005826:	ee07 3a90 	vmov	s15, r3
 800582a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800582e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005832:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005836:	edd7 6a07 	vldr	s13, [r7, #28]
 800583a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800583e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005842:	ee17 2a90 	vmov	r2, s15
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800584a:	e002      	b.n	8005852 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
}
 8005852:	bf00      	nop
 8005854:	3724      	adds	r7, #36	@ 0x24
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	46020c00 	.word	0x46020c00
 8005864:	4b742400 	.word	0x4b742400
 8005868:	46000000 	.word	0x46000000
 800586c:	080124e0 	.word	0x080124e0

08005870 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	@ 0x38
 8005874:	af00      	add	r7, sp, #0
 8005876:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800587a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800587e:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005882:	430b      	orrs	r3, r1
 8005884:	d145      	bne.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005886:	4baa      	ldr	r3, [pc, #680]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800588c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005890:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005892:	4ba7      	ldr	r3, [pc, #668]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b02      	cmp	r3, #2
 800589e:	d108      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80058a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a6:	d104      	bne.n	80058b2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80058a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	f001 b987 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80058b2:	4b9f      	ldr	r3, [pc, #636]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80058c0:	d114      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80058c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c8:	d110      	bne.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058ca:	4b99      	ldr	r3, [pc, #612]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058d8:	d103      	bne.n	80058e2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80058da:	23fa      	movs	r3, #250	@ 0xfa
 80058dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058de:	f001 b96f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80058e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80058e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80058e8:	f001 b96a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80058ec:	4b90      	ldr	r3, [pc, #576]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f8:	d107      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005900:	d103      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005902:	4b8c      	ldr	r3, [pc, #560]	@ (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005904:	637b      	str	r3, [r7, #52]	@ 0x34
 8005906:	f001 b95b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	@ 0x34
 800590e:	f001 b957 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005916:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800591a:	430b      	orrs	r3, r1
 800591c:	d151      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800591e:	4b84      	ldr	r3, [pc, #528]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005920:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005924:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005928:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	2b80      	cmp	r3, #128	@ 0x80
 800592e:	d035      	beq.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005932:	2b80      	cmp	r3, #128	@ 0x80
 8005934:	d841      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	2b60      	cmp	r3, #96	@ 0x60
 800593a:	d02a      	beq.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	2b60      	cmp	r3, #96	@ 0x60
 8005940:	d83b      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d009      	beq.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594a:	2b40      	cmp	r3, #64	@ 0x40
 800594c:	d835      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800594e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005956:	2b20      	cmp	r3, #32
 8005958:	d012      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800595a:	e02e      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800595c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005960:	4618      	mov	r0, r3
 8005962:	f7ff fb77 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800596a:	f001 b929 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800596e:	f107 0318 	add.w	r3, r7, #24
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fcc8 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800597c:	f001 b920 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005980:	f107 030c 	add.w	r3, r7, #12
 8005984:	4618      	mov	r0, r3
 8005986:	f7ff fe19 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800598e:	f001 b917 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005992:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005998:	f001 b912 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800599c:	4b64      	ldr	r3, [pc, #400]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a8:	d103      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80059aa:	4b63      	ldr	r3, [pc, #396]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80059ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80059ae:	f001 b907 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80059b2:	2300      	movs	r3, #0
 80059b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059b6:	f001 b903 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80059be:	f001 b8ff 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80059c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059c6:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80059ca:	430b      	orrs	r3, r1
 80059cc:	d158      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80059ce:	4b58      	ldr	r3, [pc, #352]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80059d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e0:	d03b      	beq.n	8005a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059e8:	d846      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f0:	d02e      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f8:	d83e      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a00:	d00b      	beq.n	8005a1a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a08:	d836      	bhi.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00d      	beq.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	d012      	beq.n	8005a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005a18:	e02e      	b.n	8005a78 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fb18 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a28:	f001 b8ca 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a2c:	f107 0318 	add.w	r3, r7, #24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff fc69 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a3a:	f001 b8c1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a3e:	f107 030c 	add.w	r3, r7, #12
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fdba 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a4c:	f001 b8b8 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005a50:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a56:	f001 b8b3 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a5a:	4b35      	ldr	r3, [pc, #212]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a66:	d103      	bne.n	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005a68:	4b33      	ldr	r3, [pc, #204]	@ (8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005a6c:	f001 b8a8 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a74:	f001 b8a4 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a7c:	f001 b8a0 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	d16e      	bne.n	8005b6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005a8c:	4b28      	ldr	r3, [pc, #160]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a92:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005a96:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005a9e:	d034      	beq.n	8005b0a <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005aa6:	d85c      	bhi.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aae:	d00b      	beq.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab6:	d854      	bhi.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d016      	beq.n	8005aec <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ac4:	d009      	beq.n	8005ada <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005ac6:	e04c      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fac1 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ad6:	f001 b873 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0318 	add.w	r3, r7, #24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fc12 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ae8:	f001 b86a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005aec:	4b10      	ldr	r3, [pc, #64]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af8:	d103      	bne.n	8005b02 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8005afa:	4b10      	ldr	r3, [pc, #64]	@ (8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005afe:	f001 b85f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b06:	f001 b85b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005b0a:	4b09      	ldr	r3, [pc, #36]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0320 	and.w	r3, r3, #32
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d121      	bne.n	8005b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005b16:	4b06      	ldr	r3, [pc, #24]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00e      	beq.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8005b22:	4b03      	ldr	r3, [pc, #12]	@ (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	0e1b      	lsrs	r3, r3, #24
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	e00f      	b.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005b2e:	bf00      	nop
 8005b30:	46020c00 	.word	0x46020c00
 8005b34:	0007a120 	.word	0x0007a120
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	02dc6c00 	.word	0x02dc6c00
 8005b40:	4ba7      	ldr	r3, [pc, #668]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	0e1b      	lsrs	r3, r3, #24
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	4aa5      	ldr	r2, [pc, #660]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005b56:	f001 b833 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b5e:	f001 b82f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b66:	f001 b82b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b6e:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8005b72:	430b      	orrs	r3, r1
 8005b74:	d17f      	bne.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005b76:	4b9a      	ldr	r3, [pc, #616]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b80:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8005b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d165      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005b88:	4b95      	ldr	r3, [pc, #596]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b8e:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005b9a:	d034      	beq.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ba2:	d853      	bhi.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005baa:	d00b      	beq.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb2:	d84b      	bhi.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d016      	beq.n	8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005bc0:	d009      	beq.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8005bc2:	e043      	b.n	8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fa43 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005bd2:	f000 bff5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bd6:	f107 0318 	add.w	r3, r7, #24
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fb94 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005be4:	f000 bfec 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8005be8:	4b7d      	ldr	r3, [pc, #500]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bf4:	d103      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8005bf6:	4b7c      	ldr	r3, [pc, #496]	@ (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8005bf8:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005bfa:	f000 bfe1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005c02:	f000 bfdd 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8005c06:	4b76      	ldr	r3, [pc, #472]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d118      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005c12:	4b73      	ldr	r3, [pc, #460]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005c1e:	4b70      	ldr	r3, [pc, #448]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	0e1b      	lsrs	r3, r3, #24
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	e006      	b.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8005c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c30:	041b      	lsls	r3, r3, #16
 8005c32:	0e1b      	lsrs	r3, r3, #24
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	4a6a      	ldr	r2, [pc, #424]	@ (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8005c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8005c40:	f000 bfbe 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8005c44:	2300      	movs	r3, #0
 8005c46:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005c48:	f000 bfba 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8005c50:	f000 bfb6 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c5a:	d108      	bne.n	8005c6e <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff f9f7 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8005c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c6a:	f000 bfa9 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c72:	f000 bfa5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8005c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c7a:	1e51      	subs	r1, r2, #1
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	d136      	bne.n	8005cee <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005c80:	4b57      	ldr	r3, [pc, #348]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8005c92:	f7fe fb55 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 8005c96:	6378      	str	r0, [r7, #52]	@ 0x34
 8005c98:	f000 bf92 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d104      	bne.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005ca2:	f7fe fa1d 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005ca6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ca8:	f000 bf8a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8005cac:	4b4c      	ldr	r3, [pc, #304]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8005cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d103      	bne.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8005cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc4:	f000 bf7c 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8005cc8:	4b45      	ldr	r3, [pc, #276]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d104      	bne.n	8005ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8005cdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ce2:	f000 bf6d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cea:	f000 bf69 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8005cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cf2:	1e91      	subs	r1, r2, #2
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	d136      	bne.n	8005d66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005cf8:	4b39      	ldr	r3, [pc, #228]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cfe:	f003 030c 	and.w	r3, r3, #12
 8005d02:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d0a:	f7fe fb05 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005d0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d10:	f000 bf56 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d104      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d1a:	f7fe f9e1 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005d1e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d20:	f000 bf4e 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005d24:	4b2e      	ldr	r3, [pc, #184]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d30:	d106      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d103      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8005d38:	4b2c      	ldr	r3, [pc, #176]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d3c:	f000 bf40 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005d40:	4b27      	ldr	r3, [pc, #156]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d50:	2b0c      	cmp	r3, #12
 8005d52:	d104      	bne.n	8005d5e <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8005d54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d5a:	f000 bf31 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d62:	f000 bf2d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8005d66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d6a:	1f11      	subs	r1, r2, #4
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	d13f      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8005d70:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d76:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d7a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d104      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005d82:	f7fe fac9 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005d86:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d88:	f000 bf1a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8e:	2b10      	cmp	r3, #16
 8005d90:	d104      	bne.n	8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005d92:	f7fe f9a5 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005d96:	6378      	str	r0, [r7, #52]	@ 0x34
 8005d98:	f000 bf12 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8005d9c:	4b10      	ldr	r3, [pc, #64]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005da8:	d106      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	d103      	bne.n	8005db8 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8005db0:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8005db2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005db4:	f000 bf04 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8005db8:	4b09      	ldr	r3, [pc, #36]	@ (8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8005dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d107      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc8:	2b30      	cmp	r3, #48	@ 0x30
 8005dca:	d104      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8005dcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd2:	f000 bef5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	f000 bef1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8005dde:	bf00      	nop
 8005de0:	46020c00 	.word	0x46020c00
 8005de4:	080124e0 	.word	0x080124e0
 8005de8:	02dc6c00 	.word	0x02dc6c00
 8005dec:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8005df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005df4:	f1a2 0108 	sub.w	r1, r2, #8
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	d136      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8005dfc:	4ba4      	ldr	r3, [pc, #656]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e02:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8005e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fe fa83 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005e12:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e14:	f000 bed4 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	2b40      	cmp	r3, #64	@ 0x40
 8005e1c:	d104      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e1e:	f7fe f95f 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005e22:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e24:	f000 becc 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8005e28:	4b99      	ldr	r3, [pc, #612]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e34:	d106      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d103      	bne.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8005e3c:	4b95      	ldr	r3, [pc, #596]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e40:	f000 bebe 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8005e44:	4b92      	ldr	r3, [pc, #584]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d107      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e56:	d104      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8005e58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5e:	f000 beaf 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e66:	f000 beab 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8005e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e6e:	f1a2 0110 	sub.w	r1, r2, #16
 8005e72:	430b      	orrs	r3, r1
 8005e74:	d139      	bne.n	8005eea <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005e76:	4b86      	ldr	r3, [pc, #536]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e80:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8005e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d104      	bne.n	8005e92 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8005e88:	f7fe fa46 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8005e8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005e8e:	f000 be97 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e98:	d104      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005e9a:	f7fe f921 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005e9e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ea0:	f000 be8e 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8005ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb0:	d107      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb8:	d103      	bne.n	8005ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8005eba:	4b76      	ldr	r3, [pc, #472]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ebe:	f000 be7f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8005ec2:	4b73      	ldr	r3, [pc, #460]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ec8:	f003 0302 	and.w	r3, r3, #2
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d108      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ed6:	d104      	bne.n	8005ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8005ed8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ede:	f000 be6f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ee6:	f000 be6b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8005eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eee:	f1a2 0120 	sub.w	r1, r2, #32
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	d158      	bne.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005ef6:	4b66      	ldr	r3, [pc, #408]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005ef8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d104      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8005f08:	f7fe fa2e 	bl	8004368 <HAL_RCC_GetPCLK3Freq>
 8005f0c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f0e:	f000 be57 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8005f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d104      	bne.n	8005f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005f18:	f7fe f8e2 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005f1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8005f1e:	f000 be4f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8005f22:	4b5b      	ldr	r3, [pc, #364]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2e:	d106      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d103      	bne.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8005f36:	4b57      	ldr	r3, [pc, #348]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8005f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f3a:	f000 be41 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8005f3e:	4b54      	ldr	r3, [pc, #336]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d107      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d104      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8005f52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f58:	f000 be32 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8005f5c:	4b4c      	ldr	r3, [pc, #304]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d11b      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d118      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8005f6e:	4b48      	ldr	r3, [pc, #288]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8005f7a:	4b45      	ldr	r3, [pc, #276]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	0e1b      	lsrs	r3, r3, #24
 8005f80:	f003 030f 	and.w	r3, r3, #15
 8005f84:	e006      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005f86:	4b42      	ldr	r3, [pc, #264]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f8c:	041b      	lsls	r3, r3, #16
 8005f8e:	0e1b      	lsrs	r3, r3, #24
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	4a40      	ldr	r2, [pc, #256]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9c:	f000 be10 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa4:	f000 be0c 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8005fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	d173      	bne.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8005fb4:	4b36      	ldr	r3, [pc, #216]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8005fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fba:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005fbe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8005fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc6:	d104      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8005fc8:	f7fe f88a 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8005fcc:	6378      	str	r0, [r7, #52]	@ 0x34
 8005fce:	f000 bdf7 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fd8:	d108      	bne.n	8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fda:	f107 0318 	add.w	r3, r7, #24
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff f992 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8005fe4:	6a3b      	ldr	r3, [r7, #32]
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fe8:	f000 bdea 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8005ff2:	f7fe f977 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8005ff6:	6378      	str	r0, [r7, #52]	@ 0x34
 8005ff8:	f000 bde2 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffe:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006002:	d122      	bne.n	800604a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006004:	4b22      	ldr	r3, [pc, #136]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d118      	bne.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006010:	4b1f      	ldr	r3, [pc, #124]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800601c:	4b1c      	ldr	r3, [pc, #112]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0e1b      	lsrs	r3, r3, #24
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006028:	4b19      	ldr	r3, [pc, #100]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800602a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0e1b      	lsrs	r3, r3, #24
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a18      	ldr	r2, [pc, #96]	@ (8006098 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	f000 bdbf 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	637b      	str	r3, [r7, #52]	@ 0x34
 8006046:	f000 bdbb 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800604a:	4b11      	ldr	r3, [pc, #68]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006052:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006056:	d107      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800605a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800605e:	d103      	bne.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006060:	4b0c      	ldr	r3, [pc, #48]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006062:	637b      	str	r3, [r7, #52]	@ 0x34
 8006064:	f000 bdac 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006068:	4b09      	ldr	r3, [pc, #36]	@ (8006090 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006070:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006074:	d107      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800607c:	d103      	bne.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800607e:	4b05      	ldr	r3, [pc, #20]	@ (8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006080:	637b      	str	r3, [r7, #52]	@ 0x34
 8006082:	f000 bd9d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	637b      	str	r3, [r7, #52]	@ 0x34
 800608a:	f000 bd99 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800608e:	bf00      	nop
 8006090:	46020c00 	.word	0x46020c00
 8006094:	00f42400 	.word	0x00f42400
 8006098:	080124e0 	.word	0x080124e0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800609c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060a0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80060a4:	430b      	orrs	r3, r1
 80060a6:	d158      	bne.n	800615a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80060a8:	4bad      	ldr	r3, [pc, #692]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80060aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d84b      	bhi.n	8006152 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80060ba:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80060bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c0:	080060f9 	.word	0x080060f9
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	080060e7 	.word	0x080060e7
 80060cc:	08006103 	.word	0x08006103
 80060d0:	0800610d 	.word	0x0800610d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe ffbb 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060e2:	f000 bd6d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7ff fa66 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80060f4:	f000 bd64 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80060f8:	f7fe f8f4 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 80060fc:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80060fe:	f000 bd5f 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006102:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006106:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006108:	f000 bd5a 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800610c:	4b94      	ldr	r3, [pc, #592]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b20      	cmp	r3, #32
 8006116:	d118      	bne.n	800614a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006118:	4b91      	ldr	r3, [pc, #580]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006124:	4b8e      	ldr	r3, [pc, #568]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	0e1b      	lsrs	r3, r3, #24
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	e006      	b.n	800613e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006130:	4b8b      	ldr	r3, [pc, #556]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006132:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006136:	041b      	lsls	r3, r3, #16
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	4a89      	ldr	r2, [pc, #548]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006146:	f000 bd3b 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800614e:	f000 bd37 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006152:	2300      	movs	r3, #0
 8006154:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006156:	f000 bd33 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800615a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800615e:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006162:	430b      	orrs	r3, r1
 8006164:	d167      	bne.n	8006236 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006166:	4b7e      	ldr	r3, [pc, #504]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006168:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800616c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006170:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006178:	d036      	beq.n	80061e8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006180:	d855      	bhi.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006184:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006188:	d029      	beq.n	80061de <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800618a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006190:	d84d      	bhi.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006194:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006198:	d013      	beq.n	80061c2 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061a0:	d845      	bhi.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d015      	beq.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061ae:	d13e      	bne.n	800622e <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe ff4d 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061be:	f000 bcff 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff f9f8 	bl	80055bc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061d0:	f000 bcf6 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80061d4:	f7fe f886 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 80061d8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80061da:	f000 bcf1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80061de:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80061e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80061e4:	f000 bcec 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80061e8:	4b5d      	ldr	r3, [pc, #372]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d118      	bne.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80061f4:	4b5a      	ldr	r3, [pc, #360]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d005      	beq.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006200:	4b57      	ldr	r3, [pc, #348]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	0e1b      	lsrs	r3, r3, #24
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	e006      	b.n	800621a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800620c:	4b54      	ldr	r3, [pc, #336]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800620e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006212:	041b      	lsls	r3, r3, #16
 8006214:	0e1b      	lsrs	r3, r3, #24
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	4a52      	ldr	r2, [pc, #328]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800621c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006220:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006222:	f000 bccd 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800622a:	f000 bcc9 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006232:	f000 bcc5 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623a:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800623e:	430b      	orrs	r3, r1
 8006240:	d14c      	bne.n	80062dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006242:	4b47      	ldr	r3, [pc, #284]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006248:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006254:	f7fe f860 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8006258:	6378      	str	r0, [r7, #52]	@ 0x34
 800625a:	f000 bcb1 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006264:	d104      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006266:	f7fd ff3b 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800626a:	6378      	str	r0, [r7, #52]	@ 0x34
 800626c:	f000 bca8 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006270:	4b3b      	ldr	r3, [pc, #236]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627c:	d107      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006284:	d103      	bne.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006286:	4b38      	ldr	r3, [pc, #224]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
 800628a:	f000 bc99 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800628e:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b20      	cmp	r3, #32
 8006298:	d11c      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062a0:	d118      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80062a2:	4b2f      	ldr	r3, [pc, #188]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 80062ae:	4b2c      	ldr	r3, [pc, #176]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0e1b      	lsrs	r3, r3, #24
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	e006      	b.n	80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 80062ba:	4b29      	ldr	r3, [pc, #164]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	0e1b      	lsrs	r3, r3, #24
 80062c4:	f003 030f 	and.w	r3, r3, #15
 80062c8:	4a26      	ldr	r2, [pc, #152]	@ (8006364 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80062ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d0:	f000 bc76 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d8:	f000 bc72 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80062dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062e0:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80062e4:	430b      	orrs	r3, r1
 80062e6:	d152      	bne.n	800638e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80062e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80062ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062ee:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80062f2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d104      	bne.n	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062fa:	f7fe f80d 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80062fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006300:	f000 bc5e 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800630a:	d104      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800630c:	f7fd fee8 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8006310:	6378      	str	r0, [r7, #52]	@ 0x34
 8006312:	f000 bc55 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006316:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800631e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006322:	d107      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800632a:	d103      	bne.n	8006334 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800632c:	4b0e      	ldr	r3, [pc, #56]	@ (8006368 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006330:	f000 bc46 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006334:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0320 	and.w	r3, r3, #32
 800633c:	2b20      	cmp	r3, #32
 800633e:	d122      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006342:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006346:	d11e      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006348:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006354:	4b02      	ldr	r3, [pc, #8]	@ (8006360 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	e00c      	b.n	800637a <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006360:	46020c00 	.word	0x46020c00
 8006364:	080124e0 	.word	0x080124e0
 8006368:	00f42400 	.word	0x00f42400
 800636c:	4ba1      	ldr	r3, [pc, #644]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800636e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	0e1b      	lsrs	r3, r3, #24
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	4a9f      	ldr	r2, [pc, #636]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800637c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006380:	637b      	str	r3, [r7, #52]	@ 0x34
 8006382:	f000 bc1d 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
 800638a:	f000 bc19 	b.w	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800638e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006392:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006396:	430b      	orrs	r3, r1
 8006398:	d151      	bne.n	800643e <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800639a:	4b96      	ldr	r3, [pc, #600]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800639c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80063a0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80063a4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	2bc0      	cmp	r3, #192	@ 0xc0
 80063aa:	d024      	beq.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 80063ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80063b0:	d842      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	2b80      	cmp	r3, #128	@ 0x80
 80063b6:	d00d      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	2b80      	cmp	r3, #128	@ 0x80
 80063bc:	d83c      	bhi.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80063c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c6:	2b40      	cmp	r3, #64	@ 0x40
 80063c8:	d011      	beq.n	80063ee <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 80063ca:	e035      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80063cc:	f7fd ffcc 	bl	8004368 <HAL_RCC_GetPCLK3Freq>
 80063d0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80063d2:	e3f5      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80063d4:	4b87      	ldr	r3, [pc, #540]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d102      	bne.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80063e2:	4b86      	ldr	r3, [pc, #536]	@ (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063e6:	e3eb      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80063ec:	e3e8      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80063ee:	f7fd fe77 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80063f2:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80063f4:	e3e4      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80063f6:	4b7f      	ldr	r3, [pc, #508]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b20      	cmp	r3, #32
 8006400:	d117      	bne.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006402:	4b7c      	ldr	r3, [pc, #496]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d005      	beq.n	800641a <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800640e:	4b79      	ldr	r3, [pc, #484]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	0e1b      	lsrs	r3, r3, #24
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800641a:	4b76      	ldr	r3, [pc, #472]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800641c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006420:	041b      	lsls	r3, r3, #16
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	4a73      	ldr	r2, [pc, #460]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800642a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006430:	e3c6      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006436:	e3c3      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800643c:	e3c0      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800643e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006442:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 8006446:	430b      	orrs	r3, r1
 8006448:	d147      	bne.n	80064da <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800644a:	4b6a      	ldr	r3, [pc, #424]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800644c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006450:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006454:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fd ff5c 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 8006460:	6378      	str	r0, [r7, #52]	@ 0x34
 8006462:	e3ad      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800646a:	d103      	bne.n	8006474 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800646c:	f7fd fe38 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8006470:	6378      	str	r0, [r7, #52]	@ 0x34
 8006472:	e3a5      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006474:	4b5f      	ldr	r3, [pc, #380]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006480:	d106      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006488:	d102      	bne.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800648a:	4b5c      	ldr	r3, [pc, #368]	@ (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	e397      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006490:	4b58      	ldr	r3, [pc, #352]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b20      	cmp	r3, #32
 800649a:	d11b      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800649c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80064a2:	d117      	bne.n	80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064a4:	4b53      	ldr	r3, [pc, #332]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 80064b0:	4b50      	ldr	r3, [pc, #320]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	0e1b      	lsrs	r3, r3, #24
 80064b6:	f003 030f 	and.w	r3, r3, #15
 80064ba:	e006      	b.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80064bc:	4b4d      	ldr	r3, [pc, #308]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064c2:	041b      	lsls	r3, r3, #16
 80064c4:	0e1b      	lsrs	r3, r3, #24
 80064c6:	f003 030f 	and.w	r3, r3, #15
 80064ca:	4a4b      	ldr	r2, [pc, #300]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80064cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d2:	e375      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d8:	e372      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80064da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80064e2:	430b      	orrs	r3, r1
 80064e4:	d164      	bne.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80064e6:	4b43      	ldr	r3, [pc, #268]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80064f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d120      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064f8:	4b3e      	ldr	r3, [pc, #248]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b20      	cmp	r3, #32
 8006502:	d117      	bne.n	8006534 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006504:	4b3b      	ldr	r3, [pc, #236]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006510:	4b38      	ldr	r3, [pc, #224]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0e1b      	lsrs	r3, r3, #24
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	e006      	b.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800651c:	4b35      	ldr	r3, [pc, #212]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800651e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006522:	041b      	lsls	r3, r3, #16
 8006524:	0e1b      	lsrs	r3, r3, #24
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	4a33      	ldr	r2, [pc, #204]	@ (80065f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800652c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
 8006532:	e345      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	637b      	str	r3, [r7, #52]	@ 0x34
 8006538:	e342      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800653a:	4b2e      	ldr	r3, [pc, #184]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800653c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006544:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006548:	d112      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800654a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006550:	d10e      	bne.n	8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006552:	4b28      	ldr	r3, [pc, #160]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006560:	d102      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006562:	23fa      	movs	r3, #250	@ 0xfa
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006566:	e32b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006568:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800656c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800656e:	e327      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006570:	4b20      	ldr	r3, [pc, #128]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657c:	d106      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800657e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d102      	bne.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006586:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8006588:	637b      	str	r3, [r7, #52]	@ 0x34
 800658a:	e319      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800658c:	4b19      	ldr	r3, [pc, #100]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800658e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	2b02      	cmp	r3, #2
 8006598:	d107      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065a0:	d103      	bne.n	80065aa <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	e30a      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80065ae:	e307      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80065b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80065b8:	430b      	orrs	r3, r1
 80065ba:	d16b      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80065bc:	4b0d      	ldr	r3, [pc, #52]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065c2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065c6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d127      	bne.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065ce:	4b09      	ldr	r3, [pc, #36]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d11e      	bne.n	8006618 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065da:	4b06      	ldr	r3, [pc, #24]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00c      	beq.n	8006600 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80065e6:	4b03      	ldr	r3, [pc, #12]	@ (80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	0e1b      	lsrs	r3, r3, #24
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	e00d      	b.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80065f2:	bf00      	nop
 80065f4:	46020c00 	.word	0x46020c00
 80065f8:	080124e0 	.word	0x080124e0
 80065fc:	00f42400 	.word	0x00f42400
 8006600:	4b94      	ldr	r3, [pc, #592]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	0e1b      	lsrs	r3, r3, #24
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	4a92      	ldr	r2, [pc, #584]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8006610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
 8006616:	e2d3      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	637b      	str	r3, [r7, #52]	@ 0x34
 800661c:	e2d0      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800661e:	4b8d      	ldr	r3, [pc, #564]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006620:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006624:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006628:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800662c:	d112      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800662e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006630:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006634:	d10e      	bne.n	8006654 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006636:	4b87      	ldr	r3, [pc, #540]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006644:	d102      	bne.n	800664c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8006646:	23fa      	movs	r3, #250	@ 0xfa
 8006648:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800664a:	e2b9      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800664c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006652:	e2b5      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006654:	4b7f      	ldr	r3, [pc, #508]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006660:	d106      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006668:	d102      	bne.n	8006670 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800666a:	4b7c      	ldr	r3, [pc, #496]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
 800666e:	e2a7      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006670:	4b78      	ldr	r3, [pc, #480]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006672:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d107      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006684:	d103      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
 800668c:	e298      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
 8006692:	e295      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006698:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800669c:	430b      	orrs	r3, r1
 800669e:	d147      	bne.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80066a0:	4b6c      	ldr	r3, [pc, #432]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066a6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80066aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80066ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066b2:	f7fd fe31 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80066b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80066b8:	e282      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80066ba:	4b66      	ldr	r3, [pc, #408]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80066c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066c8:	d112      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066d0:	d10e      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066d2:	4b60      	ldr	r3, [pc, #384]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e0:	d102      	bne.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80066e2:	23fa      	movs	r3, #250	@ 0xfa
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066e6:	e26b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80066e8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80066ee:	e267      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80066f0:	4b58      	ldr	r3, [pc, #352]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fc:	d106      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006704:	d102      	bne.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8006706:	4b55      	ldr	r3, [pc, #340]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006708:	637b      	str	r3, [r7, #52]	@ 0x34
 800670a:	e259      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800670c:	4b51      	ldr	r3, [pc, #324]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800670e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b02      	cmp	r3, #2
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800671a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800671c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006720:	d103      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8006722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006726:	637b      	str	r3, [r7, #52]	@ 0x34
 8006728:	e24a      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800672a:	2300      	movs	r3, #0
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
 800672e:	e247      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006734:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006738:	430b      	orrs	r3, r1
 800673a:	d12d      	bne.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800673c:	4b45      	ldr	r3, [pc, #276]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800673e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006742:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006746:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006748:	4b42      	ldr	r3, [pc, #264]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006754:	d105      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800675c:	4b3f      	ldr	r3, [pc, #252]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800675e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006760:	e22e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006768:	d107      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800676a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe fc70 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	637b      	str	r3, [r7, #52]	@ 0x34
 8006778:	e222      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800677a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800677c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006780:	d107      	bne.n	8006792 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006782:	f107 0318 	add.w	r3, r7, #24
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fdbe 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006790:	e216      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	637b      	str	r3, [r7, #52]	@ 0x34
 8006796:	e213      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80067a0:	430b      	orrs	r3, r1
 80067a2:	d15d      	bne.n	8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80067a4:	4b2b      	ldr	r3, [pc, #172]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067aa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80067b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067b6:	d028      	beq.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 80067b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80067be:	d845      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067c6:	d013      	beq.n	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 80067c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067ce:	d83d      	bhi.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067dc:	d004      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80067de:	e035      	b.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80067e0:	f7fd fdae 	bl	8004340 <HAL_RCC_GetPCLK2Freq>
 80067e4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067e6:	e1eb      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80067e8:	f7fd fc7a 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80067ec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80067ee:	e1e7      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067f0:	4b18      	ldr	r3, [pc, #96]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067fc:	d102      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80067fe:	4b17      	ldr	r3, [pc, #92]	@ (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8006800:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006802:	e1dd      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006808:	e1da      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800680a:	4b12      	ldr	r3, [pc, #72]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b20      	cmp	r3, #32
 8006814:	d117      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006816:	4b0f      	ldr	r3, [pc, #60]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006822:	4b0c      	ldr	r3, [pc, #48]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	0e1b      	lsrs	r3, r3, #24
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	e006      	b.n	800683c <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800682e:	4b09      	ldr	r3, [pc, #36]	@ (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8006830:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006834:	041b      	lsls	r3, r3, #16
 8006836:	0e1b      	lsrs	r3, r3, #24
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	4a06      	ldr	r2, [pc, #24]	@ (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800683e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006842:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006844:	e1bc      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800684a:	e1b9      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006850:	e1b6      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006852:	bf00      	nop
 8006854:	46020c00 	.word	0x46020c00
 8006858:	080124e0 	.word	0x080124e0
 800685c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006864:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006868:	430b      	orrs	r3, r1
 800686a:	d156      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800686c:	4ba5      	ldr	r3, [pc, #660]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800686e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006872:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800687e:	d028      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006886:	d845      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800688e:	d013      	beq.n	80068b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8006890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006892:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006896:	d83d      	bhi.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	2b00      	cmp	r3, #0
 800689c:	d004      	beq.n	80068a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800689e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068a4:	d004      	beq.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80068a6:	e035      	b.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fd fd36 	bl	8004318 <HAL_RCC_GetPCLK1Freq>
 80068ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068ae:	e187      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80068b0:	f7fd fc16 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80068b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80068b6:	e183      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068b8:	4b92      	ldr	r3, [pc, #584]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c4:	d102      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 80068c6:	4b90      	ldr	r3, [pc, #576]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068ca:	e179      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068cc:	2300      	movs	r3, #0
 80068ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068d0:	e176      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d117      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068de:	4b89      	ldr	r3, [pc, #548]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80068ea:	4b86      	ldr	r3, [pc, #536]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	0e1b      	lsrs	r3, r3, #24
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	e006      	b.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80068f6:	4b83      	ldr	r3, [pc, #524]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80068f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068fc:	041b      	lsls	r3, r3, #16
 80068fe:	0e1b      	lsrs	r3, r3, #24
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	4a81      	ldr	r2, [pc, #516]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800690c:	e158      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006912:	e155      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006918:	e152      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800691a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691e:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8006922:	430b      	orrs	r3, r1
 8006924:	d177      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006926:	4b77      	ldr	r3, [pc, #476]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800692c:	f003 0318 	and.w	r3, r3, #24
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b18      	cmp	r3, #24
 8006936:	d86b      	bhi.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	080069a5 	.word	0x080069a5
 8006944:	08006a11 	.word	0x08006a11
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006a11 	.word	0x08006a11
 8006950:	08006a11 	.word	0x08006a11
 8006954:	08006a11 	.word	0x08006a11
 8006958:	08006a11 	.word	0x08006a11
 800695c:	08006a11 	.word	0x08006a11
 8006960:	080069ad 	.word	0x080069ad
 8006964:	08006a11 	.word	0x08006a11
 8006968:	08006a11 	.word	0x08006a11
 800696c:	08006a11 	.word	0x08006a11
 8006970:	08006a11 	.word	0x08006a11
 8006974:	08006a11 	.word	0x08006a11
 8006978:	08006a11 	.word	0x08006a11
 800697c:	08006a11 	.word	0x08006a11
 8006980:	080069b5 	.word	0x080069b5
 8006984:	08006a11 	.word	0x08006a11
 8006988:	08006a11 	.word	0x08006a11
 800698c:	08006a11 	.word	0x08006a11
 8006990:	08006a11 	.word	0x08006a11
 8006994:	08006a11 	.word	0x08006a11
 8006998:	08006a11 	.word	0x08006a11
 800699c:	08006a11 	.word	0x08006a11
 80069a0:	080069cf 	.word	0x080069cf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80069a4:	f7fd fce0 	bl	8004368 <HAL_RCC_GetPCLK3Freq>
 80069a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069aa:	e109      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80069ac:	f7fd fb98 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 80069b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80069b2:	e105      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b4:	4b53      	ldr	r3, [pc, #332]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c0:	d102      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 80069c2:	4b51      	ldr	r3, [pc, #324]	@ (8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 80069c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c6:	e0fb      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069cc:	e0f8      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0320 	and.w	r3, r3, #32
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d117      	bne.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069da:	4b4a      	ldr	r3, [pc, #296]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80069e6:	4b47      	ldr	r3, [pc, #284]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	0e1b      	lsrs	r3, r3, #24
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	e006      	b.n	8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80069f2:	4b44      	ldr	r3, [pc, #272]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80069f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069f8:	041b      	lsls	r3, r3, #16
 80069fa:	0e1b      	lsrs	r3, r3, #24
 80069fc:	f003 030f 	and.w	r3, r3, #15
 8006a00:	4a42      	ldr	r2, [pc, #264]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a06:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a08:	e0da      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a0e:	e0d7      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006a10:	2300      	movs	r3, #0
 8006a12:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a14:	e0d4      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1a:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	d155      	bne.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8006a22:	4b38      	ldr	r3, [pc, #224]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a28:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a34:	d013      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006a3c:	d844      	bhi.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a44:	d013      	beq.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4c:	d83c      	bhi.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d014      	beq.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8006a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a5a:	d014      	beq.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8006a5c:	e034      	b.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a5e:	f107 0318 	add.w	r3, r7, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fc50 	bl	8005308 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a6c:	e0a8      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe faee 	bl	8005054 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7c:	e0a0      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006a7e:	f7fd fb2f 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 8006a82:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006a84:	e09c      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006a86:	4b1f      	ldr	r3, [pc, #124]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d117      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a92:	4b1c      	ldr	r3, [pc, #112]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006a9e:	4b19      	ldr	r3, [pc, #100]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	0e1b      	lsrs	r3, r3, #24
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	e006      	b.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8006aaa:	4b16      	ldr	r3, [pc, #88]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ab0:	041b      	lsls	r3, r3, #16
 8006ab2:	0e1b      	lsrs	r3, r3, #24
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	4a14      	ldr	r2, [pc, #80]	@ (8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8006aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ac0:	e07e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ac6:	e07b      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006acc:	e078      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8006ace:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ad2:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8006ad6:	430b      	orrs	r3, r1
 8006ad8:	d138      	bne.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8006ada:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ae0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ae4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8006ae6:	4b07      	ldr	r3, [pc, #28]	@ (8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8006ae8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d10d      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10a      	bne.n	8006b10 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b00:	e05e      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006b02:	bf00      	nop
 8006b04:	46020c00 	.word	0x46020c00
 8006b08:	00f42400 	.word	0x00f42400
 8006b0c:	080124e0 	.word	0x080124e0
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8006b10:	4b2e      	ldr	r3, [pc, #184]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b1e:	d112      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b26:	d10e      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b28:	4b28      	ldr	r3, [pc, #160]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b36:	d102      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8006b38:	23fa      	movs	r3, #250	@ 0xfa
 8006b3a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b3c:	e040      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b3e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006b42:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b44:	e03c      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4a:	e039      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8006b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8006b54:	430b      	orrs	r3, r1
 8006b56:	d131      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8006b58:	4b1c      	ldr	r3, [pc, #112]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006b62:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8006b64:	4b19      	ldr	r3, [pc, #100]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b70:	d105      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d102      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8006b78:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7c:	e020      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8006b7e:	4b13      	ldr	r3, [pc, #76]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b8a:	d106      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b92:	d102      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8006b94:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8006b96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b98:	e012      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ba6:	d106      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bae:	d102      	bne.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	e004      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bba:	e001      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3738      	adds	r7, #56	@ 0x38
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	46020c00 	.word	0x46020c00
 8006bd0:	02dc6c00 	.word	0x02dc6c00
 8006bd4:	016e3600 	.word	0x016e3600
 8006bd8:	00f42400 	.word	0x00f42400

08006bdc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8006be4:	4b47      	ldr	r3, [pc, #284]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a46      	ldr	r2, [pc, #280]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006bea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bee:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bf0:	f7fa fdf4 	bl	80017dc <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bf6:	e008      	b.n	8006c0a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bf8:	f7fa fdf0 	bl	80017dc <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e077      	b.n	8006cfa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f0      	bne.n	8006bf8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006c16:	4b3b      	ldr	r3, [pc, #236]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6811      	ldr	r1, [r2, #0]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	6852      	ldr	r2, [r2, #4]
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	0212      	lsls	r2, r2, #8
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	4934      	ldr	r1, [pc, #208]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8006c36:	4b33      	ldr	r3, [pc, #204]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c3a:	4b33      	ldr	r3, [pc, #204]	@ (8006d08 <RCCEx_PLL2_Config+0x12c>)
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6892      	ldr	r2, [r2, #8]
 8006c42:	3a01      	subs	r2, #1
 8006c44:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	68d2      	ldr	r2, [r2, #12]
 8006c4c:	3a01      	subs	r2, #1
 8006c4e:	0252      	lsls	r2, r2, #9
 8006c50:	b292      	uxth	r2, r2
 8006c52:	4311      	orrs	r1, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6912      	ldr	r2, [r2, #16]
 8006c58:	3a01      	subs	r2, #1
 8006c5a:	0412      	lsls	r2, r2, #16
 8006c5c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6952      	ldr	r2, [r2, #20]
 8006c66:	3a01      	subs	r2, #1
 8006c68:	0612      	lsls	r2, r2, #24
 8006c6a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	4924      	ldr	r1, [pc, #144]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8006c76:	4b23      	ldr	r3, [pc, #140]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	f023 020c 	bic.w	r2, r3, #12
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	4920      	ldr	r1, [pc, #128]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006c88:	4b1e      	ldr	r3, [pc, #120]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	491c      	ldr	r1, [pc, #112]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8006c96:	4b1b      	ldr	r3, [pc, #108]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006c9c:	f023 0310 	bic.w	r3, r3, #16
 8006ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ca2:	4b18      	ldr	r3, [pc, #96]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006caa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	69d2      	ldr	r2, [r2, #28]
 8006cb2:	00d2      	lsls	r2, r2, #3
 8006cb4:	4913      	ldr	r1, [pc, #76]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8006cba:	4b12      	ldr	r3, [pc, #72]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	4a11      	ldr	r2, [pc, #68]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cc0:	f043 0310 	orr.w	r3, r3, #16
 8006cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8006cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a0e      	ldr	r2, [pc, #56]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cd0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006cd2:	f7fa fd83 	bl	80017dc <HAL_GetTick>
 8006cd6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cd8:	e008      	b.n	8006cec <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cda:	f7fa fd7f 	bl	80017dc <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d901      	bls.n	8006cec <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e006      	b.n	8006cfa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006cec:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <RCCEx_PLL2_Config+0x128>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0f0      	beq.n	8006cda <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0

}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	46020c00 	.word	0x46020c00
 8006d08:	80800000 	.word	0x80800000

08006d0c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8006d14:	4b47      	ldr	r3, [pc, #284]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a46      	ldr	r2, [pc, #280]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d1e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006d20:	f7fa fd5c 	bl	80017dc <HAL_GetTick>
 8006d24:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d26:	e008      	b.n	8006d3a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d28:	f7fa fd58 	bl	80017dc <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e077      	b.n	8006e2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f0      	bne.n	8006d28 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8006d46:	4b3b      	ldr	r3, [pc, #236]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d4e:	f023 0303 	bic.w	r3, r3, #3
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	6811      	ldr	r1, [r2, #0]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6852      	ldr	r2, [r2, #4]
 8006d5a:	3a01      	subs	r2, #1
 8006d5c:	0212      	lsls	r2, r2, #8
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	4934      	ldr	r1, [pc, #208]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	630b      	str	r3, [r1, #48]	@ 0x30
 8006d66:	4b33      	ldr	r3, [pc, #204]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d6a:	4b33      	ldr	r3, [pc, #204]	@ (8006e38 <RCCEx_PLL3_Config+0x12c>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6892      	ldr	r2, [r2, #8]
 8006d72:	3a01      	subs	r2, #1
 8006d74:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	68d2      	ldr	r2, [r2, #12]
 8006d7c:	3a01      	subs	r2, #1
 8006d7e:	0252      	lsls	r2, r2, #9
 8006d80:	b292      	uxth	r2, r2
 8006d82:	4311      	orrs	r1, r2
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	6912      	ldr	r2, [r2, #16]
 8006d88:	3a01      	subs	r2, #1
 8006d8a:	0412      	lsls	r2, r2, #16
 8006d8c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006d90:	4311      	orrs	r1, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6952      	ldr	r2, [r2, #20]
 8006d96:	3a01      	subs	r2, #1
 8006d98:	0612      	lsls	r2, r2, #24
 8006d9a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	4924      	ldr	r1, [pc, #144]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8006da6:	4b23      	ldr	r3, [pc, #140]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	f023 020c 	bic.w	r2, r3, #12
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	4920      	ldr	r1, [pc, #128]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8006db8:	4b1e      	ldr	r3, [pc, #120]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	491c      	ldr	r1, [pc, #112]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8006dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dca:	4a1a      	ldr	r2, [pc, #104]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dcc:	f023 0310 	bic.w	r3, r3, #16
 8006dd0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dd2:	4b18      	ldr	r3, [pc, #96]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dda:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	69d2      	ldr	r2, [r2, #28]
 8006de2:	00d2      	lsls	r2, r2, #3
 8006de4:	4913      	ldr	r1, [pc, #76]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8006dea:	4b12      	ldr	r3, [pc, #72]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	4a11      	ldr	r2, [pc, #68]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006df0:	f043 0310 	orr.w	r3, r3, #16
 8006df4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e00:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e02:	f7fa fceb 	bl	80017dc <HAL_GetTick>
 8006e06:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e08:	e008      	b.n	8006e1c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e0a:	f7fa fce7 	bl	80017dc <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e006      	b.n	8006e2a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e1c:	4b05      	ldr	r3, [pc, #20]	@ (8006e34 <RCCEx_PLL3_Config+0x128>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	46020c00 	.word	0x46020c00
 8006e38:	80800000 	.word	0x80800000

08006e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e049      	b.n	8006ee2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f841 	bl	8006eea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f000 fa58 	bl	8007330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b083      	sub	sp, #12
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d001      	beq.n	8006f18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e072      	b.n	8006ffe <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68da      	ldr	r2, [r3, #12]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f042 0201 	orr.w	r2, r2, #1
 8006f2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a35      	ldr	r2, [pc, #212]	@ (800700c <HAL_TIM_Base_Start_IT+0x10c>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d040      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a34      	ldr	r2, [pc, #208]	@ (8007010 <HAL_TIM_Base_Start_IT+0x110>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d03b      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4c:	d036      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f56:	d031      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007014 <HAL_TIM_Base_Start_IT+0x114>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d02c      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a2c      	ldr	r2, [pc, #176]	@ (8007018 <HAL_TIM_Base_Start_IT+0x118>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d027      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a2a      	ldr	r2, [pc, #168]	@ (800701c <HAL_TIM_Base_Start_IT+0x11c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d022      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a29      	ldr	r2, [pc, #164]	@ (8007020 <HAL_TIM_Base_Start_IT+0x120>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d01d      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a27      	ldr	r2, [pc, #156]	@ (8007024 <HAL_TIM_Base_Start_IT+0x124>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d018      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a26      	ldr	r2, [pc, #152]	@ (8007028 <HAL_TIM_Base_Start_IT+0x128>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a24      	ldr	r2, [pc, #144]	@ (800702c <HAL_TIM_Base_Start_IT+0x12c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00e      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a23      	ldr	r2, [pc, #140]	@ (8007030 <HAL_TIM_Base_Start_IT+0x130>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d009      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a21      	ldr	r2, [pc, #132]	@ (8007034 <HAL_TIM_Base_Start_IT+0x134>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0xbc>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a20      	ldr	r2, [pc, #128]	@ (8007038 <HAL_TIM_Base_Start_IT+0x138>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d115      	bne.n	8006fe8 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800703c <HAL_TIM_Base_Start_IT+0x13c>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b06      	cmp	r3, #6
 8006fcc:	d015      	beq.n	8006ffa <HAL_TIM_Base_Start_IT+0xfa>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fd4:	d011      	beq.n	8006ffa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0201 	orr.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	e008      	b.n	8006ffa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0201 	orr.w	r2, r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e000      	b.n	8006ffc <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	50012c00 	.word	0x50012c00
 8007014:	40000400 	.word	0x40000400
 8007018:	50000400 	.word	0x50000400
 800701c:	40000800 	.word	0x40000800
 8007020:	50000800 	.word	0x50000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	50000c00 	.word	0x50000c00
 800702c:	40013400 	.word	0x40013400
 8007030:	50013400 	.word	0x50013400
 8007034:	40014000 	.word	0x40014000
 8007038:	50014000 	.word	0x50014000
 800703c:	00010007 	.word	0x00010007

08007040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f003 0302 	and.w	r3, r3, #2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d020      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d01b      	beq.n	80070a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0202 	mvn.w	r2, #2
 8007074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f931 	bl	80072f2 <HAL_TIM_IC_CaptureCallback>
 8007090:	e005      	b.n	800709e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f923 	bl	80072de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f934 	bl	8007306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f003 0304 	and.w	r3, r3, #4
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d020      	beq.n	80070f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 0304 	and.w	r3, r3, #4
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01b      	beq.n	80070f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f06f 0204 	mvn.w	r2, #4
 80070c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2202      	movs	r2, #2
 80070c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f90b 	bl	80072f2 <HAL_TIM_IC_CaptureCallback>
 80070dc:	e005      	b.n	80070ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f8fd 	bl	80072de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f90e 	bl	8007306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d020      	beq.n	800713c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 0308 	and.w	r3, r3, #8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d01b      	beq.n	800713c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f06f 0208 	mvn.w	r2, #8
 800710c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2204      	movs	r2, #4
 8007112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f003 0303 	and.w	r3, r3, #3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f8e5 	bl	80072f2 <HAL_TIM_IC_CaptureCallback>
 8007128:	e005      	b.n	8007136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f8d7 	bl	80072de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f8e8 	bl	8007306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	d020      	beq.n	8007188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01b      	beq.n	8007188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f06f 0210 	mvn.w	r2, #16
 8007158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2208      	movs	r2, #8
 800715e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	69db      	ldr	r3, [r3, #28]
 8007166:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800716a:	2b00      	cmp	r3, #0
 800716c:	d003      	beq.n	8007176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f8bf 	bl	80072f2 <HAL_TIM_IC_CaptureCallback>
 8007174:	e005      	b.n	8007182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8b1 	bl	80072de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f8c2 	bl	8007306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f06f 0201 	mvn.w	r2, #1
 80071a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7f9 fe06 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00c      	beq.n	80071da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d007      	beq.n	80071da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f9b5 	bl	8007544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80071f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9ad 	bl	8007558 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d007      	beq.n	8007222 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800721a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f87c 	bl	800731a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00c      	beq.n	8007246 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f06f 0220 	mvn.w	r2, #32
 800723e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 f975 	bl	8007530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00c      	beq.n	800726a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f981 	bl	800756c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00c      	beq.n	800728e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f979 	bl	8007580 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00c      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80072aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f971 	bl	8007594 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00c      	beq.n	80072d6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d007      	beq.n	80072d6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80072ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f969 	bl	80075a8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072d6:	bf00      	nop
 80072d8:	3710      	adds	r7, #16
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072de:	b480      	push	{r7}
 80072e0:	b083      	sub	sp, #12
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072f2:	b480      	push	{r7}
 80072f4:	b083      	sub	sp, #12
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a6b      	ldr	r2, [pc, #428]	@ (80074f0 <TIM_Base_SetConfig+0x1c0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d02b      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a6a      	ldr	r2, [pc, #424]	@ (80074f4 <TIM_Base_SetConfig+0x1c4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d027      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007356:	d023      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800735e:	d01f      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a65      	ldr	r2, [pc, #404]	@ (80074f8 <TIM_Base_SetConfig+0x1c8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d01b      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a64      	ldr	r2, [pc, #400]	@ (80074fc <TIM_Base_SetConfig+0x1cc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d017      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a63      	ldr	r2, [pc, #396]	@ (8007500 <TIM_Base_SetConfig+0x1d0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a62      	ldr	r2, [pc, #392]	@ (8007504 <TIM_Base_SetConfig+0x1d4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00f      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a61      	ldr	r2, [pc, #388]	@ (8007508 <TIM_Base_SetConfig+0x1d8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a60      	ldr	r2, [pc, #384]	@ (800750c <TIM_Base_SetConfig+0x1dc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a5f      	ldr	r2, [pc, #380]	@ (8007510 <TIM_Base_SetConfig+0x1e0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_Base_SetConfig+0x70>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a5e      	ldr	r2, [pc, #376]	@ (8007514 <TIM_Base_SetConfig+0x1e4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d108      	bne.n	80073b2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a4e      	ldr	r2, [pc, #312]	@ (80074f0 <TIM_Base_SetConfig+0x1c0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d043      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a4d      	ldr	r2, [pc, #308]	@ (80074f4 <TIM_Base_SetConfig+0x1c4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d03f      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c8:	d03b      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80073d0:	d037      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a48      	ldr	r2, [pc, #288]	@ (80074f8 <TIM_Base_SetConfig+0x1c8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d033      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a47      	ldr	r2, [pc, #284]	@ (80074fc <TIM_Base_SetConfig+0x1cc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d02f      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a46      	ldr	r2, [pc, #280]	@ (8007500 <TIM_Base_SetConfig+0x1d0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d02b      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a45      	ldr	r2, [pc, #276]	@ (8007504 <TIM_Base_SetConfig+0x1d4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d027      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a44      	ldr	r2, [pc, #272]	@ (8007508 <TIM_Base_SetConfig+0x1d8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d023      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a43      	ldr	r2, [pc, #268]	@ (800750c <TIM_Base_SetConfig+0x1dc>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d01f      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a42      	ldr	r2, [pc, #264]	@ (8007510 <TIM_Base_SetConfig+0x1e0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d01b      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a41      	ldr	r2, [pc, #260]	@ (8007514 <TIM_Base_SetConfig+0x1e4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d017      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a40      	ldr	r2, [pc, #256]	@ (8007518 <TIM_Base_SetConfig+0x1e8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d013      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a3f      	ldr	r2, [pc, #252]	@ (800751c <TIM_Base_SetConfig+0x1ec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d00f      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a3e      	ldr	r2, [pc, #248]	@ (8007520 <TIM_Base_SetConfig+0x1f0>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d00b      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a3d      	ldr	r2, [pc, #244]	@ (8007524 <TIM_Base_SetConfig+0x1f4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d007      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a3c      	ldr	r2, [pc, #240]	@ (8007528 <TIM_Base_SetConfig+0x1f8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d003      	beq.n	8007442 <TIM_Base_SetConfig+0x112>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a3b      	ldr	r2, [pc, #236]	@ (800752c <TIM_Base_SetConfig+0x1fc>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d108      	bne.n	8007454 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	4313      	orrs	r3, r2
 8007460:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a1e      	ldr	r2, [pc, #120]	@ (80074f0 <TIM_Base_SetConfig+0x1c0>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d023      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a1d      	ldr	r2, [pc, #116]	@ (80074f4 <TIM_Base_SetConfig+0x1c4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d01f      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a22      	ldr	r2, [pc, #136]	@ (8007510 <TIM_Base_SetConfig+0x1e0>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01b      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a21      	ldr	r2, [pc, #132]	@ (8007514 <TIM_Base_SetConfig+0x1e4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d017      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a20      	ldr	r2, [pc, #128]	@ (8007518 <TIM_Base_SetConfig+0x1e8>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d013      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a1f      	ldr	r2, [pc, #124]	@ (800751c <TIM_Base_SetConfig+0x1ec>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d00f      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007520 <TIM_Base_SetConfig+0x1f0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d00b      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a1d      	ldr	r2, [pc, #116]	@ (8007524 <TIM_Base_SetConfig+0x1f4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d007      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007528 <TIM_Base_SetConfig+0x1f8>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d003      	beq.n	80074c2 <TIM_Base_SetConfig+0x192>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1b      	ldr	r2, [pc, #108]	@ (800752c <TIM_Base_SetConfig+0x1fc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d103      	bne.n	80074ca <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	691a      	ldr	r2, [r3, #16]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f043 0204 	orr.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	40012c00 	.word	0x40012c00
 80074f4:	50012c00 	.word	0x50012c00
 80074f8:	40000400 	.word	0x40000400
 80074fc:	50000400 	.word	0x50000400
 8007500:	40000800 	.word	0x40000800
 8007504:	50000800 	.word	0x50000800
 8007508:	40000c00 	.word	0x40000c00
 800750c:	50000c00 	.word	0x50000c00
 8007510:	40013400 	.word	0x40013400
 8007514:	50013400 	.word	0x50013400
 8007518:	40014000 	.word	0x40014000
 800751c:	50014000 	.word	0x50014000
 8007520:	40014400 	.word	0x40014400
 8007524:	50014400 	.word	0x50014400
 8007528:	40014800 	.word	0x40014800
 800752c:	50014800 	.word	0x50014800

08007530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007538:	bf00      	nop
 800753a:	370c      	adds	r7, #12
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e042      	b.n	8007654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d106      	bne.n	80075e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f83b 	bl	800765c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2224      	movs	r2, #36	@ 0x24
 80075ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa72 	bl	8007af0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8cd 	bl	80077ac <UART_SetConfig>
 8007612:	4603      	mov	r3, r0
 8007614:	2b01      	cmp	r3, #1
 8007616:	d101      	bne.n	800761c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e01b      	b.n	8007654 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800762a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	689a      	ldr	r2, [r3, #8]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800763a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 faf1 	bl	8007c34 <UART_CheckIdleState>
 8007652:	4603      	mov	r3, r0
}
 8007654:	4618      	mov	r0, r3
 8007656:	3708      	adds	r7, #8
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b08a      	sub	sp, #40	@ 0x28
 8007674:	af02      	add	r7, sp, #8
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	603b      	str	r3, [r7, #0]
 800767c:	4613      	mov	r3, r2
 800767e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007686:	2b20      	cmp	r3, #32
 8007688:	f040 808b 	bne.w	80077a2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <HAL_UART_Transmit+0x28>
 8007692:	88fb      	ldrh	r3, [r7, #6]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e083      	b.n	80077a4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076a6:	2b80      	cmp	r3, #128	@ 0x80
 80076a8:	d107      	bne.n	80076ba <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689a      	ldr	r2, [r3, #8]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076b8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2221      	movs	r2, #33	@ 0x21
 80076c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076ca:	f7fa f887 	bl	80017dc <HAL_GetTick>
 80076ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	88fa      	ldrh	r2, [r7, #6]
 80076d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076e8:	d108      	bne.n	80076fc <HAL_UART_Transmit+0x8c>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d104      	bne.n	80076fc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	61bb      	str	r3, [r7, #24]
 80076fa:	e003      	b.n	8007704 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007704:	e030      	b.n	8007768 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2200      	movs	r2, #0
 800770e:	2180      	movs	r1, #128	@ 0x80
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fb39 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2220      	movs	r2, #32
 8007720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e03d      	b.n	80077a4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800773c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	3302      	adds	r3, #2
 8007742:	61bb      	str	r3, [r7, #24]
 8007744:	e007      	b.n	8007756 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800776e:	b29b      	uxth	r3, r3
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1c8      	bne.n	8007706 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2200      	movs	r2, #0
 800777c:	2140      	movs	r1, #64	@ 0x40
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fb02 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2220      	movs	r2, #32
 800778e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e006      	b.n	80077a4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2220      	movs	r2, #32
 800779a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800779e:	2300      	movs	r3, #0
 80077a0:	e000      	b.n	80077a4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80077a2:	2302      	movs	r3, #2
  }
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3720      	adds	r7, #32
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077b0:	b094      	sub	sp, #80	@ 0x50
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80077bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	4b7e      	ldr	r3, [pc, #504]	@ (80079bc <UART_SetConfig+0x210>)
 80077c2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	431a      	orrs	r2, r3
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d6:	69db      	ldr	r3, [r3, #28]
 80077d8:	4313      	orrs	r3, r2
 80077da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4977      	ldr	r1, [pc, #476]	@ (80079c0 <UART_SetConfig+0x214>)
 80077e4:	4019      	ands	r1, r3
 80077e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077ec:	430b      	orrs	r3, r1
 80077ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	68d9      	ldr	r1, [r3, #12]
 80077fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	ea40 0301 	orr.w	r3, r0, r1
 8007806:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800780e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	4b6a      	ldr	r3, [pc, #424]	@ (80079bc <UART_SetConfig+0x210>)
 8007814:	429a      	cmp	r2, r3
 8007816:	d009      	beq.n	800782c <UART_SetConfig+0x80>
 8007818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	4b69      	ldr	r3, [pc, #420]	@ (80079c4 <UART_SetConfig+0x218>)
 800781e:	429a      	cmp	r2, r3
 8007820:	d004      	beq.n	800782c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007824:	6a1a      	ldr	r2, [r3, #32]
 8007826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007828:	4313      	orrs	r3, r2
 800782a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800782c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8007836:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800783a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007840:	430b      	orrs	r3, r1
 8007842:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	f023 000f 	bic.w	r0, r3, #15
 800784e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007850:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8007852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	ea40 0301 	orr.w	r3, r0, r1
 800785a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800785c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	4b59      	ldr	r3, [pc, #356]	@ (80079c8 <UART_SetConfig+0x21c>)
 8007862:	429a      	cmp	r2, r3
 8007864:	d102      	bne.n	800786c <UART_SetConfig+0xc0>
 8007866:	2301      	movs	r3, #1
 8007868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800786a:	e029      	b.n	80078c0 <UART_SetConfig+0x114>
 800786c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	4b56      	ldr	r3, [pc, #344]	@ (80079cc <UART_SetConfig+0x220>)
 8007872:	429a      	cmp	r2, r3
 8007874:	d102      	bne.n	800787c <UART_SetConfig+0xd0>
 8007876:	2302      	movs	r3, #2
 8007878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800787a:	e021      	b.n	80078c0 <UART_SetConfig+0x114>
 800787c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b53      	ldr	r3, [pc, #332]	@ (80079d0 <UART_SetConfig+0x224>)
 8007882:	429a      	cmp	r2, r3
 8007884:	d102      	bne.n	800788c <UART_SetConfig+0xe0>
 8007886:	2304      	movs	r3, #4
 8007888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800788a:	e019      	b.n	80078c0 <UART_SetConfig+0x114>
 800788c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4b50      	ldr	r3, [pc, #320]	@ (80079d4 <UART_SetConfig+0x228>)
 8007892:	429a      	cmp	r2, r3
 8007894:	d102      	bne.n	800789c <UART_SetConfig+0xf0>
 8007896:	2308      	movs	r3, #8
 8007898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800789a:	e011      	b.n	80078c0 <UART_SetConfig+0x114>
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	4b4d      	ldr	r3, [pc, #308]	@ (80079d8 <UART_SetConfig+0x22c>)
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d102      	bne.n	80078ac <UART_SetConfig+0x100>
 80078a6:	2310      	movs	r3, #16
 80078a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078aa:	e009      	b.n	80078c0 <UART_SetConfig+0x114>
 80078ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	4b42      	ldr	r3, [pc, #264]	@ (80079bc <UART_SetConfig+0x210>)
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d102      	bne.n	80078bc <UART_SetConfig+0x110>
 80078b6:	2320      	movs	r3, #32
 80078b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ba:	e001      	b.n	80078c0 <UART_SetConfig+0x114>
 80078bc:	2300      	movs	r3, #0
 80078be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	4b3d      	ldr	r3, [pc, #244]	@ (80079bc <UART_SetConfig+0x210>)
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d005      	beq.n	80078d6 <UART_SetConfig+0x12a>
 80078ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	4b3d      	ldr	r3, [pc, #244]	@ (80079c4 <UART_SetConfig+0x218>)
 80078d0:	429a      	cmp	r2, r3
 80078d2:	f040 8085 	bne.w	80079e0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80078d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d8:	2200      	movs	r2, #0
 80078da:	623b      	str	r3, [r7, #32]
 80078dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80078de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80078e2:	f7fd ffc5 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 80078e6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80078e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f000 80e8 	beq.w	8007ac0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80078f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f4:	4a39      	ldr	r2, [pc, #228]	@ (80079dc <UART_SetConfig+0x230>)
 80078f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078fa:	461a      	mov	r2, r3
 80078fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007902:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	4613      	mov	r3, r2
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007910:	429a      	cmp	r2, r3
 8007912:	d305      	bcc.n	8007920 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800791a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800791c:	429a      	cmp	r2, r3
 800791e:	d903      	bls.n	8007928 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007926:	e048      	b.n	80079ba <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007928:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792a:	2200      	movs	r2, #0
 800792c:	61bb      	str	r3, [r7, #24]
 800792e:	61fa      	str	r2, [r7, #28]
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007934:	4a29      	ldr	r2, [pc, #164]	@ (80079dc <UART_SetConfig+0x230>)
 8007936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800793a:	b29b      	uxth	r3, r3
 800793c:	2200      	movs	r2, #0
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	617a      	str	r2, [r7, #20]
 8007942:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007946:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800794a:	f7f8 fc95 	bl	8000278 <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4610      	mov	r0, r2
 8007954:	4619      	mov	r1, r3
 8007956:	f04f 0200 	mov.w	r2, #0
 800795a:	f04f 0300 	mov.w	r3, #0
 800795e:	020b      	lsls	r3, r1, #8
 8007960:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007964:	0202      	lsls	r2, r0, #8
 8007966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007968:	6849      	ldr	r1, [r1, #4]
 800796a:	0849      	lsrs	r1, r1, #1
 800796c:	2000      	movs	r0, #0
 800796e:	460c      	mov	r4, r1
 8007970:	4605      	mov	r5, r0
 8007972:	eb12 0804 	adds.w	r8, r2, r4
 8007976:	eb43 0905 	adc.w	r9, r3, r5
 800797a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	60bb      	str	r3, [r7, #8]
 8007982:	60fa      	str	r2, [r7, #12]
 8007984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007988:	4640      	mov	r0, r8
 800798a:	4649      	mov	r1, r9
 800798c:	f7f8 fc74 	bl	8000278 <__aeabi_uldivmod>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	4613      	mov	r3, r2
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800799a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800799e:	d308      	bcc.n	80079b2 <UART_SetConfig+0x206>
 80079a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079a6:	d204      	bcs.n	80079b2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80079a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80079ae:	60da      	str	r2, [r3, #12]
 80079b0:	e003      	b.n	80079ba <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80079b8:	e082      	b.n	8007ac0 <UART_SetConfig+0x314>
 80079ba:	e081      	b.n	8007ac0 <UART_SetConfig+0x314>
 80079bc:	46002400 	.word	0x46002400
 80079c0:	cfff69f3 	.word	0xcfff69f3
 80079c4:	56002400 	.word	0x56002400
 80079c8:	40013800 	.word	0x40013800
 80079cc:	40004400 	.word	0x40004400
 80079d0:	40004800 	.word	0x40004800
 80079d4:	40004c00 	.word	0x40004c00
 80079d8:	40005000 	.word	0x40005000
 80079dc:	080125bc 	.word	0x080125bc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079e8:	d13c      	bne.n	8007a64 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80079ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079ec:	2200      	movs	r2, #0
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079f6:	f7fd ff3b 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 80079fa:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d05e      	beq.n	8007ac0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	4a39      	ldr	r2, [pc, #228]	@ (8007aec <UART_SetConfig+0x340>)
 8007a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a14:	005a      	lsls	r2, r3, #1
 8007a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	441a      	add	r2, r3
 8007a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d916      	bls.n	8007a5c <UART_SetConfig+0x2b0>
 8007a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a34:	d212      	bcs.n	8007a5c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f023 030f 	bic.w	r3, r3, #15
 8007a3e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8007a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8007a58:	60da      	str	r2, [r3, #12]
 8007a5a:	e031      	b.n	8007ac0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007a62:	e02d      	b.n	8007ac0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a66:	2200      	movs	r2, #0
 8007a68:	469a      	mov	sl, r3
 8007a6a:	4693      	mov	fp, r2
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	4659      	mov	r1, fp
 8007a70:	f7fd fefe 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a74:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8007a76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d021      	beq.n	8007ac0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a80:	4a1a      	ldr	r2, [pc, #104]	@ (8007aec <UART_SetConfig+0x340>)
 8007a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	085b      	lsrs	r3, r3, #1
 8007a94:	441a      	add	r2, r3
 8007a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa2:	2b0f      	cmp	r3, #15
 8007aa4:	d909      	bls.n	8007aba <UART_SetConfig+0x30e>
 8007aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aac:	d205      	bcs.n	8007aba <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab0:	b29a      	uxth	r2, r3
 8007ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60da      	str	r2, [r3, #12]
 8007ab8:	e002      	b.n	8007ac0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	2201      	movs	r2, #1
 8007acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ad8:	2200      	movs	r2, #0
 8007ada:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007adc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3750      	adds	r7, #80	@ 0x50
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aea:	bf00      	nop
 8007aec:	080125bc 	.word	0x080125bc

08007af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00a      	beq.n	8007b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00a      	beq.n	8007b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00a      	beq.n	8007b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00a      	beq.n	8007b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b84:	f003 0310 	and.w	r3, r3, #16
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00a      	beq.n	8007ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	f003 0320 	and.w	r3, r3, #32
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00a      	beq.n	8007bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01a      	beq.n	8007c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007bee:	d10a      	bne.n	8007c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00a      	beq.n	8007c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	605a      	str	r2, [r3, #4]
  }
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b098      	sub	sp, #96	@ 0x60
 8007c38:	af02      	add	r7, sp, #8
 8007c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c44:	f7f9 fdca 	bl	80017dc <HAL_GetTick>
 8007c48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b08      	cmp	r3, #8
 8007c56:	d12f      	bne.n	8007cb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007c5c:	9300      	str	r3, [sp, #0]
 8007c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c60:	2200      	movs	r2, #0
 8007c62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f88e 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d022      	beq.n	8007cb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7a:	e853 3f00 	ldrex	r3, [r3]
 8007c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c98:	e841 2300 	strex	r3, r2, [r1]
 8007c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1e6      	bne.n	8007c72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e063      	b.n	8007d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0304 	and.w	r3, r3, #4
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	d149      	bne.n	8007d5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f857 	bl	8007d88 <UART_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d03c      	beq.n	8007d5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	e853 3f00 	ldrex	r3, [r3]
 8007cec:	623b      	str	r3, [r7, #32]
   return(result);
 8007cee:	6a3b      	ldr	r3, [r7, #32]
 8007cf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cfe:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d06:	e841 2300 	strex	r3, r2, [r1]
 8007d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1e6      	bne.n	8007ce0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	3308      	adds	r3, #8
 8007d18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	e853 3f00 	ldrex	r3, [r3]
 8007d20:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f023 0301 	bic.w	r3, r3, #1
 8007d28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d32:	61fa      	str	r2, [r7, #28]
 8007d34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	69b9      	ldr	r1, [r7, #24]
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	617b      	str	r3, [r7, #20]
   return(result);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e5      	bne.n	8007d12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e012      	b.n	8007d80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3758      	adds	r7, #88	@ 0x58
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	603b      	str	r3, [r7, #0]
 8007d94:	4613      	mov	r3, r2
 8007d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d98:	e04f      	b.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da0:	d04b      	beq.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da2:	f7f9 fd1b 	bl	80017dc <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d302      	bcc.n	8007db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e04e      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d037      	beq.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b80      	cmp	r3, #128	@ 0x80
 8007dce:	d034      	beq.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b40      	cmp	r3, #64	@ 0x40
 8007dd4:	d031      	beq.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
 8007de0:	2b08      	cmp	r3, #8
 8007de2:	d110      	bne.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2208      	movs	r2, #8
 8007dea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 f838 	bl	8007e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2208      	movs	r2, #8
 8007df6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e029      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e14:	d111      	bne.n	8007e3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f000 f81e 	bl	8007e62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2220      	movs	r2, #32
 8007e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e00f      	b.n	8007e5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4013      	ands	r3, r2
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	bf0c      	ite	eq
 8007e4a:	2301      	moveq	r3, #1
 8007e4c:	2300      	movne	r3, #0
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	461a      	mov	r2, r3
 8007e52:	79fb      	ldrb	r3, [r7, #7]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d0a0      	beq.n	8007d9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b095      	sub	sp, #84	@ 0x54
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e6      	bne.n	8007e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	e853 3f00 	ldrex	r3, [r3]
 8007eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ec0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ec6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ec8:	e841 2300 	strex	r3, r2, [r1]
 8007ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e3      	bne.n	8007e9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d118      	bne.n	8007f0e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	e853 3f00 	ldrex	r3, [r3]
 8007ee8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f023 0310 	bic.w	r3, r3, #16
 8007ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	613b      	str	r3, [r7, #16]
   return(result);
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d1e6      	bne.n	8007edc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2220      	movs	r2, #32
 8007f12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007f22:	bf00      	nop
 8007f24:	3754      	adds	r7, #84	@ 0x54
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
	...

08007f30 <malloc>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	@ (8007f3c <malloc+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f000 b82d 	b.w	8007f94 <_malloc_r>
 8007f3a:	bf00      	nop
 8007f3c:	20000038 	.word	0x20000038

08007f40 <free>:
 8007f40:	4b02      	ldr	r3, [pc, #8]	@ (8007f4c <free+0xc>)
 8007f42:	4601      	mov	r1, r0
 8007f44:	6818      	ldr	r0, [r3, #0]
 8007f46:	f000 bb5b 	b.w	8008600 <_free_r>
 8007f4a:	bf00      	nop
 8007f4c:	20000038 	.word	0x20000038

08007f50 <sbrk_aligned>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4e0f      	ldr	r6, [pc, #60]	@ (8007f90 <sbrk_aligned+0x40>)
 8007f54:	460c      	mov	r4, r1
 8007f56:	4605      	mov	r5, r0
 8007f58:	6831      	ldr	r1, [r6, #0]
 8007f5a:	b911      	cbnz	r1, 8007f62 <sbrk_aligned+0x12>
 8007f5c:	f000 faf4 	bl	8008548 <_sbrk_r>
 8007f60:	6030      	str	r0, [r6, #0]
 8007f62:	4621      	mov	r1, r4
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 faef 	bl	8008548 <_sbrk_r>
 8007f6a:	1c43      	adds	r3, r0, #1
 8007f6c:	d103      	bne.n	8007f76 <sbrk_aligned+0x26>
 8007f6e:	f04f 34ff 	mov.w	r4, #4294967295
 8007f72:	4620      	mov	r0, r4
 8007f74:	bd70      	pop	{r4, r5, r6, pc}
 8007f76:	1cc4      	adds	r4, r0, #3
 8007f78:	f024 0403 	bic.w	r4, r4, #3
 8007f7c:	42a0      	cmp	r0, r4
 8007f7e:	d0f8      	beq.n	8007f72 <sbrk_aligned+0x22>
 8007f80:	1a21      	subs	r1, r4, r0
 8007f82:	4628      	mov	r0, r5
 8007f84:	f000 fae0 	bl	8008548 <_sbrk_r>
 8007f88:	3001      	adds	r0, #1
 8007f8a:	d1f2      	bne.n	8007f72 <sbrk_aligned+0x22>
 8007f8c:	e7ef      	b.n	8007f6e <sbrk_aligned+0x1e>
 8007f8e:	bf00      	nop
 8007f90:	2000022c 	.word	0x2000022c

08007f94 <_malloc_r>:
 8007f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f98:	1ccd      	adds	r5, r1, #3
 8007f9a:	4606      	mov	r6, r0
 8007f9c:	f025 0503 	bic.w	r5, r5, #3
 8007fa0:	3508      	adds	r5, #8
 8007fa2:	2d0c      	cmp	r5, #12
 8007fa4:	bf38      	it	cc
 8007fa6:	250c      	movcc	r5, #12
 8007fa8:	2d00      	cmp	r5, #0
 8007faa:	db01      	blt.n	8007fb0 <_malloc_r+0x1c>
 8007fac:	42a9      	cmp	r1, r5
 8007fae:	d904      	bls.n	8007fba <_malloc_r+0x26>
 8007fb0:	230c      	movs	r3, #12
 8007fb2:	6033      	str	r3, [r6, #0]
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008090 <_malloc_r+0xfc>
 8007fbe:	f000 f869 	bl	8008094 <__malloc_lock>
 8007fc2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc6:	461c      	mov	r4, r3
 8007fc8:	bb44      	cbnz	r4, 800801c <_malloc_r+0x88>
 8007fca:	4629      	mov	r1, r5
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7ff ffbf 	bl	8007f50 <sbrk_aligned>
 8007fd2:	1c43      	adds	r3, r0, #1
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	d158      	bne.n	800808a <_malloc_r+0xf6>
 8007fd8:	f8d8 4000 	ldr.w	r4, [r8]
 8007fdc:	4627      	mov	r7, r4
 8007fde:	2f00      	cmp	r7, #0
 8007fe0:	d143      	bne.n	800806a <_malloc_r+0xd6>
 8007fe2:	2c00      	cmp	r4, #0
 8007fe4:	d04b      	beq.n	800807e <_malloc_r+0xea>
 8007fe6:	6823      	ldr	r3, [r4, #0]
 8007fe8:	4639      	mov	r1, r7
 8007fea:	4630      	mov	r0, r6
 8007fec:	eb04 0903 	add.w	r9, r4, r3
 8007ff0:	f000 faaa 	bl	8008548 <_sbrk_r>
 8007ff4:	4581      	cmp	r9, r0
 8007ff6:	d142      	bne.n	800807e <_malloc_r+0xea>
 8007ff8:	6821      	ldr	r1, [r4, #0]
 8007ffa:	4630      	mov	r0, r6
 8007ffc:	1a6d      	subs	r5, r5, r1
 8007ffe:	4629      	mov	r1, r5
 8008000:	f7ff ffa6 	bl	8007f50 <sbrk_aligned>
 8008004:	3001      	adds	r0, #1
 8008006:	d03a      	beq.n	800807e <_malloc_r+0xea>
 8008008:	6823      	ldr	r3, [r4, #0]
 800800a:	442b      	add	r3, r5
 800800c:	6023      	str	r3, [r4, #0]
 800800e:	f8d8 3000 	ldr.w	r3, [r8]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	bb62      	cbnz	r2, 8008070 <_malloc_r+0xdc>
 8008016:	f8c8 7000 	str.w	r7, [r8]
 800801a:	e00f      	b.n	800803c <_malloc_r+0xa8>
 800801c:	6822      	ldr	r2, [r4, #0]
 800801e:	1b52      	subs	r2, r2, r5
 8008020:	d420      	bmi.n	8008064 <_malloc_r+0xd0>
 8008022:	2a0b      	cmp	r2, #11
 8008024:	d917      	bls.n	8008056 <_malloc_r+0xc2>
 8008026:	1961      	adds	r1, r4, r5
 8008028:	42a3      	cmp	r3, r4
 800802a:	6025      	str	r5, [r4, #0]
 800802c:	bf18      	it	ne
 800802e:	6059      	strne	r1, [r3, #4]
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	bf08      	it	eq
 8008034:	f8c8 1000 	streq.w	r1, [r8]
 8008038:	5162      	str	r2, [r4, r5]
 800803a:	604b      	str	r3, [r1, #4]
 800803c:	4630      	mov	r0, r6
 800803e:	f000 f82f 	bl	80080a0 <__malloc_unlock>
 8008042:	f104 000b 	add.w	r0, r4, #11
 8008046:	1d23      	adds	r3, r4, #4
 8008048:	f020 0007 	bic.w	r0, r0, #7
 800804c:	1ac2      	subs	r2, r0, r3
 800804e:	bf1c      	itt	ne
 8008050:	1a1b      	subne	r3, r3, r0
 8008052:	50a3      	strne	r3, [r4, r2]
 8008054:	e7af      	b.n	8007fb6 <_malloc_r+0x22>
 8008056:	6862      	ldr	r2, [r4, #4]
 8008058:	42a3      	cmp	r3, r4
 800805a:	bf0c      	ite	eq
 800805c:	f8c8 2000 	streq.w	r2, [r8]
 8008060:	605a      	strne	r2, [r3, #4]
 8008062:	e7eb      	b.n	800803c <_malloc_r+0xa8>
 8008064:	4623      	mov	r3, r4
 8008066:	6864      	ldr	r4, [r4, #4]
 8008068:	e7ae      	b.n	8007fc8 <_malloc_r+0x34>
 800806a:	463c      	mov	r4, r7
 800806c:	687f      	ldr	r7, [r7, #4]
 800806e:	e7b6      	b.n	8007fde <_malloc_r+0x4a>
 8008070:	461a      	mov	r2, r3
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	42a3      	cmp	r3, r4
 8008076:	d1fb      	bne.n	8008070 <_malloc_r+0xdc>
 8008078:	2300      	movs	r3, #0
 800807a:	6053      	str	r3, [r2, #4]
 800807c:	e7de      	b.n	800803c <_malloc_r+0xa8>
 800807e:	230c      	movs	r3, #12
 8008080:	4630      	mov	r0, r6
 8008082:	6033      	str	r3, [r6, #0]
 8008084:	f000 f80c 	bl	80080a0 <__malloc_unlock>
 8008088:	e794      	b.n	8007fb4 <_malloc_r+0x20>
 800808a:	6005      	str	r5, [r0, #0]
 800808c:	e7d6      	b.n	800803c <_malloc_r+0xa8>
 800808e:	bf00      	nop
 8008090:	20000230 	.word	0x20000230

08008094 <__malloc_lock>:
 8008094:	4801      	ldr	r0, [pc, #4]	@ (800809c <__malloc_lock+0x8>)
 8008096:	f000 baa4 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 800809a:	bf00      	nop
 800809c:	20000374 	.word	0x20000374

080080a0 <__malloc_unlock>:
 80080a0:	4801      	ldr	r0, [pc, #4]	@ (80080a8 <__malloc_unlock+0x8>)
 80080a2:	f000 ba9f 	b.w	80085e4 <__retarget_lock_release_recursive>
 80080a6:	bf00      	nop
 80080a8:	20000374 	.word	0x20000374

080080ac <std>:
 80080ac:	2300      	movs	r3, #0
 80080ae:	b510      	push	{r4, lr}
 80080b0:	4604      	mov	r4, r0
 80080b2:	6083      	str	r3, [r0, #8]
 80080b4:	8181      	strh	r1, [r0, #12]
 80080b6:	4619      	mov	r1, r3
 80080b8:	6643      	str	r3, [r0, #100]	@ 0x64
 80080ba:	81c2      	strh	r2, [r0, #14]
 80080bc:	2208      	movs	r2, #8
 80080be:	6183      	str	r3, [r0, #24]
 80080c0:	e9c0 3300 	strd	r3, r3, [r0]
 80080c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080c8:	305c      	adds	r0, #92	@ 0x5c
 80080ca:	f000 fa01 	bl	80084d0 <memset>
 80080ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <std+0x58>)
 80080d0:	6224      	str	r4, [r4, #32]
 80080d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80080d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <std+0x5c>)
 80080d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080d8:	4b0c      	ldr	r3, [pc, #48]	@ (800810c <std+0x60>)
 80080da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008110 <std+0x64>)
 80080de:	6323      	str	r3, [r4, #48]	@ 0x30
 80080e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008114 <std+0x68>)
 80080e2:	429c      	cmp	r4, r3
 80080e4:	d006      	beq.n	80080f4 <std+0x48>
 80080e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080ea:	4294      	cmp	r4, r2
 80080ec:	d002      	beq.n	80080f4 <std+0x48>
 80080ee:	33d0      	adds	r3, #208	@ 0xd0
 80080f0:	429c      	cmp	r4, r3
 80080f2:	d105      	bne.n	8008100 <std+0x54>
 80080f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080fc:	f000 ba70 	b.w	80085e0 <__retarget_lock_init_recursive>
 8008100:	bd10      	pop	{r4, pc}
 8008102:	bf00      	nop
 8008104:	08008321 	.word	0x08008321
 8008108:	08008343 	.word	0x08008343
 800810c:	0800837b 	.word	0x0800837b
 8008110:	0800839f 	.word	0x0800839f
 8008114:	20000234 	.word	0x20000234

08008118 <stdio_exit_handler>:
 8008118:	4a02      	ldr	r2, [pc, #8]	@ (8008124 <stdio_exit_handler+0xc>)
 800811a:	4903      	ldr	r1, [pc, #12]	@ (8008128 <stdio_exit_handler+0x10>)
 800811c:	4803      	ldr	r0, [pc, #12]	@ (800812c <stdio_exit_handler+0x14>)
 800811e:	f000 b869 	b.w	80081f4 <_fwalk_sglue>
 8008122:	bf00      	nop
 8008124:	2000002c 	.word	0x2000002c
 8008128:	08008d45 	.word	0x08008d45
 800812c:	2000003c 	.word	0x2000003c

08008130 <cleanup_stdio>:
 8008130:	6841      	ldr	r1, [r0, #4]
 8008132:	4b0c      	ldr	r3, [pc, #48]	@ (8008164 <cleanup_stdio+0x34>)
 8008134:	4299      	cmp	r1, r3
 8008136:	b510      	push	{r4, lr}
 8008138:	4604      	mov	r4, r0
 800813a:	d001      	beq.n	8008140 <cleanup_stdio+0x10>
 800813c:	f000 fe02 	bl	8008d44 <_fflush_r>
 8008140:	68a1      	ldr	r1, [r4, #8]
 8008142:	4b09      	ldr	r3, [pc, #36]	@ (8008168 <cleanup_stdio+0x38>)
 8008144:	4299      	cmp	r1, r3
 8008146:	d002      	beq.n	800814e <cleanup_stdio+0x1e>
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fdfb 	bl	8008d44 <_fflush_r>
 800814e:	68e1      	ldr	r1, [r4, #12]
 8008150:	4b06      	ldr	r3, [pc, #24]	@ (800816c <cleanup_stdio+0x3c>)
 8008152:	4299      	cmp	r1, r3
 8008154:	d004      	beq.n	8008160 <cleanup_stdio+0x30>
 8008156:	4620      	mov	r0, r4
 8008158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800815c:	f000 bdf2 	b.w	8008d44 <_fflush_r>
 8008160:	bd10      	pop	{r4, pc}
 8008162:	bf00      	nop
 8008164:	20000234 	.word	0x20000234
 8008168:	2000029c 	.word	0x2000029c
 800816c:	20000304 	.word	0x20000304

08008170 <global_stdio_init.part.0>:
 8008170:	b510      	push	{r4, lr}
 8008172:	4b0b      	ldr	r3, [pc, #44]	@ (80081a0 <global_stdio_init.part.0+0x30>)
 8008174:	2104      	movs	r1, #4
 8008176:	4c0b      	ldr	r4, [pc, #44]	@ (80081a4 <global_stdio_init.part.0+0x34>)
 8008178:	4a0b      	ldr	r2, [pc, #44]	@ (80081a8 <global_stdio_init.part.0+0x38>)
 800817a:	4620      	mov	r0, r4
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	2200      	movs	r2, #0
 8008180:	f7ff ff94 	bl	80080ac <std>
 8008184:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008188:	2201      	movs	r2, #1
 800818a:	2109      	movs	r1, #9
 800818c:	f7ff ff8e 	bl	80080ac <std>
 8008190:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008194:	2202      	movs	r2, #2
 8008196:	2112      	movs	r1, #18
 8008198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800819c:	f7ff bf86 	b.w	80080ac <std>
 80081a0:	2000036c 	.word	0x2000036c
 80081a4:	20000234 	.word	0x20000234
 80081a8:	08008119 	.word	0x08008119

080081ac <__sfp_lock_acquire>:
 80081ac:	4801      	ldr	r0, [pc, #4]	@ (80081b4 <__sfp_lock_acquire+0x8>)
 80081ae:	f000 ba18 	b.w	80085e2 <__retarget_lock_acquire_recursive>
 80081b2:	bf00      	nop
 80081b4:	20000375 	.word	0x20000375

080081b8 <__sfp_lock_release>:
 80081b8:	4801      	ldr	r0, [pc, #4]	@ (80081c0 <__sfp_lock_release+0x8>)
 80081ba:	f000 ba13 	b.w	80085e4 <__retarget_lock_release_recursive>
 80081be:	bf00      	nop
 80081c0:	20000375 	.word	0x20000375

080081c4 <__sinit>:
 80081c4:	b510      	push	{r4, lr}
 80081c6:	4604      	mov	r4, r0
 80081c8:	f7ff fff0 	bl	80081ac <__sfp_lock_acquire>
 80081cc:	6a23      	ldr	r3, [r4, #32]
 80081ce:	b11b      	cbz	r3, 80081d8 <__sinit+0x14>
 80081d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d4:	f7ff bff0 	b.w	80081b8 <__sfp_lock_release>
 80081d8:	4b04      	ldr	r3, [pc, #16]	@ (80081ec <__sinit+0x28>)
 80081da:	6223      	str	r3, [r4, #32]
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <__sinit+0x2c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d1f5      	bne.n	80081d0 <__sinit+0xc>
 80081e4:	f7ff ffc4 	bl	8008170 <global_stdio_init.part.0>
 80081e8:	e7f2      	b.n	80081d0 <__sinit+0xc>
 80081ea:	bf00      	nop
 80081ec:	08008131 	.word	0x08008131
 80081f0:	2000036c 	.word	0x2000036c

080081f4 <_fwalk_sglue>:
 80081f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081f8:	4607      	mov	r7, r0
 80081fa:	4688      	mov	r8, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	2600      	movs	r6, #0
 8008200:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008204:	f1b9 0901 	subs.w	r9, r9, #1
 8008208:	d505      	bpl.n	8008216 <_fwalk_sglue+0x22>
 800820a:	6824      	ldr	r4, [r4, #0]
 800820c:	2c00      	cmp	r4, #0
 800820e:	d1f7      	bne.n	8008200 <_fwalk_sglue+0xc>
 8008210:	4630      	mov	r0, r6
 8008212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d907      	bls.n	800822c <_fwalk_sglue+0x38>
 800821c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008220:	3301      	adds	r3, #1
 8008222:	d003      	beq.n	800822c <_fwalk_sglue+0x38>
 8008224:	4629      	mov	r1, r5
 8008226:	4638      	mov	r0, r7
 8008228:	47c0      	blx	r8
 800822a:	4306      	orrs	r6, r0
 800822c:	3568      	adds	r5, #104	@ 0x68
 800822e:	e7e9      	b.n	8008204 <_fwalk_sglue+0x10>

08008230 <iprintf>:
 8008230:	b40f      	push	{r0, r1, r2, r3}
 8008232:	b507      	push	{r0, r1, r2, lr}
 8008234:	4906      	ldr	r1, [pc, #24]	@ (8008250 <iprintf+0x20>)
 8008236:	ab04      	add	r3, sp, #16
 8008238:	6808      	ldr	r0, [r1, #0]
 800823a:	f853 2b04 	ldr.w	r2, [r3], #4
 800823e:	6881      	ldr	r1, [r0, #8]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f000 fa51 	bl	80086e8 <_vfiprintf_r>
 8008246:	b003      	add	sp, #12
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b004      	add	sp, #16
 800824e:	4770      	bx	lr
 8008250:	20000038 	.word	0x20000038

08008254 <putchar>:
 8008254:	4b02      	ldr	r3, [pc, #8]	@ (8008260 <putchar+0xc>)
 8008256:	4601      	mov	r1, r0
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	6882      	ldr	r2, [r0, #8]
 800825c:	f000 bdfb 	b.w	8008e56 <_putc_r>
 8008260:	20000038 	.word	0x20000038

08008264 <_puts_r>:
 8008264:	6a03      	ldr	r3, [r0, #32]
 8008266:	b570      	push	{r4, r5, r6, lr}
 8008268:	4605      	mov	r5, r0
 800826a:	460e      	mov	r6, r1
 800826c:	6884      	ldr	r4, [r0, #8]
 800826e:	b90b      	cbnz	r3, 8008274 <_puts_r+0x10>
 8008270:	f7ff ffa8 	bl	80081c4 <__sinit>
 8008274:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008276:	07db      	lsls	r3, r3, #31
 8008278:	d405      	bmi.n	8008286 <_puts_r+0x22>
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	0598      	lsls	r0, r3, #22
 800827e:	d402      	bmi.n	8008286 <_puts_r+0x22>
 8008280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008282:	f000 f9ae 	bl	80085e2 <__retarget_lock_acquire_recursive>
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	0719      	lsls	r1, r3, #28
 800828a:	d502      	bpl.n	8008292 <_puts_r+0x2e>
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d135      	bne.n	80082fe <_puts_r+0x9a>
 8008292:	4621      	mov	r1, r4
 8008294:	4628      	mov	r0, r5
 8008296:	f000 f8c5 	bl	8008424 <__swsetup_r>
 800829a:	b380      	cbz	r0, 80082fe <_puts_r+0x9a>
 800829c:	f04f 35ff 	mov.w	r5, #4294967295
 80082a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082a2:	07da      	lsls	r2, r3, #31
 80082a4:	d405      	bmi.n	80082b2 <_puts_r+0x4e>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	059b      	lsls	r3, r3, #22
 80082aa:	d402      	bmi.n	80082b2 <_puts_r+0x4e>
 80082ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ae:	f000 f999 	bl	80085e4 <__retarget_lock_release_recursive>
 80082b2:	4628      	mov	r0, r5
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	da04      	bge.n	80082c4 <_puts_r+0x60>
 80082ba:	69a2      	ldr	r2, [r4, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	dc17      	bgt.n	80082f0 <_puts_r+0x8c>
 80082c0:	290a      	cmp	r1, #10
 80082c2:	d015      	beq.n	80082f0 <_puts_r+0x8c>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	6022      	str	r2, [r4, #0]
 80082ca:	7019      	strb	r1, [r3, #0]
 80082cc:	68a3      	ldr	r3, [r4, #8]
 80082ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082d2:	3b01      	subs	r3, #1
 80082d4:	60a3      	str	r3, [r4, #8]
 80082d6:	2900      	cmp	r1, #0
 80082d8:	d1ed      	bne.n	80082b6 <_puts_r+0x52>
 80082da:	2b00      	cmp	r3, #0
 80082dc:	da11      	bge.n	8008302 <_puts_r+0x9e>
 80082de:	4622      	mov	r2, r4
 80082e0:	210a      	movs	r1, #10
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f85f 	bl	80083a6 <__swbuf_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d0d7      	beq.n	800829c <_puts_r+0x38>
 80082ec:	250a      	movs	r5, #10
 80082ee:	e7d7      	b.n	80082a0 <_puts_r+0x3c>
 80082f0:	4622      	mov	r2, r4
 80082f2:	4628      	mov	r0, r5
 80082f4:	f000 f857 	bl	80083a6 <__swbuf_r>
 80082f8:	3001      	adds	r0, #1
 80082fa:	d1e7      	bne.n	80082cc <_puts_r+0x68>
 80082fc:	e7ce      	b.n	800829c <_puts_r+0x38>
 80082fe:	3e01      	subs	r6, #1
 8008300:	e7e4      	b.n	80082cc <_puts_r+0x68>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	1c5a      	adds	r2, r3, #1
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	220a      	movs	r2, #10
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	e7ee      	b.n	80082ec <_puts_r+0x88>
	...

08008310 <puts>:
 8008310:	4b02      	ldr	r3, [pc, #8]	@ (800831c <puts+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f7ff bfa5 	b.w	8008264 <_puts_r>
 800831a:	bf00      	nop
 800831c:	20000038 	.word	0x20000038

08008320 <__sread>:
 8008320:	b510      	push	{r4, lr}
 8008322:	460c      	mov	r4, r1
 8008324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008328:	f000 f8fc 	bl	8008524 <_read_r>
 800832c:	2800      	cmp	r0, #0
 800832e:	bfab      	itete	ge
 8008330:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008332:	89a3      	ldrhlt	r3, [r4, #12]
 8008334:	181b      	addge	r3, r3, r0
 8008336:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800833a:	bfac      	ite	ge
 800833c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800833e:	81a3      	strhlt	r3, [r4, #12]
 8008340:	bd10      	pop	{r4, pc}

08008342 <__swrite>:
 8008342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008346:	461f      	mov	r7, r3
 8008348:	898b      	ldrh	r3, [r1, #12]
 800834a:	4605      	mov	r5, r0
 800834c:	460c      	mov	r4, r1
 800834e:	05db      	lsls	r3, r3, #23
 8008350:	4616      	mov	r6, r2
 8008352:	d505      	bpl.n	8008360 <__swrite+0x1e>
 8008354:	2302      	movs	r3, #2
 8008356:	2200      	movs	r2, #0
 8008358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835c:	f000 f8d0 	bl	8008500 <_lseek_r>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	4632      	mov	r2, r6
 8008364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008368:	4628      	mov	r0, r5
 800836a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	463b      	mov	r3, r7
 8008372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	f000 b8f7 	b.w	8008568 <_write_r>

0800837a <__sseek>:
 800837a:	b510      	push	{r4, lr}
 800837c:	460c      	mov	r4, r1
 800837e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008382:	f000 f8bd 	bl	8008500 <_lseek_r>
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	bf15      	itete	ne
 800838c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800838e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008392:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008396:	81a3      	strheq	r3, [r4, #12]
 8008398:	bf18      	it	ne
 800839a:	81a3      	strhne	r3, [r4, #12]
 800839c:	bd10      	pop	{r4, pc}

0800839e <__sclose>:
 800839e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a2:	f000 b89d 	b.w	80084e0 <_close_r>

080083a6 <__swbuf_r>:
 80083a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a8:	460e      	mov	r6, r1
 80083aa:	4614      	mov	r4, r2
 80083ac:	4605      	mov	r5, r0
 80083ae:	b118      	cbz	r0, 80083b8 <__swbuf_r+0x12>
 80083b0:	6a03      	ldr	r3, [r0, #32]
 80083b2:	b90b      	cbnz	r3, 80083b8 <__swbuf_r+0x12>
 80083b4:	f7ff ff06 	bl	80081c4 <__sinit>
 80083b8:	69a3      	ldr	r3, [r4, #24]
 80083ba:	60a3      	str	r3, [r4, #8]
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	071a      	lsls	r2, r3, #28
 80083c0:	d501      	bpl.n	80083c6 <__swbuf_r+0x20>
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	b943      	cbnz	r3, 80083d8 <__swbuf_r+0x32>
 80083c6:	4621      	mov	r1, r4
 80083c8:	4628      	mov	r0, r5
 80083ca:	f000 f82b 	bl	8008424 <__swsetup_r>
 80083ce:	b118      	cbz	r0, 80083d8 <__swbuf_r+0x32>
 80083d0:	f04f 37ff 	mov.w	r7, #4294967295
 80083d4:	4638      	mov	r0, r7
 80083d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d8:	6823      	ldr	r3, [r4, #0]
 80083da:	b2f6      	uxtb	r6, r6
 80083dc:	6922      	ldr	r2, [r4, #16]
 80083de:	4637      	mov	r7, r6
 80083e0:	1a98      	subs	r0, r3, r2
 80083e2:	6963      	ldr	r3, [r4, #20]
 80083e4:	4283      	cmp	r3, r0
 80083e6:	dc05      	bgt.n	80083f4 <__swbuf_r+0x4e>
 80083e8:	4621      	mov	r1, r4
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 fcaa 	bl	8008d44 <_fflush_r>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d1ed      	bne.n	80083d0 <__swbuf_r+0x2a>
 80083f4:	68a3      	ldr	r3, [r4, #8]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	60a3      	str	r3, [r4, #8]
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	1c5a      	adds	r2, r3, #1
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	701e      	strb	r6, [r3, #0]
 8008402:	1c43      	adds	r3, r0, #1
 8008404:	6962      	ldr	r2, [r4, #20]
 8008406:	429a      	cmp	r2, r3
 8008408:	d004      	beq.n	8008414 <__swbuf_r+0x6e>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	07db      	lsls	r3, r3, #31
 800840e:	d5e1      	bpl.n	80083d4 <__swbuf_r+0x2e>
 8008410:	2e0a      	cmp	r6, #10
 8008412:	d1df      	bne.n	80083d4 <__swbuf_r+0x2e>
 8008414:	4621      	mov	r1, r4
 8008416:	4628      	mov	r0, r5
 8008418:	f000 fc94 	bl	8008d44 <_fflush_r>
 800841c:	2800      	cmp	r0, #0
 800841e:	d0d9      	beq.n	80083d4 <__swbuf_r+0x2e>
 8008420:	e7d6      	b.n	80083d0 <__swbuf_r+0x2a>
	...

08008424 <__swsetup_r>:
 8008424:	b538      	push	{r3, r4, r5, lr}
 8008426:	4b29      	ldr	r3, [pc, #164]	@ (80084cc <__swsetup_r+0xa8>)
 8008428:	4605      	mov	r5, r0
 800842a:	460c      	mov	r4, r1
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	b118      	cbz	r0, 8008438 <__swsetup_r+0x14>
 8008430:	6a03      	ldr	r3, [r0, #32]
 8008432:	b90b      	cbnz	r3, 8008438 <__swsetup_r+0x14>
 8008434:	f7ff fec6 	bl	80081c4 <__sinit>
 8008438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843c:	0719      	lsls	r1, r3, #28
 800843e:	d422      	bmi.n	8008486 <__swsetup_r+0x62>
 8008440:	06da      	lsls	r2, r3, #27
 8008442:	d407      	bmi.n	8008454 <__swsetup_r+0x30>
 8008444:	2209      	movs	r2, #9
 8008446:	602a      	str	r2, [r5, #0]
 8008448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	e033      	b.n	80084bc <__swsetup_r+0x98>
 8008454:	0758      	lsls	r0, r3, #29
 8008456:	d512      	bpl.n	800847e <__swsetup_r+0x5a>
 8008458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800845a:	b141      	cbz	r1, 800846e <__swsetup_r+0x4a>
 800845c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008460:	4299      	cmp	r1, r3
 8008462:	d002      	beq.n	800846a <__swsetup_r+0x46>
 8008464:	4628      	mov	r0, r5
 8008466:	f000 f8cb 	bl	8008600 <_free_r>
 800846a:	2300      	movs	r3, #0
 800846c:	6363      	str	r3, [r4, #52]	@ 0x34
 800846e:	89a3      	ldrh	r3, [r4, #12]
 8008470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008474:	81a3      	strh	r3, [r4, #12]
 8008476:	2300      	movs	r3, #0
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f043 0308 	orr.w	r3, r3, #8
 8008484:	81a3      	strh	r3, [r4, #12]
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	b94b      	cbnz	r3, 800849e <__swsetup_r+0x7a>
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008494:	d003      	beq.n	800849e <__swsetup_r+0x7a>
 8008496:	4621      	mov	r1, r4
 8008498:	4628      	mov	r0, r5
 800849a:	f000 fca0 	bl	8008dde <__smakebuf_r>
 800849e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a2:	f013 0201 	ands.w	r2, r3, #1
 80084a6:	d00a      	beq.n	80084be <__swsetup_r+0x9a>
 80084a8:	2200      	movs	r2, #0
 80084aa:	60a2      	str	r2, [r4, #8]
 80084ac:	6962      	ldr	r2, [r4, #20]
 80084ae:	4252      	negs	r2, r2
 80084b0:	61a2      	str	r2, [r4, #24]
 80084b2:	6922      	ldr	r2, [r4, #16]
 80084b4:	b942      	cbnz	r2, 80084c8 <__swsetup_r+0xa4>
 80084b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80084ba:	d1c5      	bne.n	8008448 <__swsetup_r+0x24>
 80084bc:	bd38      	pop	{r3, r4, r5, pc}
 80084be:	0799      	lsls	r1, r3, #30
 80084c0:	bf58      	it	pl
 80084c2:	6962      	ldrpl	r2, [r4, #20]
 80084c4:	60a2      	str	r2, [r4, #8]
 80084c6:	e7f4      	b.n	80084b2 <__swsetup_r+0x8e>
 80084c8:	2000      	movs	r0, #0
 80084ca:	e7f7      	b.n	80084bc <__swsetup_r+0x98>
 80084cc:	20000038 	.word	0x20000038

080084d0 <memset>:
 80084d0:	4402      	add	r2, r0
 80084d2:	4603      	mov	r3, r0
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d100      	bne.n	80084da <memset+0xa>
 80084d8:	4770      	bx	lr
 80084da:	f803 1b01 	strb.w	r1, [r3], #1
 80084de:	e7f9      	b.n	80084d4 <memset+0x4>

080084e0 <_close_r>:
 80084e0:	b538      	push	{r3, r4, r5, lr}
 80084e2:	2300      	movs	r3, #0
 80084e4:	4d05      	ldr	r5, [pc, #20]	@ (80084fc <_close_r+0x1c>)
 80084e6:	4604      	mov	r4, r0
 80084e8:	4608      	mov	r0, r1
 80084ea:	602b      	str	r3, [r5, #0]
 80084ec:	f7f8 fe13 	bl	8001116 <_close>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	d102      	bne.n	80084fa <_close_r+0x1a>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	b103      	cbz	r3, 80084fa <_close_r+0x1a>
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	20000370 	.word	0x20000370

08008500 <_lseek_r>:
 8008500:	b538      	push	{r3, r4, r5, lr}
 8008502:	4604      	mov	r4, r0
 8008504:	4d06      	ldr	r5, [pc, #24]	@ (8008520 <_lseek_r+0x20>)
 8008506:	4608      	mov	r0, r1
 8008508:	4611      	mov	r1, r2
 800850a:	2200      	movs	r2, #0
 800850c:	602a      	str	r2, [r5, #0]
 800850e:	461a      	mov	r2, r3
 8008510:	f7f8 fe28 	bl	8001164 <_lseek>
 8008514:	1c43      	adds	r3, r0, #1
 8008516:	d102      	bne.n	800851e <_lseek_r+0x1e>
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	b103      	cbz	r3, 800851e <_lseek_r+0x1e>
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	bd38      	pop	{r3, r4, r5, pc}
 8008520:	20000370 	.word	0x20000370

08008524 <_read_r>:
 8008524:	b538      	push	{r3, r4, r5, lr}
 8008526:	4604      	mov	r4, r0
 8008528:	4d06      	ldr	r5, [pc, #24]	@ (8008544 <_read_r+0x20>)
 800852a:	4608      	mov	r0, r1
 800852c:	4611      	mov	r1, r2
 800852e:	2200      	movs	r2, #0
 8008530:	602a      	str	r2, [r5, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	f7f8 fdb6 	bl	80010a4 <_read>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d102      	bne.n	8008542 <_read_r+0x1e>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	b103      	cbz	r3, 8008542 <_read_r+0x1e>
 8008540:	6023      	str	r3, [r4, #0]
 8008542:	bd38      	pop	{r3, r4, r5, pc}
 8008544:	20000370 	.word	0x20000370

08008548 <_sbrk_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	2300      	movs	r3, #0
 800854c:	4d05      	ldr	r5, [pc, #20]	@ (8008564 <_sbrk_r+0x1c>)
 800854e:	4604      	mov	r4, r0
 8008550:	4608      	mov	r0, r1
 8008552:	602b      	str	r3, [r5, #0]
 8008554:	f7f8 fe14 	bl	8001180 <_sbrk>
 8008558:	1c43      	adds	r3, r0, #1
 800855a:	d102      	bne.n	8008562 <_sbrk_r+0x1a>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	b103      	cbz	r3, 8008562 <_sbrk_r+0x1a>
 8008560:	6023      	str	r3, [r4, #0]
 8008562:	bd38      	pop	{r3, r4, r5, pc}
 8008564:	20000370 	.word	0x20000370

08008568 <_write_r>:
 8008568:	b538      	push	{r3, r4, r5, lr}
 800856a:	4604      	mov	r4, r0
 800856c:	4d06      	ldr	r5, [pc, #24]	@ (8008588 <_write_r+0x20>)
 800856e:	4608      	mov	r0, r1
 8008570:	4611      	mov	r1, r2
 8008572:	2200      	movs	r2, #0
 8008574:	602a      	str	r2, [r5, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	f7f8 fdb1 	bl	80010de <_write>
 800857c:	1c43      	adds	r3, r0, #1
 800857e:	d102      	bne.n	8008586 <_write_r+0x1e>
 8008580:	682b      	ldr	r3, [r5, #0]
 8008582:	b103      	cbz	r3, 8008586 <_write_r+0x1e>
 8008584:	6023      	str	r3, [r4, #0]
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	20000370 	.word	0x20000370

0800858c <__errno>:
 800858c:	4b01      	ldr	r3, [pc, #4]	@ (8008594 <__errno+0x8>)
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	20000038 	.word	0x20000038

08008598 <__libc_init_array>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	4d0d      	ldr	r5, [pc, #52]	@ (80085d0 <__libc_init_array+0x38>)
 800859c:	2600      	movs	r6, #0
 800859e:	4c0d      	ldr	r4, [pc, #52]	@ (80085d4 <__libc_init_array+0x3c>)
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	d109      	bne.n	80085bc <__libc_init_array+0x24>
 80085a8:	4d0b      	ldr	r5, [pc, #44]	@ (80085d8 <__libc_init_array+0x40>)
 80085aa:	2600      	movs	r6, #0
 80085ac:	4c0b      	ldr	r4, [pc, #44]	@ (80085dc <__libc_init_array+0x44>)
 80085ae:	f000 fcb7 	bl	8008f20 <_init>
 80085b2:	1b64      	subs	r4, r4, r5
 80085b4:	10a4      	asrs	r4, r4, #2
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	d105      	bne.n	80085c6 <__libc_init_array+0x2e>
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c0:	3601      	adds	r6, #1
 80085c2:	4798      	blx	r3
 80085c4:	e7ee      	b.n	80085a4 <__libc_init_array+0xc>
 80085c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ca:	3601      	adds	r6, #1
 80085cc:	4798      	blx	r3
 80085ce:	e7f2      	b.n	80085b6 <__libc_init_array+0x1e>
 80085d0:	08012610 	.word	0x08012610
 80085d4:	08012610 	.word	0x08012610
 80085d8:	08012610 	.word	0x08012610
 80085dc:	08012614 	.word	0x08012614

080085e0 <__retarget_lock_init_recursive>:
 80085e0:	4770      	bx	lr

080085e2 <__retarget_lock_acquire_recursive>:
 80085e2:	4770      	bx	lr

080085e4 <__retarget_lock_release_recursive>:
 80085e4:	4770      	bx	lr

080085e6 <memcpy>:
 80085e6:	440a      	add	r2, r1
 80085e8:	1e43      	subs	r3, r0, #1
 80085ea:	4291      	cmp	r1, r2
 80085ec:	d100      	bne.n	80085f0 <memcpy+0xa>
 80085ee:	4770      	bx	lr
 80085f0:	b510      	push	{r4, lr}
 80085f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f6:	4291      	cmp	r1, r2
 80085f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fc:	d1f9      	bne.n	80085f2 <memcpy+0xc>
 80085fe:	bd10      	pop	{r4, pc}

08008600 <_free_r>:
 8008600:	b538      	push	{r3, r4, r5, lr}
 8008602:	4605      	mov	r5, r0
 8008604:	2900      	cmp	r1, #0
 8008606:	d041      	beq.n	800868c <_free_r+0x8c>
 8008608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800860c:	1f0c      	subs	r4, r1, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	bfb8      	it	lt
 8008612:	18e4      	addlt	r4, r4, r3
 8008614:	f7ff fd3e 	bl	8008094 <__malloc_lock>
 8008618:	4a1d      	ldr	r2, [pc, #116]	@ (8008690 <_free_r+0x90>)
 800861a:	6813      	ldr	r3, [r2, #0]
 800861c:	b933      	cbnz	r3, 800862c <_free_r+0x2c>
 800861e:	6063      	str	r3, [r4, #4]
 8008620:	6014      	str	r4, [r2, #0]
 8008622:	4628      	mov	r0, r5
 8008624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008628:	f7ff bd3a 	b.w	80080a0 <__malloc_unlock>
 800862c:	42a3      	cmp	r3, r4
 800862e:	d908      	bls.n	8008642 <_free_r+0x42>
 8008630:	6820      	ldr	r0, [r4, #0]
 8008632:	1821      	adds	r1, r4, r0
 8008634:	428b      	cmp	r3, r1
 8008636:	bf01      	itttt	eq
 8008638:	6819      	ldreq	r1, [r3, #0]
 800863a:	685b      	ldreq	r3, [r3, #4]
 800863c:	1809      	addeq	r1, r1, r0
 800863e:	6021      	streq	r1, [r4, #0]
 8008640:	e7ed      	b.n	800861e <_free_r+0x1e>
 8008642:	461a      	mov	r2, r3
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	b10b      	cbz	r3, 800864c <_free_r+0x4c>
 8008648:	42a3      	cmp	r3, r4
 800864a:	d9fa      	bls.n	8008642 <_free_r+0x42>
 800864c:	6811      	ldr	r1, [r2, #0]
 800864e:	1850      	adds	r0, r2, r1
 8008650:	42a0      	cmp	r0, r4
 8008652:	d10b      	bne.n	800866c <_free_r+0x6c>
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	4401      	add	r1, r0
 8008658:	1850      	adds	r0, r2, r1
 800865a:	6011      	str	r1, [r2, #0]
 800865c:	4283      	cmp	r3, r0
 800865e:	d1e0      	bne.n	8008622 <_free_r+0x22>
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	4408      	add	r0, r1
 8008666:	6053      	str	r3, [r2, #4]
 8008668:	6010      	str	r0, [r2, #0]
 800866a:	e7da      	b.n	8008622 <_free_r+0x22>
 800866c:	d902      	bls.n	8008674 <_free_r+0x74>
 800866e:	230c      	movs	r3, #12
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	e7d6      	b.n	8008622 <_free_r+0x22>
 8008674:	6820      	ldr	r0, [r4, #0]
 8008676:	1821      	adds	r1, r4, r0
 8008678:	428b      	cmp	r3, r1
 800867a:	bf02      	ittt	eq
 800867c:	6819      	ldreq	r1, [r3, #0]
 800867e:	685b      	ldreq	r3, [r3, #4]
 8008680:	1809      	addeq	r1, r1, r0
 8008682:	6063      	str	r3, [r4, #4]
 8008684:	bf08      	it	eq
 8008686:	6021      	streq	r1, [r4, #0]
 8008688:	6054      	str	r4, [r2, #4]
 800868a:	e7ca      	b.n	8008622 <_free_r+0x22>
 800868c:	bd38      	pop	{r3, r4, r5, pc}
 800868e:	bf00      	nop
 8008690:	20000230 	.word	0x20000230

08008694 <__sfputc_r>:
 8008694:	6893      	ldr	r3, [r2, #8]
 8008696:	3b01      	subs	r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	6093      	str	r3, [r2, #8]
 800869c:	b410      	push	{r4}
 800869e:	da08      	bge.n	80086b2 <__sfputc_r+0x1e>
 80086a0:	6994      	ldr	r4, [r2, #24]
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	db01      	blt.n	80086aa <__sfputc_r+0x16>
 80086a6:	290a      	cmp	r1, #10
 80086a8:	d103      	bne.n	80086b2 <__sfputc_r+0x1e>
 80086aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086ae:	f7ff be7a 	b.w	80083a6 <__swbuf_r>
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	1c58      	adds	r0, r3, #1
 80086b6:	6010      	str	r0, [r2, #0]
 80086b8:	4608      	mov	r0, r1
 80086ba:	7019      	strb	r1, [r3, #0]
 80086bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <__sfputs_r>:
 80086c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c4:	4606      	mov	r6, r0
 80086c6:	460f      	mov	r7, r1
 80086c8:	4614      	mov	r4, r2
 80086ca:	18d5      	adds	r5, r2, r3
 80086cc:	42ac      	cmp	r4, r5
 80086ce:	d101      	bne.n	80086d4 <__sfputs_r+0x12>
 80086d0:	2000      	movs	r0, #0
 80086d2:	e007      	b.n	80086e4 <__sfputs_r+0x22>
 80086d4:	463a      	mov	r2, r7
 80086d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086da:	4630      	mov	r0, r6
 80086dc:	f7ff ffda 	bl	8008694 <__sfputc_r>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d1f3      	bne.n	80086cc <__sfputs_r+0xa>
 80086e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080086e8 <_vfiprintf_r>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	460d      	mov	r5, r1
 80086ee:	b09d      	sub	sp, #116	@ 0x74
 80086f0:	4614      	mov	r4, r2
 80086f2:	4698      	mov	r8, r3
 80086f4:	4606      	mov	r6, r0
 80086f6:	b118      	cbz	r0, 8008700 <_vfiprintf_r+0x18>
 80086f8:	6a03      	ldr	r3, [r0, #32]
 80086fa:	b90b      	cbnz	r3, 8008700 <_vfiprintf_r+0x18>
 80086fc:	f7ff fd62 	bl	80081c4 <__sinit>
 8008700:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008702:	07d9      	lsls	r1, r3, #31
 8008704:	d405      	bmi.n	8008712 <_vfiprintf_r+0x2a>
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	059a      	lsls	r2, r3, #22
 800870a:	d402      	bmi.n	8008712 <_vfiprintf_r+0x2a>
 800870c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800870e:	f7ff ff68 	bl	80085e2 <__retarget_lock_acquire_recursive>
 8008712:	89ab      	ldrh	r3, [r5, #12]
 8008714:	071b      	lsls	r3, r3, #28
 8008716:	d501      	bpl.n	800871c <_vfiprintf_r+0x34>
 8008718:	692b      	ldr	r3, [r5, #16]
 800871a:	b99b      	cbnz	r3, 8008744 <_vfiprintf_r+0x5c>
 800871c:	4629      	mov	r1, r5
 800871e:	4630      	mov	r0, r6
 8008720:	f7ff fe80 	bl	8008424 <__swsetup_r>
 8008724:	b170      	cbz	r0, 8008744 <_vfiprintf_r+0x5c>
 8008726:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008728:	07dc      	lsls	r4, r3, #31
 800872a:	d504      	bpl.n	8008736 <_vfiprintf_r+0x4e>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b01d      	add	sp, #116	@ 0x74
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008736:	89ab      	ldrh	r3, [r5, #12]
 8008738:	0598      	lsls	r0, r3, #22
 800873a:	d4f7      	bmi.n	800872c <_vfiprintf_r+0x44>
 800873c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800873e:	f7ff ff51 	bl	80085e4 <__retarget_lock_release_recursive>
 8008742:	e7f3      	b.n	800872c <_vfiprintf_r+0x44>
 8008744:	2300      	movs	r3, #0
 8008746:	f8cd 800c 	str.w	r8, [sp, #12]
 800874a:	f04f 0901 	mov.w	r9, #1
 800874e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8008904 <_vfiprintf_r+0x21c>
 8008752:	9309      	str	r3, [sp, #36]	@ 0x24
 8008754:	2320      	movs	r3, #32
 8008756:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800875a:	2330      	movs	r3, #48	@ 0x30
 800875c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008760:	4623      	mov	r3, r4
 8008762:	469a      	mov	sl, r3
 8008764:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008768:	b10a      	cbz	r2, 800876e <_vfiprintf_r+0x86>
 800876a:	2a25      	cmp	r2, #37	@ 0x25
 800876c:	d1f9      	bne.n	8008762 <_vfiprintf_r+0x7a>
 800876e:	ebba 0b04 	subs.w	fp, sl, r4
 8008772:	d00b      	beq.n	800878c <_vfiprintf_r+0xa4>
 8008774:	465b      	mov	r3, fp
 8008776:	4622      	mov	r2, r4
 8008778:	4629      	mov	r1, r5
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ffa1 	bl	80086c2 <__sfputs_r>
 8008780:	3001      	adds	r0, #1
 8008782:	f000 80a7 	beq.w	80088d4 <_vfiprintf_r+0x1ec>
 8008786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008788:	445a      	add	r2, fp
 800878a:	9209      	str	r2, [sp, #36]	@ 0x24
 800878c:	f89a 3000 	ldrb.w	r3, [sl]
 8008790:	2b00      	cmp	r3, #0
 8008792:	f000 809f 	beq.w	80088d4 <_vfiprintf_r+0x1ec>
 8008796:	2300      	movs	r3, #0
 8008798:	f04f 32ff 	mov.w	r2, #4294967295
 800879c:	f10a 0a01 	add.w	sl, sl, #1
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	9307      	str	r3, [sp, #28]
 80087a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80087aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087ae:	4654      	mov	r4, sl
 80087b0:	2205      	movs	r2, #5
 80087b2:	4854      	ldr	r0, [pc, #336]	@ (8008904 <_vfiprintf_r+0x21c>)
 80087b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b8:	f000 fba4 	bl	8008f04 <memchr>
 80087bc:	9a04      	ldr	r2, [sp, #16]
 80087be:	b9d8      	cbnz	r0, 80087f8 <_vfiprintf_r+0x110>
 80087c0:	06d1      	lsls	r1, r2, #27
 80087c2:	bf44      	itt	mi
 80087c4:	2320      	movmi	r3, #32
 80087c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ca:	0713      	lsls	r3, r2, #28
 80087cc:	bf44      	itt	mi
 80087ce:	232b      	movmi	r3, #43	@ 0x2b
 80087d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087d4:	f89a 3000 	ldrb.w	r3, [sl]
 80087d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80087da:	d015      	beq.n	8008808 <_vfiprintf_r+0x120>
 80087dc:	9a07      	ldr	r2, [sp, #28]
 80087de:	4654      	mov	r4, sl
 80087e0:	2000      	movs	r0, #0
 80087e2:	f04f 0c0a 	mov.w	ip, #10
 80087e6:	4621      	mov	r1, r4
 80087e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087ec:	3b30      	subs	r3, #48	@ 0x30
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d94b      	bls.n	800888a <_vfiprintf_r+0x1a2>
 80087f2:	b1b0      	cbz	r0, 8008822 <_vfiprintf_r+0x13a>
 80087f4:	9207      	str	r2, [sp, #28]
 80087f6:	e014      	b.n	8008822 <_vfiprintf_r+0x13a>
 80087f8:	eba0 0308 	sub.w	r3, r0, r8
 80087fc:	46a2      	mov	sl, r4
 80087fe:	fa09 f303 	lsl.w	r3, r9, r3
 8008802:	4313      	orrs	r3, r2
 8008804:	9304      	str	r3, [sp, #16]
 8008806:	e7d2      	b.n	80087ae <_vfiprintf_r+0xc6>
 8008808:	9b03      	ldr	r3, [sp, #12]
 800880a:	1d19      	adds	r1, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	9103      	str	r1, [sp, #12]
 8008812:	bfbb      	ittet	lt
 8008814:	425b      	neglt	r3, r3
 8008816:	f042 0202 	orrlt.w	r2, r2, #2
 800881a:	9307      	strge	r3, [sp, #28]
 800881c:	9307      	strlt	r3, [sp, #28]
 800881e:	bfb8      	it	lt
 8008820:	9204      	strlt	r2, [sp, #16]
 8008822:	7823      	ldrb	r3, [r4, #0]
 8008824:	2b2e      	cmp	r3, #46	@ 0x2e
 8008826:	d10a      	bne.n	800883e <_vfiprintf_r+0x156>
 8008828:	7863      	ldrb	r3, [r4, #1]
 800882a:	2b2a      	cmp	r3, #42	@ 0x2a
 800882c:	d132      	bne.n	8008894 <_vfiprintf_r+0x1ac>
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	3402      	adds	r4, #2
 8008832:	1d1a      	adds	r2, r3, #4
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800883a:	9203      	str	r2, [sp, #12]
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008914 <_vfiprintf_r+0x22c>
 8008842:	2203      	movs	r2, #3
 8008844:	7821      	ldrb	r1, [r4, #0]
 8008846:	4650      	mov	r0, sl
 8008848:	f000 fb5c 	bl	8008f04 <memchr>
 800884c:	b138      	cbz	r0, 800885e <_vfiprintf_r+0x176>
 800884e:	eba0 000a 	sub.w	r0, r0, sl
 8008852:	2240      	movs	r2, #64	@ 0x40
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	3401      	adds	r4, #1
 8008858:	4082      	lsls	r2, r0
 800885a:	4313      	orrs	r3, r2
 800885c:	9304      	str	r3, [sp, #16]
 800885e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008862:	2206      	movs	r2, #6
 8008864:	4828      	ldr	r0, [pc, #160]	@ (8008908 <_vfiprintf_r+0x220>)
 8008866:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800886a:	f000 fb4b 	bl	8008f04 <memchr>
 800886e:	2800      	cmp	r0, #0
 8008870:	d03f      	beq.n	80088f2 <_vfiprintf_r+0x20a>
 8008872:	4b26      	ldr	r3, [pc, #152]	@ (800890c <_vfiprintf_r+0x224>)
 8008874:	bb1b      	cbnz	r3, 80088be <_vfiprintf_r+0x1d6>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	3307      	adds	r3, #7
 800887a:	f023 0307 	bic.w	r3, r3, #7
 800887e:	3308      	adds	r3, #8
 8008880:	9303      	str	r3, [sp, #12]
 8008882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008884:	443b      	add	r3, r7
 8008886:	9309      	str	r3, [sp, #36]	@ 0x24
 8008888:	e76a      	b.n	8008760 <_vfiprintf_r+0x78>
 800888a:	fb0c 3202 	mla	r2, ip, r2, r3
 800888e:	460c      	mov	r4, r1
 8008890:	2001      	movs	r0, #1
 8008892:	e7a8      	b.n	80087e6 <_vfiprintf_r+0xfe>
 8008894:	2300      	movs	r3, #0
 8008896:	3401      	adds	r4, #1
 8008898:	f04f 0c0a 	mov.w	ip, #10
 800889c:	4619      	mov	r1, r3
 800889e:	9305      	str	r3, [sp, #20]
 80088a0:	4620      	mov	r0, r4
 80088a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088a6:	3a30      	subs	r2, #48	@ 0x30
 80088a8:	2a09      	cmp	r2, #9
 80088aa:	d903      	bls.n	80088b4 <_vfiprintf_r+0x1cc>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d0c6      	beq.n	800883e <_vfiprintf_r+0x156>
 80088b0:	9105      	str	r1, [sp, #20]
 80088b2:	e7c4      	b.n	800883e <_vfiprintf_r+0x156>
 80088b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80088b8:	4604      	mov	r4, r0
 80088ba:	2301      	movs	r3, #1
 80088bc:	e7f0      	b.n	80088a0 <_vfiprintf_r+0x1b8>
 80088be:	ab03      	add	r3, sp, #12
 80088c0:	462a      	mov	r2, r5
 80088c2:	a904      	add	r1, sp, #16
 80088c4:	4630      	mov	r0, r6
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <_vfiprintf_r+0x228>)
 80088ca:	f3af 8000 	nop.w
 80088ce:	4607      	mov	r7, r0
 80088d0:	1c78      	adds	r0, r7, #1
 80088d2:	d1d6      	bne.n	8008882 <_vfiprintf_r+0x19a>
 80088d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088d6:	07d9      	lsls	r1, r3, #31
 80088d8:	d405      	bmi.n	80088e6 <_vfiprintf_r+0x1fe>
 80088da:	89ab      	ldrh	r3, [r5, #12]
 80088dc:	059a      	lsls	r2, r3, #22
 80088de:	d402      	bmi.n	80088e6 <_vfiprintf_r+0x1fe>
 80088e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088e2:	f7ff fe7f 	bl	80085e4 <__retarget_lock_release_recursive>
 80088e6:	89ab      	ldrh	r3, [r5, #12]
 80088e8:	065b      	lsls	r3, r3, #25
 80088ea:	f53f af1f 	bmi.w	800872c <_vfiprintf_r+0x44>
 80088ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f0:	e71e      	b.n	8008730 <_vfiprintf_r+0x48>
 80088f2:	ab03      	add	r3, sp, #12
 80088f4:	462a      	mov	r2, r5
 80088f6:	a904      	add	r1, sp, #16
 80088f8:	4630      	mov	r0, r6
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	4b04      	ldr	r3, [pc, #16]	@ (8008910 <_vfiprintf_r+0x228>)
 80088fe:	f000 f87d 	bl	80089fc <_printf_i>
 8008902:	e7e4      	b.n	80088ce <_vfiprintf_r+0x1e6>
 8008904:	080125d4 	.word	0x080125d4
 8008908:	080125de 	.word	0x080125de
 800890c:	00000000 	.word	0x00000000
 8008910:	080086c3 	.word	0x080086c3
 8008914:	080125da 	.word	0x080125da

08008918 <_printf_common>:
 8008918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800891c:	4616      	mov	r6, r2
 800891e:	4698      	mov	r8, r3
 8008920:	688a      	ldr	r2, [r1, #8]
 8008922:	4607      	mov	r7, r0
 8008924:	690b      	ldr	r3, [r1, #16]
 8008926:	460c      	mov	r4, r1
 8008928:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800892c:	4293      	cmp	r3, r2
 800892e:	bfb8      	it	lt
 8008930:	4613      	movlt	r3, r2
 8008932:	6033      	str	r3, [r6, #0]
 8008934:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008938:	b10a      	cbz	r2, 800893e <_printf_common+0x26>
 800893a:	3301      	adds	r3, #1
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	0699      	lsls	r1, r3, #26
 8008942:	bf42      	ittt	mi
 8008944:	6833      	ldrmi	r3, [r6, #0]
 8008946:	3302      	addmi	r3, #2
 8008948:	6033      	strmi	r3, [r6, #0]
 800894a:	6825      	ldr	r5, [r4, #0]
 800894c:	f015 0506 	ands.w	r5, r5, #6
 8008950:	d106      	bne.n	8008960 <_printf_common+0x48>
 8008952:	f104 0a19 	add.w	sl, r4, #25
 8008956:	68e3      	ldr	r3, [r4, #12]
 8008958:	6832      	ldr	r2, [r6, #0]
 800895a:	1a9b      	subs	r3, r3, r2
 800895c:	42ab      	cmp	r3, r5
 800895e:	dc2b      	bgt.n	80089b8 <_printf_common+0xa0>
 8008960:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	3b00      	subs	r3, #0
 8008968:	bf18      	it	ne
 800896a:	2301      	movne	r3, #1
 800896c:	0692      	lsls	r2, r2, #26
 800896e:	d430      	bmi.n	80089d2 <_printf_common+0xba>
 8008970:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008974:	4641      	mov	r1, r8
 8008976:	4638      	mov	r0, r7
 8008978:	47c8      	blx	r9
 800897a:	3001      	adds	r0, #1
 800897c:	d023      	beq.n	80089c6 <_printf_common+0xae>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	341a      	adds	r4, #26
 8008982:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8008986:	f003 0306 	and.w	r3, r3, #6
 800898a:	2b04      	cmp	r3, #4
 800898c:	bf0a      	itet	eq
 800898e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8008992:	2500      	movne	r5, #0
 8008994:	6833      	ldreq	r3, [r6, #0]
 8008996:	f04f 0600 	mov.w	r6, #0
 800899a:	bf08      	it	eq
 800899c:	1aed      	subeq	r5, r5, r3
 800899e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80089a2:	bf08      	it	eq
 80089a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089a8:	4293      	cmp	r3, r2
 80089aa:	bfc4      	itt	gt
 80089ac:	1a9b      	subgt	r3, r3, r2
 80089ae:	18ed      	addgt	r5, r5, r3
 80089b0:	42b5      	cmp	r5, r6
 80089b2:	d11a      	bne.n	80089ea <_printf_common+0xd2>
 80089b4:	2000      	movs	r0, #0
 80089b6:	e008      	b.n	80089ca <_printf_common+0xb2>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4652      	mov	r2, sl
 80089bc:	4641      	mov	r1, r8
 80089be:	4638      	mov	r0, r7
 80089c0:	47c8      	blx	r9
 80089c2:	3001      	adds	r0, #1
 80089c4:	d103      	bne.n	80089ce <_printf_common+0xb6>
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ce:	3501      	adds	r5, #1
 80089d0:	e7c1      	b.n	8008956 <_printf_common+0x3e>
 80089d2:	18e1      	adds	r1, r4, r3
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	2030      	movs	r0, #48	@ 0x30
 80089d8:	3302      	adds	r3, #2
 80089da:	4422      	add	r2, r4
 80089dc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80089e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80089e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80089e8:	e7c2      	b.n	8008970 <_printf_common+0x58>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4622      	mov	r2, r4
 80089ee:	4641      	mov	r1, r8
 80089f0:	4638      	mov	r0, r7
 80089f2:	47c8      	blx	r9
 80089f4:	3001      	adds	r0, #1
 80089f6:	d0e6      	beq.n	80089c6 <_printf_common+0xae>
 80089f8:	3601      	adds	r6, #1
 80089fa:	e7d9      	b.n	80089b0 <_printf_common+0x98>

080089fc <_printf_i>:
 80089fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a00:	7e0f      	ldrb	r7, [r1, #24]
 8008a02:	4691      	mov	r9, r2
 8008a04:	4680      	mov	r8, r0
 8008a06:	460c      	mov	r4, r1
 8008a08:	2f78      	cmp	r7, #120	@ 0x78
 8008a0a:	469a      	mov	sl, r3
 8008a0c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a12:	d807      	bhi.n	8008a24 <_printf_i+0x28>
 8008a14:	2f62      	cmp	r7, #98	@ 0x62
 8008a16:	d80a      	bhi.n	8008a2e <_printf_i+0x32>
 8008a18:	2f00      	cmp	r7, #0
 8008a1a:	f000 80d2 	beq.w	8008bc2 <_printf_i+0x1c6>
 8008a1e:	2f58      	cmp	r7, #88	@ 0x58
 8008a20:	f000 80b9 	beq.w	8008b96 <_printf_i+0x19a>
 8008a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a2c:	e03a      	b.n	8008aa4 <_printf_i+0xa8>
 8008a2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a32:	2b15      	cmp	r3, #21
 8008a34:	d8f6      	bhi.n	8008a24 <_printf_i+0x28>
 8008a36:	a101      	add	r1, pc, #4	@ (adr r1, 8008a3c <_printf_i+0x40>)
 8008a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a3c:	08008a95 	.word	0x08008a95
 8008a40:	08008aa9 	.word	0x08008aa9
 8008a44:	08008a25 	.word	0x08008a25
 8008a48:	08008a25 	.word	0x08008a25
 8008a4c:	08008a25 	.word	0x08008a25
 8008a50:	08008a25 	.word	0x08008a25
 8008a54:	08008aa9 	.word	0x08008aa9
 8008a58:	08008a25 	.word	0x08008a25
 8008a5c:	08008a25 	.word	0x08008a25
 8008a60:	08008a25 	.word	0x08008a25
 8008a64:	08008a25 	.word	0x08008a25
 8008a68:	08008ba9 	.word	0x08008ba9
 8008a6c:	08008ad3 	.word	0x08008ad3
 8008a70:	08008b63 	.word	0x08008b63
 8008a74:	08008a25 	.word	0x08008a25
 8008a78:	08008a25 	.word	0x08008a25
 8008a7c:	08008bcb 	.word	0x08008bcb
 8008a80:	08008a25 	.word	0x08008a25
 8008a84:	08008ad3 	.word	0x08008ad3
 8008a88:	08008a25 	.word	0x08008a25
 8008a8c:	08008a25 	.word	0x08008a25
 8008a90:	08008b6b 	.word	0x08008b6b
 8008a94:	6833      	ldr	r3, [r6, #0]
 8008a96:	1d1a      	adds	r2, r3, #4
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	6032      	str	r2, [r6, #0]
 8008a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e09d      	b.n	8008be4 <_printf_i+0x1e8>
 8008aa8:	6833      	ldr	r3, [r6, #0]
 8008aaa:	6820      	ldr	r0, [r4, #0]
 8008aac:	1d19      	adds	r1, r3, #4
 8008aae:	6031      	str	r1, [r6, #0]
 8008ab0:	0606      	lsls	r6, r0, #24
 8008ab2:	d501      	bpl.n	8008ab8 <_printf_i+0xbc>
 8008ab4:	681d      	ldr	r5, [r3, #0]
 8008ab6:	e003      	b.n	8008ac0 <_printf_i+0xc4>
 8008ab8:	0645      	lsls	r5, r0, #25
 8008aba:	d5fb      	bpl.n	8008ab4 <_printf_i+0xb8>
 8008abc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	da03      	bge.n	8008acc <_printf_i+0xd0>
 8008ac4:	232d      	movs	r3, #45	@ 0x2d
 8008ac6:	426d      	negs	r5, r5
 8008ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008acc:	4859      	ldr	r0, [pc, #356]	@ (8008c34 <_printf_i+0x238>)
 8008ace:	230a      	movs	r3, #10
 8008ad0:	e011      	b.n	8008af6 <_printf_i+0xfa>
 8008ad2:	6821      	ldr	r1, [r4, #0]
 8008ad4:	6833      	ldr	r3, [r6, #0]
 8008ad6:	0608      	lsls	r0, r1, #24
 8008ad8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008adc:	d402      	bmi.n	8008ae4 <_printf_i+0xe8>
 8008ade:	0649      	lsls	r1, r1, #25
 8008ae0:	bf48      	it	mi
 8008ae2:	b2ad      	uxthmi	r5, r5
 8008ae4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ae6:	6033      	str	r3, [r6, #0]
 8008ae8:	4852      	ldr	r0, [pc, #328]	@ (8008c34 <_printf_i+0x238>)
 8008aea:	bf14      	ite	ne
 8008aec:	230a      	movne	r3, #10
 8008aee:	2308      	moveq	r3, #8
 8008af0:	2100      	movs	r1, #0
 8008af2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008af6:	6866      	ldr	r6, [r4, #4]
 8008af8:	2e00      	cmp	r6, #0
 8008afa:	60a6      	str	r6, [r4, #8]
 8008afc:	bfa2      	ittt	ge
 8008afe:	6821      	ldrge	r1, [r4, #0]
 8008b00:	f021 0104 	bicge.w	r1, r1, #4
 8008b04:	6021      	strge	r1, [r4, #0]
 8008b06:	b90d      	cbnz	r5, 8008b0c <_printf_i+0x110>
 8008b08:	2e00      	cmp	r6, #0
 8008b0a:	d04b      	beq.n	8008ba4 <_printf_i+0x1a8>
 8008b0c:	4616      	mov	r6, r2
 8008b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b12:	fb03 5711 	mls	r7, r3, r1, r5
 8008b16:	5dc7      	ldrb	r7, [r0, r7]
 8008b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b1c:	462f      	mov	r7, r5
 8008b1e:	460d      	mov	r5, r1
 8008b20:	42bb      	cmp	r3, r7
 8008b22:	d9f4      	bls.n	8008b0e <_printf_i+0x112>
 8008b24:	2b08      	cmp	r3, #8
 8008b26:	d10b      	bne.n	8008b40 <_printf_i+0x144>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	07df      	lsls	r7, r3, #31
 8008b2c:	d508      	bpl.n	8008b40 <_printf_i+0x144>
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	6861      	ldr	r1, [r4, #4]
 8008b32:	4299      	cmp	r1, r3
 8008b34:	bfde      	ittt	le
 8008b36:	2330      	movle	r3, #48	@ 0x30
 8008b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b40:	1b92      	subs	r2, r2, r6
 8008b42:	6122      	str	r2, [r4, #16]
 8008b44:	464b      	mov	r3, r9
 8008b46:	aa03      	add	r2, sp, #12
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	f8cd a000 	str.w	sl, [sp]
 8008b50:	f7ff fee2 	bl	8008918 <_printf_common>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d14a      	bne.n	8008bee <_printf_i+0x1f2>
 8008b58:	f04f 30ff 	mov.w	r0, #4294967295
 8008b5c:	b004      	add	sp, #16
 8008b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b62:	6823      	ldr	r3, [r4, #0]
 8008b64:	f043 0320 	orr.w	r3, r3, #32
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	2778      	movs	r7, #120	@ 0x78
 8008b6c:	4832      	ldr	r0, [pc, #200]	@ (8008c38 <_printf_i+0x23c>)
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b74:	061f      	lsls	r7, r3, #24
 8008b76:	6831      	ldr	r1, [r6, #0]
 8008b78:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b7c:	d402      	bmi.n	8008b84 <_printf_i+0x188>
 8008b7e:	065f      	lsls	r7, r3, #25
 8008b80:	bf48      	it	mi
 8008b82:	b2ad      	uxthmi	r5, r5
 8008b84:	6031      	str	r1, [r6, #0]
 8008b86:	07d9      	lsls	r1, r3, #31
 8008b88:	bf44      	itt	mi
 8008b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8008b8e:	6023      	strmi	r3, [r4, #0]
 8008b90:	b11d      	cbz	r5, 8008b9a <_printf_i+0x19e>
 8008b92:	2310      	movs	r3, #16
 8008b94:	e7ac      	b.n	8008af0 <_printf_i+0xf4>
 8008b96:	4827      	ldr	r0, [pc, #156]	@ (8008c34 <_printf_i+0x238>)
 8008b98:	e7e9      	b.n	8008b6e <_printf_i+0x172>
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	f023 0320 	bic.w	r3, r3, #32
 8008ba0:	6023      	str	r3, [r4, #0]
 8008ba2:	e7f6      	b.n	8008b92 <_printf_i+0x196>
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	e7bd      	b.n	8008b24 <_printf_i+0x128>
 8008ba8:	6833      	ldr	r3, [r6, #0]
 8008baa:	6825      	ldr	r5, [r4, #0]
 8008bac:	1d18      	adds	r0, r3, #4
 8008bae:	6961      	ldr	r1, [r4, #20]
 8008bb0:	6030      	str	r0, [r6, #0]
 8008bb2:	062e      	lsls	r6, r5, #24
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	d501      	bpl.n	8008bbc <_printf_i+0x1c0>
 8008bb8:	6019      	str	r1, [r3, #0]
 8008bba:	e002      	b.n	8008bc2 <_printf_i+0x1c6>
 8008bbc:	0668      	lsls	r0, r5, #25
 8008bbe:	d5fb      	bpl.n	8008bb8 <_printf_i+0x1bc>
 8008bc0:	8019      	strh	r1, [r3, #0]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4616      	mov	r6, r2
 8008bc6:	6123      	str	r3, [r4, #16]
 8008bc8:	e7bc      	b.n	8008b44 <_printf_i+0x148>
 8008bca:	6833      	ldr	r3, [r6, #0]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	1d1a      	adds	r2, r3, #4
 8008bd0:	6032      	str	r2, [r6, #0]
 8008bd2:	681e      	ldr	r6, [r3, #0]
 8008bd4:	6862      	ldr	r2, [r4, #4]
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f994 	bl	8008f04 <memchr>
 8008bdc:	b108      	cbz	r0, 8008be2 <_printf_i+0x1e6>
 8008bde:	1b80      	subs	r0, r0, r6
 8008be0:	6060      	str	r0, [r4, #4]
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	6123      	str	r3, [r4, #16]
 8008be6:	2300      	movs	r3, #0
 8008be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bec:	e7aa      	b.n	8008b44 <_printf_i+0x148>
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	4649      	mov	r1, r9
 8008bf4:	4640      	mov	r0, r8
 8008bf6:	47d0      	blx	sl
 8008bf8:	3001      	adds	r0, #1
 8008bfa:	d0ad      	beq.n	8008b58 <_printf_i+0x15c>
 8008bfc:	6823      	ldr	r3, [r4, #0]
 8008bfe:	079b      	lsls	r3, r3, #30
 8008c00:	d413      	bmi.n	8008c2a <_printf_i+0x22e>
 8008c02:	68e0      	ldr	r0, [r4, #12]
 8008c04:	9b03      	ldr	r3, [sp, #12]
 8008c06:	4298      	cmp	r0, r3
 8008c08:	bfb8      	it	lt
 8008c0a:	4618      	movlt	r0, r3
 8008c0c:	e7a6      	b.n	8008b5c <_printf_i+0x160>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	4632      	mov	r2, r6
 8008c12:	4649      	mov	r1, r9
 8008c14:	4640      	mov	r0, r8
 8008c16:	47d0      	blx	sl
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d09d      	beq.n	8008b58 <_printf_i+0x15c>
 8008c1c:	3501      	adds	r5, #1
 8008c1e:	68e3      	ldr	r3, [r4, #12]
 8008c20:	9903      	ldr	r1, [sp, #12]
 8008c22:	1a5b      	subs	r3, r3, r1
 8008c24:	42ab      	cmp	r3, r5
 8008c26:	dcf2      	bgt.n	8008c0e <_printf_i+0x212>
 8008c28:	e7eb      	b.n	8008c02 <_printf_i+0x206>
 8008c2a:	2500      	movs	r5, #0
 8008c2c:	f104 0619 	add.w	r6, r4, #25
 8008c30:	e7f5      	b.n	8008c1e <_printf_i+0x222>
 8008c32:	bf00      	nop
 8008c34:	080125e5 	.word	0x080125e5
 8008c38:	080125f6 	.word	0x080125f6

08008c3c <__sflush_r>:
 8008c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c44:	0716      	lsls	r6, r2, #28
 8008c46:	4605      	mov	r5, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	d454      	bmi.n	8008cf6 <__sflush_r+0xba>
 8008c4c:	684b      	ldr	r3, [r1, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	dc02      	bgt.n	8008c58 <__sflush_r+0x1c>
 8008c52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dd48      	ble.n	8008cea <__sflush_r+0xae>
 8008c58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	d045      	beq.n	8008cea <__sflush_r+0xae>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008c64:	682f      	ldr	r7, [r5, #0]
 8008c66:	6a21      	ldr	r1, [r4, #32]
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	d030      	beq.n	8008cce <__sflush_r+0x92>
 8008c6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	0759      	lsls	r1, r3, #29
 8008c72:	d505      	bpl.n	8008c80 <__sflush_r+0x44>
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	1ad2      	subs	r2, r2, r3
 8008c78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c7a:	b10b      	cbz	r3, 8008c80 <__sflush_r+0x44>
 8008c7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c84:	6a21      	ldr	r1, [r4, #32]
 8008c86:	4628      	mov	r0, r5
 8008c88:	47b0      	blx	r6
 8008c8a:	1c43      	adds	r3, r0, #1
 8008c8c:	89a3      	ldrh	r3, [r4, #12]
 8008c8e:	d106      	bne.n	8008c9e <__sflush_r+0x62>
 8008c90:	6829      	ldr	r1, [r5, #0]
 8008c92:	291d      	cmp	r1, #29
 8008c94:	d82b      	bhi.n	8008cee <__sflush_r+0xb2>
 8008c96:	4a2a      	ldr	r2, [pc, #168]	@ (8008d40 <__sflush_r+0x104>)
 8008c98:	410a      	asrs	r2, r1
 8008c9a:	07d6      	lsls	r6, r2, #31
 8008c9c:	d427      	bmi.n	8008cee <__sflush_r+0xb2>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	04d9      	lsls	r1, r3, #19
 8008ca2:	6062      	str	r2, [r4, #4]
 8008ca4:	6922      	ldr	r2, [r4, #16]
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	d504      	bpl.n	8008cb4 <__sflush_r+0x78>
 8008caa:	1c42      	adds	r2, r0, #1
 8008cac:	d101      	bne.n	8008cb2 <__sflush_r+0x76>
 8008cae:	682b      	ldr	r3, [r5, #0]
 8008cb0:	b903      	cbnz	r3, 8008cb4 <__sflush_r+0x78>
 8008cb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cb6:	602f      	str	r7, [r5, #0]
 8008cb8:	b1b9      	cbz	r1, 8008cea <__sflush_r+0xae>
 8008cba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cbe:	4299      	cmp	r1, r3
 8008cc0:	d002      	beq.n	8008cc8 <__sflush_r+0x8c>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f7ff fc9c 	bl	8008600 <_free_r>
 8008cc8:	2300      	movs	r3, #0
 8008cca:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ccc:	e00d      	b.n	8008cea <__sflush_r+0xae>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	4628      	mov	r0, r5
 8008cd2:	47b0      	blx	r6
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	1c50      	adds	r0, r2, #1
 8008cd8:	d1c9      	bne.n	8008c6e <__sflush_r+0x32>
 8008cda:	682b      	ldr	r3, [r5, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0c6      	beq.n	8008c6e <__sflush_r+0x32>
 8008ce0:	2b1d      	cmp	r3, #29
 8008ce2:	d001      	beq.n	8008ce8 <__sflush_r+0xac>
 8008ce4:	2b16      	cmp	r3, #22
 8008ce6:	d11d      	bne.n	8008d24 <__sflush_r+0xe8>
 8008ce8:	602f      	str	r7, [r5, #0]
 8008cea:	2000      	movs	r0, #0
 8008cec:	e021      	b.n	8008d32 <__sflush_r+0xf6>
 8008cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cf2:	b21b      	sxth	r3, r3
 8008cf4:	e01a      	b.n	8008d2c <__sflush_r+0xf0>
 8008cf6:	690f      	ldr	r7, [r1, #16]
 8008cf8:	2f00      	cmp	r7, #0
 8008cfa:	d0f6      	beq.n	8008cea <__sflush_r+0xae>
 8008cfc:	0793      	lsls	r3, r2, #30
 8008cfe:	680e      	ldr	r6, [r1, #0]
 8008d00:	600f      	str	r7, [r1, #0]
 8008d02:	bf0c      	ite	eq
 8008d04:	694b      	ldreq	r3, [r1, #20]
 8008d06:	2300      	movne	r3, #0
 8008d08:	eba6 0807 	sub.w	r8, r6, r7
 8008d0c:	608b      	str	r3, [r1, #8]
 8008d0e:	f1b8 0f00 	cmp.w	r8, #0
 8008d12:	ddea      	ble.n	8008cea <__sflush_r+0xae>
 8008d14:	4643      	mov	r3, r8
 8008d16:	463a      	mov	r2, r7
 8008d18:	6a21      	ldr	r1, [r4, #32]
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d1e:	47b0      	blx	r6
 8008d20:	2800      	cmp	r0, #0
 8008d22:	dc08      	bgt.n	8008d36 <__sflush_r+0xfa>
 8008d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d36:	4407      	add	r7, r0
 8008d38:	eba8 0800 	sub.w	r8, r8, r0
 8008d3c:	e7e7      	b.n	8008d0e <__sflush_r+0xd2>
 8008d3e:	bf00      	nop
 8008d40:	dfbffffe 	.word	0xdfbffffe

08008d44 <_fflush_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	b913      	cbnz	r3, 8008d54 <_fflush_r+0x10>
 8008d4e:	2500      	movs	r5, #0
 8008d50:	4628      	mov	r0, r5
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	b118      	cbz	r0, 8008d5e <_fflush_r+0x1a>
 8008d56:	6a03      	ldr	r3, [r0, #32]
 8008d58:	b90b      	cbnz	r3, 8008d5e <_fflush_r+0x1a>
 8008d5a:	f7ff fa33 	bl	80081c4 <__sinit>
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f3      	beq.n	8008d4e <_fflush_r+0xa>
 8008d66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d68:	07d0      	lsls	r0, r2, #31
 8008d6a:	d404      	bmi.n	8008d76 <_fflush_r+0x32>
 8008d6c:	0599      	lsls	r1, r3, #22
 8008d6e:	d402      	bmi.n	8008d76 <_fflush_r+0x32>
 8008d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d72:	f7ff fc36 	bl	80085e2 <__retarget_lock_acquire_recursive>
 8008d76:	4628      	mov	r0, r5
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f7ff ff5f 	bl	8008c3c <__sflush_r>
 8008d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d80:	4605      	mov	r5, r0
 8008d82:	07da      	lsls	r2, r3, #31
 8008d84:	d4e4      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	d4e1      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d8e:	f7ff fc29 	bl	80085e4 <__retarget_lock_release_recursive>
 8008d92:	e7dd      	b.n	8008d50 <_fflush_r+0xc>

08008d94 <__swhatbuf_r>:
 8008d94:	b570      	push	{r4, r5, r6, lr}
 8008d96:	460c      	mov	r4, r1
 8008d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d9c:	b096      	sub	sp, #88	@ 0x58
 8008d9e:	4615      	mov	r5, r2
 8008da0:	2900      	cmp	r1, #0
 8008da2:	461e      	mov	r6, r3
 8008da4:	da0c      	bge.n	8008dc0 <__swhatbuf_r+0x2c>
 8008da6:	89a3      	ldrh	r3, [r4, #12]
 8008da8:	2100      	movs	r1, #0
 8008daa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008dae:	bf14      	ite	ne
 8008db0:	2340      	movne	r3, #64	@ 0x40
 8008db2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008db6:	2000      	movs	r0, #0
 8008db8:	6031      	str	r1, [r6, #0]
 8008dba:	602b      	str	r3, [r5, #0]
 8008dbc:	b016      	add	sp, #88	@ 0x58
 8008dbe:	bd70      	pop	{r4, r5, r6, pc}
 8008dc0:	466a      	mov	r2, sp
 8008dc2:	f000 f87d 	bl	8008ec0 <_fstat_r>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	dbed      	blt.n	8008da6 <__swhatbuf_r+0x12>
 8008dca:	9901      	ldr	r1, [sp, #4]
 8008dcc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008dd0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008dd4:	4259      	negs	r1, r3
 8008dd6:	4159      	adcs	r1, r3
 8008dd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ddc:	e7eb      	b.n	8008db6 <__swhatbuf_r+0x22>

08008dde <__smakebuf_r>:
 8008dde:	898b      	ldrh	r3, [r1, #12]
 8008de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008de2:	079d      	lsls	r5, r3, #30
 8008de4:	4606      	mov	r6, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	d507      	bpl.n	8008dfa <__smakebuf_r+0x1c>
 8008dea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008dee:	6023      	str	r3, [r4, #0]
 8008df0:	6123      	str	r3, [r4, #16]
 8008df2:	2301      	movs	r3, #1
 8008df4:	6163      	str	r3, [r4, #20]
 8008df6:	b003      	add	sp, #12
 8008df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfa:	ab01      	add	r3, sp, #4
 8008dfc:	466a      	mov	r2, sp
 8008dfe:	f7ff ffc9 	bl	8008d94 <__swhatbuf_r>
 8008e02:	9f00      	ldr	r7, [sp, #0]
 8008e04:	4605      	mov	r5, r0
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7ff f8c3 	bl	8007f94 <_malloc_r>
 8008e0e:	b948      	cbnz	r0, 8008e24 <__smakebuf_r+0x46>
 8008e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d4ee      	bmi.n	8008df6 <__smakebuf_r+0x18>
 8008e18:	f023 0303 	bic.w	r3, r3, #3
 8008e1c:	f043 0302 	orr.w	r3, r3, #2
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	e7e2      	b.n	8008dea <__smakebuf_r+0xc>
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	6020      	str	r0, [r4, #0]
 8008e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e2c:	81a3      	strh	r3, [r4, #12]
 8008e2e:	9b01      	ldr	r3, [sp, #4]
 8008e30:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e34:	b15b      	cbz	r3, 8008e4e <__smakebuf_r+0x70>
 8008e36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 f852 	bl	8008ee4 <_isatty_r>
 8008e40:	b128      	cbz	r0, 8008e4e <__smakebuf_r+0x70>
 8008e42:	89a3      	ldrh	r3, [r4, #12]
 8008e44:	f023 0303 	bic.w	r3, r3, #3
 8008e48:	f043 0301 	orr.w	r3, r3, #1
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	431d      	orrs	r5, r3
 8008e52:	81a5      	strh	r5, [r4, #12]
 8008e54:	e7cf      	b.n	8008df6 <__smakebuf_r+0x18>

08008e56 <_putc_r>:
 8008e56:	b570      	push	{r4, r5, r6, lr}
 8008e58:	460d      	mov	r5, r1
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	b118      	cbz	r0, 8008e68 <_putc_r+0x12>
 8008e60:	6a03      	ldr	r3, [r0, #32]
 8008e62:	b90b      	cbnz	r3, 8008e68 <_putc_r+0x12>
 8008e64:	f7ff f9ae 	bl	80081c4 <__sinit>
 8008e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e6a:	07d8      	lsls	r0, r3, #31
 8008e6c:	d405      	bmi.n	8008e7a <_putc_r+0x24>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	0599      	lsls	r1, r3, #22
 8008e72:	d402      	bmi.n	8008e7a <_putc_r+0x24>
 8008e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e76:	f7ff fbb4 	bl	80085e2 <__retarget_lock_acquire_recursive>
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	60a3      	str	r3, [r4, #8]
 8008e82:	da05      	bge.n	8008e90 <_putc_r+0x3a>
 8008e84:	69a2      	ldr	r2, [r4, #24]
 8008e86:	4293      	cmp	r3, r2
 8008e88:	db12      	blt.n	8008eb0 <_putc_r+0x5a>
 8008e8a:	b2eb      	uxtb	r3, r5
 8008e8c:	2b0a      	cmp	r3, #10
 8008e8e:	d00f      	beq.n	8008eb0 <_putc_r+0x5a>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	6022      	str	r2, [r4, #0]
 8008e96:	701d      	strb	r5, [r3, #0]
 8008e98:	b2ed      	uxtb	r5, r5
 8008e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e9c:	07da      	lsls	r2, r3, #31
 8008e9e:	d405      	bmi.n	8008eac <_putc_r+0x56>
 8008ea0:	89a3      	ldrh	r3, [r4, #12]
 8008ea2:	059b      	lsls	r3, r3, #22
 8008ea4:	d402      	bmi.n	8008eac <_putc_r+0x56>
 8008ea6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ea8:	f7ff fb9c 	bl	80085e4 <__retarget_lock_release_recursive>
 8008eac:	4628      	mov	r0, r5
 8008eae:	bd70      	pop	{r4, r5, r6, pc}
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f7ff fa76 	bl	80083a6 <__swbuf_r>
 8008eba:	4605      	mov	r5, r0
 8008ebc:	e7ed      	b.n	8008e9a <_putc_r+0x44>
	...

08008ec0 <_fstat_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4d06      	ldr	r5, [pc, #24]	@ (8008ee0 <_fstat_r+0x20>)
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	602b      	str	r3, [r5, #0]
 8008ece:	f7f8 f92e 	bl	800112e <_fstat>
 8008ed2:	1c43      	adds	r3, r0, #1
 8008ed4:	d102      	bne.n	8008edc <_fstat_r+0x1c>
 8008ed6:	682b      	ldr	r3, [r5, #0]
 8008ed8:	b103      	cbz	r3, 8008edc <_fstat_r+0x1c>
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	bd38      	pop	{r3, r4, r5, pc}
 8008ede:	bf00      	nop
 8008ee0:	20000370 	.word	0x20000370

08008ee4 <_isatty_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	4d05      	ldr	r5, [pc, #20]	@ (8008f00 <_isatty_r+0x1c>)
 8008eea:	4604      	mov	r4, r0
 8008eec:	4608      	mov	r0, r1
 8008eee:	602b      	str	r3, [r5, #0]
 8008ef0:	f7f8 f92d 	bl	800114e <_isatty>
 8008ef4:	1c43      	adds	r3, r0, #1
 8008ef6:	d102      	bne.n	8008efe <_isatty_r+0x1a>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	b103      	cbz	r3, 8008efe <_isatty_r+0x1a>
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	bd38      	pop	{r3, r4, r5, pc}
 8008f00:	20000370 	.word	0x20000370

08008f04 <memchr>:
 8008f04:	b2c9      	uxtb	r1, r1
 8008f06:	4603      	mov	r3, r0
 8008f08:	4402      	add	r2, r0
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	d101      	bne.n	8008f16 <memchr+0x12>
 8008f12:	2000      	movs	r0, #0
 8008f14:	e003      	b.n	8008f1e <memchr+0x1a>
 8008f16:	7804      	ldrb	r4, [r0, #0]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	428c      	cmp	r4, r1
 8008f1c:	d1f6      	bne.n	8008f0c <memchr+0x8>
 8008f1e:	bd10      	pop	{r4, pc}

08008f20 <_init>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr

08008f2c <_fini>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr
