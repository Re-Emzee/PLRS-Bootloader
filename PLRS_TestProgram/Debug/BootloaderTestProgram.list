
BootloaderTestProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009084  08100238  08100238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016b  081092bc  081092bc  0000a2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109428  08109428  0000a428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08109430  08109430  0000a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08109434  08109434  0000a434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000a0  20000000  08109438  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002f6  200000a0  081094d8  0000b0a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000602  20000396  081094d8  0000b396  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cad2  00000000  00000000  0000b0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003963  00000000  00000000  00027ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017e0  00000000  00000000  0002b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001270  00000000  00000000  0002ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003542a  00000000  00000000  0002df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000204f8  00000000  00000000  0006338a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014b3cb  00000000  00000000  00083882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cec4d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006d4c  00000000  00000000  001cec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000067  00000000  00000000  001d59dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100238 <__do_global_dtors_aux>:
 8100238:	b510      	push	{r4, lr}
 810023a:	4c05      	ldr	r4, [pc, #20]	@ (8100250 <__do_global_dtors_aux+0x18>)
 810023c:	7823      	ldrb	r3, [r4, #0]
 810023e:	b933      	cbnz	r3, 810024e <__do_global_dtors_aux+0x16>
 8100240:	4b04      	ldr	r3, [pc, #16]	@ (8100254 <__do_global_dtors_aux+0x1c>)
 8100242:	b113      	cbz	r3, 810024a <__do_global_dtors_aux+0x12>
 8100244:	4804      	ldr	r0, [pc, #16]	@ (8100258 <__do_global_dtors_aux+0x20>)
 8100246:	f3af 8000 	nop.w
 810024a:	2301      	movs	r3, #1
 810024c:	7023      	strb	r3, [r4, #0]
 810024e:	bd10      	pop	{r4, pc}
 8100250:	200000a0 	.word	0x200000a0
 8100254:	00000000 	.word	0x00000000
 8100258:	081092a4 	.word	0x081092a4

0810025c <frame_dummy>:
 810025c:	b508      	push	{r3, lr}
 810025e:	4b03      	ldr	r3, [pc, #12]	@ (810026c <frame_dummy+0x10>)
 8100260:	b11b      	cbz	r3, 810026a <frame_dummy+0xe>
 8100262:	4903      	ldr	r1, [pc, #12]	@ (8100270 <frame_dummy+0x14>)
 8100264:	4803      	ldr	r0, [pc, #12]	@ (8100274 <frame_dummy+0x18>)
 8100266:	f3af 8000 	nop.w
 810026a:	bd08      	pop	{r3, pc}
 810026c:	00000000 	.word	0x00000000
 8100270:	200000a4 	.word	0x200000a4
 8100274:	081092a4 	.word	0x081092a4

08100278 <__aeabi_uldivmod>:
 8100278:	b953      	cbnz	r3, 8100290 <__aeabi_uldivmod+0x18>
 810027a:	b94a      	cbnz	r2, 8100290 <__aeabi_uldivmod+0x18>
 810027c:	2900      	cmp	r1, #0
 810027e:	bf08      	it	eq
 8100280:	2800      	cmpeq	r0, #0
 8100282:	bf1c      	itt	ne
 8100284:	f04f 31ff 	movne.w	r1, #4294967295
 8100288:	f04f 30ff 	movne.w	r0, #4294967295
 810028c:	f000 b97e 	b.w	810058c <__aeabi_idiv0>
 8100290:	f1ad 0c08 	sub.w	ip, sp, #8
 8100294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100298:	f000 f806 	bl	81002a8 <__udivmoddi4>
 810029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 81002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81002a4:	b004      	add	sp, #16
 81002a6:	4770      	bx	lr

081002a8 <__udivmoddi4>:
 81002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 81002ae:	460c      	mov	r4, r1
 81002b0:	2b00      	cmp	r3, #0
 81002b2:	d14d      	bne.n	8100350 <__udivmoddi4+0xa8>
 81002b4:	428a      	cmp	r2, r1
 81002b6:	460f      	mov	r7, r1
 81002b8:	4684      	mov	ip, r0
 81002ba:	4696      	mov	lr, r2
 81002bc:	fab2 f382 	clz	r3, r2
 81002c0:	d960      	bls.n	8100384 <__udivmoddi4+0xdc>
 81002c2:	b14b      	cbz	r3, 81002d8 <__udivmoddi4+0x30>
 81002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 81002c8:	f1c3 0220 	rsb	r2, r3, #32
 81002cc:	409f      	lsls	r7, r3
 81002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 81002d2:	fa20 f202 	lsr.w	r2, r0, r2
 81002d6:	4317      	orrs	r7, r2
 81002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 81002dc:	fa1f f48e 	uxth.w	r4, lr
 81002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 81002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 81002e8:	fb06 7711 	mls	r7, r6, r1, r7
 81002ec:	fb01 f004 	mul.w	r0, r1, r4
 81002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 81002f4:	4290      	cmp	r0, r2
 81002f6:	d908      	bls.n	810030a <__udivmoddi4+0x62>
 81002f8:	eb1e 0202 	adds.w	r2, lr, r2
 81002fc:	f101 37ff 	add.w	r7, r1, #4294967295
 8100300:	d202      	bcs.n	8100308 <__udivmoddi4+0x60>
 8100302:	4290      	cmp	r0, r2
 8100304:	f200 812d 	bhi.w	8100562 <__udivmoddi4+0x2ba>
 8100308:	4639      	mov	r1, r7
 810030a:	1a12      	subs	r2, r2, r0
 810030c:	fa1f fc8c 	uxth.w	ip, ip
 8100310:	fbb2 f0f6 	udiv	r0, r2, r6
 8100314:	fb06 2210 	mls	r2, r6, r0, r2
 8100318:	fb00 f404 	mul.w	r4, r0, r4
 810031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8100320:	4564      	cmp	r4, ip
 8100322:	d908      	bls.n	8100336 <__udivmoddi4+0x8e>
 8100324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8100328:	f100 32ff 	add.w	r2, r0, #4294967295
 810032c:	d202      	bcs.n	8100334 <__udivmoddi4+0x8c>
 810032e:	4564      	cmp	r4, ip
 8100330:	f200 811a 	bhi.w	8100568 <__udivmoddi4+0x2c0>
 8100334:	4610      	mov	r0, r2
 8100336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810033a:	ebac 0c04 	sub.w	ip, ip, r4
 810033e:	2100      	movs	r1, #0
 8100340:	b125      	cbz	r5, 810034c <__udivmoddi4+0xa4>
 8100342:	fa2c f303 	lsr.w	r3, ip, r3
 8100346:	2200      	movs	r2, #0
 8100348:	e9c5 3200 	strd	r3, r2, [r5]
 810034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8100350:	428b      	cmp	r3, r1
 8100352:	d905      	bls.n	8100360 <__udivmoddi4+0xb8>
 8100354:	b10d      	cbz	r5, 810035a <__udivmoddi4+0xb2>
 8100356:	e9c5 0100 	strd	r0, r1, [r5]
 810035a:	2100      	movs	r1, #0
 810035c:	4608      	mov	r0, r1
 810035e:	e7f5      	b.n	810034c <__udivmoddi4+0xa4>
 8100360:	fab3 f183 	clz	r1, r3
 8100364:	2900      	cmp	r1, #0
 8100366:	d14d      	bne.n	8100404 <__udivmoddi4+0x15c>
 8100368:	42a3      	cmp	r3, r4
 810036a:	f0c0 80f2 	bcc.w	8100552 <__udivmoddi4+0x2aa>
 810036e:	4290      	cmp	r0, r2
 8100370:	f080 80ef 	bcs.w	8100552 <__udivmoddi4+0x2aa>
 8100374:	4606      	mov	r6, r0
 8100376:	4623      	mov	r3, r4
 8100378:	4608      	mov	r0, r1
 810037a:	2d00      	cmp	r5, #0
 810037c:	d0e6      	beq.n	810034c <__udivmoddi4+0xa4>
 810037e:	e9c5 6300 	strd	r6, r3, [r5]
 8100382:	e7e3      	b.n	810034c <__udivmoddi4+0xa4>
 8100384:	2b00      	cmp	r3, #0
 8100386:	f040 80a2 	bne.w	81004ce <__udivmoddi4+0x226>
 810038a:	1a8a      	subs	r2, r1, r2
 810038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8100390:	fa1f f68e 	uxth.w	r6, lr
 8100394:	2101      	movs	r1, #1
 8100396:	fbb2 f4f7 	udiv	r4, r2, r7
 810039a:	fb07 2014 	mls	r0, r7, r4, r2
 810039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 81003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 81003a6:	fb06 f004 	mul.w	r0, r6, r4
 81003aa:	4290      	cmp	r0, r2
 81003ac:	d90f      	bls.n	81003ce <__udivmoddi4+0x126>
 81003ae:	eb1e 0202 	adds.w	r2, lr, r2
 81003b2:	f104 38ff 	add.w	r8, r4, #4294967295
 81003b6:	bf2c      	ite	cs
 81003b8:	f04f 0901 	movcs.w	r9, #1
 81003bc:	f04f 0900 	movcc.w	r9, #0
 81003c0:	4290      	cmp	r0, r2
 81003c2:	d903      	bls.n	81003cc <__udivmoddi4+0x124>
 81003c4:	f1b9 0f00 	cmp.w	r9, #0
 81003c8:	f000 80c8 	beq.w	810055c <__udivmoddi4+0x2b4>
 81003cc:	4644      	mov	r4, r8
 81003ce:	1a12      	subs	r2, r2, r0
 81003d0:	fa1f fc8c 	uxth.w	ip, ip
 81003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 81003d8:	fb07 2210 	mls	r2, r7, r0, r2
 81003dc:	fb00 f606 	mul.w	r6, r0, r6
 81003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 81003e4:	4566      	cmp	r6, ip
 81003e6:	d908      	bls.n	81003fa <__udivmoddi4+0x152>
 81003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 81003ec:	f100 32ff 	add.w	r2, r0, #4294967295
 81003f0:	d202      	bcs.n	81003f8 <__udivmoddi4+0x150>
 81003f2:	4566      	cmp	r6, ip
 81003f4:	f200 80bb 	bhi.w	810056e <__udivmoddi4+0x2c6>
 81003f8:	4610      	mov	r0, r2
 81003fa:	ebac 0c06 	sub.w	ip, ip, r6
 81003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100402:	e79d      	b.n	8100340 <__udivmoddi4+0x98>
 8100404:	f1c1 0620 	rsb	r6, r1, #32
 8100408:	408b      	lsls	r3, r1
 810040a:	fa04 fe01 	lsl.w	lr, r4, r1
 810040e:	fa22 f706 	lsr.w	r7, r2, r6
 8100412:	fa20 fc06 	lsr.w	ip, r0, r6
 8100416:	40f4      	lsrs	r4, r6
 8100418:	408a      	lsls	r2, r1
 810041a:	431f      	orrs	r7, r3
 810041c:	ea4e 030c 	orr.w	r3, lr, ip
 8100420:	fa00 fe01 	lsl.w	lr, r0, r1
 8100424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810042c:	fa1f fc87 	uxth.w	ip, r7
 8100430:	fbb4 f0f8 	udiv	r0, r4, r8
 8100434:	fb08 4410 	mls	r4, r8, r0, r4
 8100438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810043c:	fb00 f90c 	mul.w	r9, r0, ip
 8100440:	45a1      	cmp	r9, r4
 8100442:	d90e      	bls.n	8100462 <__udivmoddi4+0x1ba>
 8100444:	193c      	adds	r4, r7, r4
 8100446:	f100 3aff 	add.w	sl, r0, #4294967295
 810044a:	bf2c      	ite	cs
 810044c:	f04f 0b01 	movcs.w	fp, #1
 8100450:	f04f 0b00 	movcc.w	fp, #0
 8100454:	45a1      	cmp	r9, r4
 8100456:	d903      	bls.n	8100460 <__udivmoddi4+0x1b8>
 8100458:	f1bb 0f00 	cmp.w	fp, #0
 810045c:	f000 8093 	beq.w	8100586 <__udivmoddi4+0x2de>
 8100460:	4650      	mov	r0, sl
 8100462:	eba4 0409 	sub.w	r4, r4, r9
 8100466:	fa1f f983 	uxth.w	r9, r3
 810046a:	fbb4 f3f8 	udiv	r3, r4, r8
 810046e:	fb08 4413 	mls	r4, r8, r3, r4
 8100472:	fb03 fc0c 	mul.w	ip, r3, ip
 8100476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810047a:	45a4      	cmp	ip, r4
 810047c:	d906      	bls.n	810048c <__udivmoddi4+0x1e4>
 810047e:	193c      	adds	r4, r7, r4
 8100480:	f103 38ff 	add.w	r8, r3, #4294967295
 8100484:	d201      	bcs.n	810048a <__udivmoddi4+0x1e2>
 8100486:	45a4      	cmp	ip, r4
 8100488:	d87a      	bhi.n	8100580 <__udivmoddi4+0x2d8>
 810048a:	4643      	mov	r3, r8
 810048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8100490:	eba4 040c 	sub.w	r4, r4, ip
 8100494:	fba0 9802 	umull	r9, r8, r0, r2
 8100498:	4544      	cmp	r4, r8
 810049a:	46cc      	mov	ip, r9
 810049c:	4643      	mov	r3, r8
 810049e:	d302      	bcc.n	81004a6 <__udivmoddi4+0x1fe>
 81004a0:	d106      	bne.n	81004b0 <__udivmoddi4+0x208>
 81004a2:	45ce      	cmp	lr, r9
 81004a4:	d204      	bcs.n	81004b0 <__udivmoddi4+0x208>
 81004a6:	3801      	subs	r0, #1
 81004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 81004ac:	eb68 0307 	sbc.w	r3, r8, r7
 81004b0:	b15d      	cbz	r5, 81004ca <__udivmoddi4+0x222>
 81004b2:	ebbe 020c 	subs.w	r2, lr, ip
 81004b6:	eb64 0403 	sbc.w	r4, r4, r3
 81004ba:	fa04 f606 	lsl.w	r6, r4, r6
 81004be:	fa22 f301 	lsr.w	r3, r2, r1
 81004c2:	40cc      	lsrs	r4, r1
 81004c4:	431e      	orrs	r6, r3
 81004c6:	e9c5 6400 	strd	r6, r4, [r5]
 81004ca:	2100      	movs	r1, #0
 81004cc:	e73e      	b.n	810034c <__udivmoddi4+0xa4>
 81004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 81004d2:	f1c3 0120 	rsb	r1, r3, #32
 81004d6:	fa04 f203 	lsl.w	r2, r4, r3
 81004da:	fa00 fc03 	lsl.w	ip, r0, r3
 81004de:	40cc      	lsrs	r4, r1
 81004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 81004e4:	fa20 f101 	lsr.w	r1, r0, r1
 81004e8:	fa1f f68e 	uxth.w	r6, lr
 81004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 81004f0:	430a      	orrs	r2, r1
 81004f2:	fb07 4410 	mls	r4, r7, r0, r4
 81004f6:	0c11      	lsrs	r1, r2, #16
 81004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 81004fc:	fb00 f406 	mul.w	r4, r0, r6
 8100500:	428c      	cmp	r4, r1
 8100502:	d90e      	bls.n	8100522 <__udivmoddi4+0x27a>
 8100504:	eb1e 0101 	adds.w	r1, lr, r1
 8100508:	f100 38ff 	add.w	r8, r0, #4294967295
 810050c:	bf2c      	ite	cs
 810050e:	f04f 0901 	movcs.w	r9, #1
 8100512:	f04f 0900 	movcc.w	r9, #0
 8100516:	428c      	cmp	r4, r1
 8100518:	d902      	bls.n	8100520 <__udivmoddi4+0x278>
 810051a:	f1b9 0f00 	cmp.w	r9, #0
 810051e:	d02c      	beq.n	810057a <__udivmoddi4+0x2d2>
 8100520:	4640      	mov	r0, r8
 8100522:	1b09      	subs	r1, r1, r4
 8100524:	b292      	uxth	r2, r2
 8100526:	fbb1 f4f7 	udiv	r4, r1, r7
 810052a:	fb07 1114 	mls	r1, r7, r4, r1
 810052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100532:	fb04 f106 	mul.w	r1, r4, r6
 8100536:	4291      	cmp	r1, r2
 8100538:	d907      	bls.n	810054a <__udivmoddi4+0x2a2>
 810053a:	eb1e 0202 	adds.w	r2, lr, r2
 810053e:	f104 38ff 	add.w	r8, r4, #4294967295
 8100542:	d201      	bcs.n	8100548 <__udivmoddi4+0x2a0>
 8100544:	4291      	cmp	r1, r2
 8100546:	d815      	bhi.n	8100574 <__udivmoddi4+0x2cc>
 8100548:	4644      	mov	r4, r8
 810054a:	1a52      	subs	r2, r2, r1
 810054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8100550:	e721      	b.n	8100396 <__udivmoddi4+0xee>
 8100552:	1a86      	subs	r6, r0, r2
 8100554:	eb64 0303 	sbc.w	r3, r4, r3
 8100558:	2001      	movs	r0, #1
 810055a:	e70e      	b.n	810037a <__udivmoddi4+0xd2>
 810055c:	3c02      	subs	r4, #2
 810055e:	4472      	add	r2, lr
 8100560:	e735      	b.n	81003ce <__udivmoddi4+0x126>
 8100562:	3902      	subs	r1, #2
 8100564:	4472      	add	r2, lr
 8100566:	e6d0      	b.n	810030a <__udivmoddi4+0x62>
 8100568:	44f4      	add	ip, lr
 810056a:	3802      	subs	r0, #2
 810056c:	e6e3      	b.n	8100336 <__udivmoddi4+0x8e>
 810056e:	44f4      	add	ip, lr
 8100570:	3802      	subs	r0, #2
 8100572:	e742      	b.n	81003fa <__udivmoddi4+0x152>
 8100574:	3c02      	subs	r4, #2
 8100576:	4472      	add	r2, lr
 8100578:	e7e7      	b.n	810054a <__udivmoddi4+0x2a2>
 810057a:	3802      	subs	r0, #2
 810057c:	4471      	add	r1, lr
 810057e:	e7d0      	b.n	8100522 <__udivmoddi4+0x27a>
 8100580:	3b02      	subs	r3, #2
 8100582:	443c      	add	r4, r7
 8100584:	e782      	b.n	810048c <__udivmoddi4+0x1e4>
 8100586:	3802      	subs	r0, #2
 8100588:	443c      	add	r4, r7
 810058a:	e76a      	b.n	8100462 <__udivmoddi4+0x1ba>

0810058c <__aeabi_idiv0>:
 810058c:	4770      	bx	lr
 810058e:	bf00      	nop

08100590 <CAN_SetRxBufferSize>:
/**
 * @brief Allocates memory for FDCAN receive buffers.
 * @param RxData1_Length: Length of buffer for FIFO0.
 * @param RxData2_Length: Length of buffer for FIFO1.
 */
void CAN_SetRxBufferSize(uint16_t RxData1_Length, uint16_t RxData2_Length) {
 8100590:	b580      	push	{r7, lr}
 8100592:	b082      	sub	sp, #8
 8100594:	af00      	add	r7, sp, #0
 8100596:	4603      	mov	r3, r0
 8100598:	460a      	mov	r2, r1
 810059a:	80fb      	strh	r3, [r7, #6]
 810059c:	4613      	mov	r3, r2
 810059e:	80bb      	strh	r3, [r7, #4]
    if (RxData1 != NULL) {
 81005a0:	4b1a      	ldr	r3, [pc, #104]	@ (810060c <CAN_SetRxBufferSize+0x7c>)
 81005a2:	681b      	ldr	r3, [r3, #0]
 81005a4:	2b00      	cmp	r3, #0
 81005a6:	d004      	beq.n	81005b2 <CAN_SetRxBufferSize+0x22>
        free(RxData1);
 81005a8:	4b18      	ldr	r3, [pc, #96]	@ (810060c <CAN_SetRxBufferSize+0x7c>)
 81005aa:	681b      	ldr	r3, [r3, #0]
 81005ac:	4618      	mov	r0, r3
 81005ae:	f007 ff23 	bl	81083f8 <free>
    }
    if (RxData2 != NULL) {
 81005b2:	4b17      	ldr	r3, [pc, #92]	@ (8100610 <CAN_SetRxBufferSize+0x80>)
 81005b4:	681b      	ldr	r3, [r3, #0]
 81005b6:	2b00      	cmp	r3, #0
 81005b8:	d004      	beq.n	81005c4 <CAN_SetRxBufferSize+0x34>
        free(RxData2);
 81005ba:	4b15      	ldr	r3, [pc, #84]	@ (8100610 <CAN_SetRxBufferSize+0x80>)
 81005bc:	681b      	ldr	r3, [r3, #0]
 81005be:	4618      	mov	r0, r3
 81005c0:	f007 ff1a 	bl	81083f8 <free>
    }

    RxData1_BufferLength = RxData1_Length;
 81005c4:	4a13      	ldr	r2, [pc, #76]	@ (8100614 <CAN_SetRxBufferSize+0x84>)
 81005c6:	88fb      	ldrh	r3, [r7, #6]
 81005c8:	8013      	strh	r3, [r2, #0]
    RxData2_BufferLength = RxData2_Length;
 81005ca:	4a13      	ldr	r2, [pc, #76]	@ (8100618 <CAN_SetRxBufferSize+0x88>)
 81005cc:	88bb      	ldrh	r3, [r7, #4]
 81005ce:	8013      	strh	r3, [r2, #0]

    RxData1 = (uint8_t* )malloc(RxData1_Length);
 81005d0:	88fb      	ldrh	r3, [r7, #6]
 81005d2:	4618      	mov	r0, r3
 81005d4:	f007 ff08 	bl	81083e8 <malloc>
 81005d8:	4603      	mov	r3, r0
 81005da:	461a      	mov	r2, r3
 81005dc:	4b0b      	ldr	r3, [pc, #44]	@ (810060c <CAN_SetRxBufferSize+0x7c>)
 81005de:	601a      	str	r2, [r3, #0]
    RxData2 = (uint8_t* )malloc(RxData2_Length);
 81005e0:	88bb      	ldrh	r3, [r7, #4]
 81005e2:	4618      	mov	r0, r3
 81005e4:	f007 ff00 	bl	81083e8 <malloc>
 81005e8:	4603      	mov	r3, r0
 81005ea:	461a      	mov	r2, r3
 81005ec:	4b08      	ldr	r3, [pc, #32]	@ (8100610 <CAN_SetRxBufferSize+0x80>)
 81005ee:	601a      	str	r2, [r3, #0]
    if (RxData1 == NULL || RxData2 == NULL) {
 81005f0:	4b06      	ldr	r3, [pc, #24]	@ (810060c <CAN_SetRxBufferSize+0x7c>)
 81005f2:	681b      	ldr	r3, [r3, #0]
 81005f4:	2b00      	cmp	r3, #0
 81005f6:	d003      	beq.n	8100600 <CAN_SetRxBufferSize+0x70>
 81005f8:	4b05      	ldr	r3, [pc, #20]	@ (8100610 <CAN_SetRxBufferSize+0x80>)
 81005fa:	681b      	ldr	r3, [r3, #0]
 81005fc:	2b00      	cmp	r3, #0
 81005fe:	d101      	bne.n	8100604 <CAN_SetRxBufferSize+0x74>
        Error_Handler();
 8100600:	f000 fc74 	bl	8100eec <Error_Handler>
    }
}
 8100604:	bf00      	nop
 8100606:	3708      	adds	r7, #8
 8100608:	46bd      	mov	sp, r7
 810060a:	bd80      	pop	{r7, pc}
 810060c:	200000c0 	.word	0x200000c0
 8100610:	200000c4 	.word	0x200000c4
 8100614:	200000c8 	.word	0x200000c8
 8100618:	200000ca 	.word	0x200000ca

0810061c <CAN_Init>:
 * 			Configures global filter: Filter all remote frames with STD and EXT ID
 * 									  Reject non matching frames with STD ID and EXT ID
 * 			Starts the FDCAN controller (continuous listening CAN bus)
 * 			Activates Notifications
 */
void CAN_Init(FDCAN_HandleTypeDef *hfdcan1) {
 810061c:	b580      	push	{r7, lr}
 810061e:	b08a      	sub	sp, #40	@ 0x28
 8100620:	af02      	add	r7, sp, #8
 8100622:	6078      	str	r0, [r7, #4]
	/*##-1 Configures FDCAN meta data and controllers*/
	FDCAN_FilterTypeDef sFilterConfig;
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8100624:	2300      	movs	r3, #0
 8100626:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 8100628:	2300      	movs	r3, #0
 810062a:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE;
 810062c:	2300      	movs	r3, #0
 810062e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8100630:	2301      	movs	r3, #1
 8100632:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = 0x000;
 8100634:	2300      	movs	r3, #0
 8100636:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = 0x7FF;
 8100638:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 810063c:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(hfdcan1, &sFilterConfig) != HAL_OK)
 810063e:	f107 0308 	add.w	r3, r7, #8
 8100642:	4619      	mov	r1, r3
 8100644:	6878      	ldr	r0, [r7, #4]
 8100646:	f001 fc5b 	bl	8101f00 <HAL_FDCAN_ConfigFilter>
 810064a:	4603      	mov	r3, r0
 810064c:	2b00      	cmp	r3, #0
 810064e:	d001      	beq.n	8100654 <CAN_Init+0x38>
	{
	Error_Handler();
 8100650:	f000 fc4c 	bl	8100eec <Error_Handler>
	}

	sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8100654:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8100658:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIndex = 0;
 810065a:	2300      	movs	r3, #0
 810065c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterType = FDCAN_FILTER_RANGE_NO_EIDM;
 810065e:	2303      	movs	r3, #3
 8100660:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO1;
 8100662:	2302      	movs	r3, #2
 8100664:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterID1 = 0x1111111;
 8100666:	4b20      	ldr	r3, [pc, #128]	@ (81006e8 <CAN_Init+0xcc>)
 8100668:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterID2 = 0x2222222;
 810066a:	4b20      	ldr	r3, [pc, #128]	@ (81006ec <CAN_Init+0xd0>)
 810066c:	61fb      	str	r3, [r7, #28]
	if (HAL_FDCAN_ConfigFilter(hfdcan1, &sFilterConfig) != HAL_OK)
 810066e:	f107 0308 	add.w	r3, r7, #8
 8100672:	4619      	mov	r1, r3
 8100674:	6878      	ldr	r0, [r7, #4]
 8100676:	f001 fc43 	bl	8101f00 <HAL_FDCAN_ConfigFilter>
 810067a:	4603      	mov	r3, r0
 810067c:	2b00      	cmp	r3, #0
 810067e:	d001      	beq.n	8100684 <CAN_Init+0x68>
	{
	Error_Handler();
 8100680:	f000 fc34 	bl	8100eec <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8100684:	2300      	movs	r3, #0
 8100686:	9300      	str	r3, [sp, #0]
 8100688:	2300      	movs	r3, #0
 810068a:	2200      	movs	r2, #0
 810068c:	2100      	movs	r1, #0
 810068e:	6878      	ldr	r0, [r7, #4]
 8100690:	f001 fc90 	bl	8101fb4 <HAL_FDCAN_ConfigGlobalFilter>
 8100694:	4603      	mov	r3, r0
 8100696:	2b00      	cmp	r3, #0
 8100698:	d001      	beq.n	810069e <CAN_Init+0x82>
	{
	  Error_Handler();
 810069a:	f000 fc27 	bl	8100eec <Error_Handler>
	}

	/*##-2 Start FDCAN controller (continuous listening CAN bus) ##############*/
	CanStartStatus = HAL_FDCAN_Start(hfdcan1);
 810069e:	6878      	ldr	r0, [r7, #4]
 81006a0:	f001 fcb9 	bl	8102016 <HAL_FDCAN_Start>
 81006a4:	4603      	mov	r3, r0
 81006a6:	461a      	mov	r2, r3
 81006a8:	4b11      	ldr	r3, [pc, #68]	@ (81006f0 <CAN_Init+0xd4>)
 81006aa:	701a      	strb	r2, [r3, #0]
	if (CanStartStatus != HAL_OK)
 81006ac:	4b10      	ldr	r3, [pc, #64]	@ (81006f0 <CAN_Init+0xd4>)
 81006ae:	781b      	ldrb	r3, [r3, #0]
 81006b0:	2b00      	cmp	r3, #0
 81006b2:	d001      	beq.n	81006b8 <CAN_Init+0x9c>
	{
	Error_Handler();
 81006b4:	f000 fc1a 	bl	8100eec <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 81006b8:	2200      	movs	r2, #0
 81006ba:	2101      	movs	r1, #1
 81006bc:	6878      	ldr	r0, [r7, #4]
 81006be:	f001 fe1f 	bl	8102300 <HAL_FDCAN_ActivateNotification>
 81006c2:	4603      	mov	r3, r0
 81006c4:	2b00      	cmp	r3, #0
 81006c6:	d001      	beq.n	81006cc <CAN_Init+0xb0>
	{
	Error_Handler();
 81006c8:	f000 fc10 	bl	8100eec <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(hfdcan1, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 81006cc:	2200      	movs	r2, #0
 81006ce:	2108      	movs	r1, #8
 81006d0:	6878      	ldr	r0, [r7, #4]
 81006d2:	f001 fe15 	bl	8102300 <HAL_FDCAN_ActivateNotification>
 81006d6:	4603      	mov	r3, r0
 81006d8:	2b00      	cmp	r3, #0
 81006da:	d001      	beq.n	81006e0 <CAN_Init+0xc4>
	{
	Error_Handler();
 81006dc:	f000 fc06 	bl	8100eec <Error_Handler>
	}
}
 81006e0:	bf00      	nop
 81006e2:	3720      	adds	r7, #32
 81006e4:	46bd      	mov	sp, r7
 81006e6:	bd80      	pop	{r7, pc}
 81006e8:	01111111 	.word	0x01111111
 81006ec:	02222222 	.word	0x02222222
 81006f0:	200000bc 	.word	0x200000bc

081006f4 <CAN_Transmit>:
 * 						FDCAN_DLC_BYTES_24, FDCAN_DLC_BYTES_32, FDCAN_DLC_BYTES_48,
 * 						FDCAN_DLC_BYTES_64
 * @param 	DataBuffer: Pointer to the TxData buffer.
 * @return 	HAL_StatusTypeDef HAL_OK if successful, !HAL_OK otherwise.
 */
HAL_StatusTypeDef CAN_Transmit(uint32_t Identifier, uint32_t IdType, uint32_t DataLength, uint8_t* DataBuffer, FDCAN_HandleTypeDef *hfdcan1) {
 81006f4:	b580      	push	{r7, lr}
 81006f6:	b08e      	sub	sp, #56	@ 0x38
 81006f8:	af00      	add	r7, sp, #0
 81006fa:	60f8      	str	r0, [r7, #12]
 81006fc:	60b9      	str	r1, [r7, #8]
 81006fe:	607a      	str	r2, [r7, #4]
 8100700:	603b      	str	r3, [r7, #0]
    FDCAN_TxHeaderTypeDef TxHeader;

    TxHeader.Identifier = Identifier;
 8100702:	68fb      	ldr	r3, [r7, #12]
 8100704:	617b      	str	r3, [r7, #20]
    TxHeader.IdType = IdType;
 8100706:	68bb      	ldr	r3, [r7, #8]
 8100708:	61bb      	str	r3, [r7, #24]
    TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 810070a:	2300      	movs	r3, #0
 810070c:	61fb      	str	r3, [r7, #28]
    TxHeader.DataLength = DataLength;
 810070e:	687b      	ldr	r3, [r7, #4]
 8100710:	623b      	str	r3, [r7, #32]
    TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8100712:	2300      	movs	r3, #0
 8100714:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8100716:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810071a:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.FDFormat = FDCAN_FD_CAN;
 810071c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8100720:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8100722:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8100726:	633b      	str	r3, [r7, #48]	@ 0x30

    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan1, &TxHeader, DataBuffer);
 8100728:	f107 0314 	add.w	r3, r7, #20
 810072c:	683a      	ldr	r2, [r7, #0]
 810072e:	4619      	mov	r1, r3
 8100730:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8100732:	f001 fc98 	bl	8102066 <HAL_FDCAN_AddMessageToTxFifoQ>
 8100736:	4603      	mov	r3, r0
}
 8100738:	4618      	mov	r0, r3
 810073a:	3738      	adds	r7, #56	@ 0x38
 810073c:	46bd      	mov	sp, r7
 810073e:	bd80      	pop	{r7, pc}

08100740 <HAL_FDCAN_RxFifo1Callback>:
/**
 * @brief Callback function for handling messages received in FIFO1.
 * @param hfdcan: Pointer to FDCAN handle.
 * @param RxFifo1ITs: FIFO1 interrupt flags.
 */
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs) {
 8100740:	b580      	push	{r7, lr}
 8100742:	b08c      	sub	sp, #48	@ 0x30
 8100744:	af00      	add	r7, sp, #0
 8100746:	6078      	str	r0, [r7, #4]
 8100748:	6039      	str	r1, [r7, #0]
    if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET) {
 810074a:	683b      	ldr	r3, [r7, #0]
 810074c:	f003 0308 	and.w	r3, r3, #8
 8100750:	2b00      	cmp	r3, #0
 8100752:	d025      	beq.n	81007a0 <HAL_FDCAN_RxFifo1Callback+0x60>
        FDCAN_RxHeaderTypeDef RxHeader;
        memset(RxData2, 0, 64);
 8100754:	4b14      	ldr	r3, [pc, #80]	@ (81007a8 <HAL_FDCAN_RxFifo1Callback+0x68>)
 8100756:	681b      	ldr	r3, [r3, #0]
 8100758:	2240      	movs	r2, #64	@ 0x40
 810075a:	2100      	movs	r1, #0
 810075c:	4618      	mov	r0, r3
 810075e:	f008 f8ad 	bl	81088bc <memset>
        if (RxData2 == NULL) {
 8100762:	4b11      	ldr	r3, [pc, #68]	@ (81007a8 <HAL_FDCAN_RxFifo1Callback+0x68>)
 8100764:	681b      	ldr	r3, [r3, #0]
 8100766:	2b00      	cmp	r3, #0
 8100768:	d101      	bne.n	810076e <HAL_FDCAN_RxFifo1Callback+0x2e>
            Error_Handler();
 810076a:	f000 fbbf 	bl	8100eec <Error_Handler>
        }
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &RxHeader, RxData2) != HAL_OK) {
 810076e:	4b0e      	ldr	r3, [pc, #56]	@ (81007a8 <HAL_FDCAN_RxFifo1Callback+0x68>)
 8100770:	681b      	ldr	r3, [r3, #0]
 8100772:	f107 0208 	add.w	r2, r7, #8
 8100776:	2141      	movs	r1, #65	@ 0x41
 8100778:	6878      	ldr	r0, [r7, #4]
 810077a:	f001 fcb9 	bl	81020f0 <HAL_FDCAN_GetRxMessage>
 810077e:	4603      	mov	r3, r0
 8100780:	2b00      	cmp	r3, #0
 8100782:	d001      	beq.n	8100788 <HAL_FDCAN_RxFifo1Callback+0x48>
            Error_Handler();
 8100784:	f000 fbb2 	bl	8100eec <Error_Handler>
        }
        RxData2_BufferLength = dlc_to_bytes(RxHeader.DataLength);
 8100788:	697b      	ldr	r3, [r7, #20]
 810078a:	b2db      	uxtb	r3, r3
 810078c:	4618      	mov	r0, r3
 810078e:	f000 f811 	bl	81007b4 <dlc_to_bytes>
 8100792:	4603      	mov	r3, r0
 8100794:	461a      	mov	r2, r3
 8100796:	4b05      	ldr	r3, [pc, #20]	@ (81007ac <HAL_FDCAN_RxFifo1Callback+0x6c>)
 8100798:	801a      	strh	r2, [r3, #0]
        RxData2_Identifier = RxHeader.Identifier;
 810079a:	68bb      	ldr	r3, [r7, #8]
 810079c:	4a04      	ldr	r2, [pc, #16]	@ (81007b0 <HAL_FDCAN_RxFifo1Callback+0x70>)
 810079e:	6013      	str	r3, [r2, #0]
    }
}
 81007a0:	bf00      	nop
 81007a2:	3730      	adds	r7, #48	@ 0x30
 81007a4:	46bd      	mov	sp, r7
 81007a6:	bd80      	pop	{r7, pc}
 81007a8:	200000c4 	.word	0x200000c4
 81007ac:	200000ca 	.word	0x200000ca
 81007b0:	200000cc 	.word	0x200000cc

081007b4 <dlc_to_bytes>:
        printf("FIFO1: No data received.\n");
    }
}

/* DLC to bytes lookup */
uint8_t dlc_to_bytes(uint8_t dlc) {
 81007b4:	b480      	push	{r7}
 81007b6:	b083      	sub	sp, #12
 81007b8:	af00      	add	r7, sp, #0
 81007ba:	4603      	mov	r3, r0
 81007bc:	71fb      	strb	r3, [r7, #7]
    static const uint8_t dlc_lut[16] = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 12, 16, 20, 24, 32, 48, 64
    };
    return dlc_lut[dlc & 0x0F];
 81007be:	79fb      	ldrb	r3, [r7, #7]
 81007c0:	f003 030f 	and.w	r3, r3, #15
 81007c4:	4a03      	ldr	r2, [pc, #12]	@ (81007d4 <dlc_to_bytes+0x20>)
 81007c6:	5cd3      	ldrb	r3, [r2, r3]
}
 81007c8:	4618      	mov	r0, r3
 81007ca:	370c      	adds	r7, #12
 81007cc:	46bd      	mov	sp, r7
 81007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d2:	4770      	bx	lr
 81007d4:	081092d8 	.word	0x081092d8

081007d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 81007d8:	b480      	push	{r7}
 81007da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81007dc:	f3bf 8f4f 	dsb	sy
}
 81007e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 81007e2:	4b06      	ldr	r3, [pc, #24]	@ (81007fc <__NVIC_SystemReset+0x24>)
 81007e4:	68db      	ldr	r3, [r3, #12]
 81007e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 81007ea:	4904      	ldr	r1, [pc, #16]	@ (81007fc <__NVIC_SystemReset+0x24>)
 81007ec:	4b04      	ldr	r3, [pc, #16]	@ (8100800 <__NVIC_SystemReset+0x28>)
 81007ee:	4313      	orrs	r3, r2
 81007f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 81007f2:	f3bf 8f4f 	dsb	sy
}
 81007f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 81007f8:	bf00      	nop
 81007fa:	e7fd      	b.n	81007f8 <__NVIC_SystemReset+0x20>
 81007fc:	e000ed00 	.word	0xe000ed00
 8100800:	05fa0004 	.word	0x05fa0004

08100804 <Flash_Parse>:
extern FDCAN_HandleTypeDef hfdcan1;
extern uint32_t _bflag;
static uint32_t write_offset = 0; //indirectly tells us the size of the program, use padded crc
static bool receiving_firmware = false;

void Flash_Parse(uint8_t* RxData, uint32_t Data_Length) {
 8100804:	b580      	push	{r7, lr}
 8100806:	b08c      	sub	sp, #48	@ 0x30
 8100808:	af02      	add	r7, sp, #8
 810080a:	6078      	str	r0, [r7, #4]
 810080c:	6039      	str	r1, [r7, #0]
    if (!receiving_firmware) {
 810080e:	4b47      	ldr	r3, [pc, #284]	@ (810092c <Flash_Parse+0x128>)
 8100810:	781b      	ldrb	r3, [r3, #0]
 8100812:	f083 0301 	eor.w	r3, r3, #1
 8100816:	b2db      	uxtb	r3, r3
 8100818:	2b00      	cmp	r3, #0
 810081a:	d00a      	beq.n	8100832 <Flash_Parse+0x2e>
    	Flash_Erase(16, 112,1);
 810081c:	2201      	movs	r2, #1
 810081e:	2170      	movs	r1, #112	@ 0x70
 8100820:	2010      	movs	r0, #16
 8100822:	f000 f93f 	bl	8100aa4 <Flash_Erase>
        write_offset = 0;
 8100826:	4b42      	ldr	r3, [pc, #264]	@ (8100930 <Flash_Parse+0x12c>)
 8100828:	2200      	movs	r2, #0
 810082a:	601a      	str	r2, [r3, #0]
        receiving_firmware = true;
 810082c:	4b3f      	ldr	r3, [pc, #252]	@ (810092c <Flash_Parse+0x128>)
 810082e:	2201      	movs	r2, #1
 8100830:	701a      	strb	r2, [r3, #0]
    }

    //We will use the length of the message to determine if it is a crc/end stub or data
    if (Data_Length == CRC_SIZE){
 8100832:	683b      	ldr	r3, [r7, #0]
 8100834:	2b04      	cmp	r3, #4
 8100836:	d142      	bne.n	81008be <Flash_Parse+0xba>
    	receiving_firmware = false;
 8100838:	4b3c      	ldr	r3, [pc, #240]	@ (810092c <Flash_Parse+0x128>)
 810083a:	2200      	movs	r2, #0
 810083c:	701a      	strb	r2, [r3, #0]
    	uint32_t received_crc;
    	memcpy(&received_crc, RxData, CRC_SIZE);
 810083e:	687b      	ldr	r3, [r7, #4]
 8100840:	681b      	ldr	r3, [r3, #0]
 8100842:	61fb      	str	r3, [r7, #28]
    	uint32_t actual_crc = crc32((uint8_t*)APP_LOAD_ADD, write_offset);
 8100844:	4b3a      	ldr	r3, [pc, #232]	@ (8100930 <Flash_Parse+0x12c>)
 8100846:	681b      	ldr	r3, [r3, #0]
 8100848:	4619      	mov	r1, r3
 810084a:	483a      	ldr	r0, [pc, #232]	@ (8100934 <Flash_Parse+0x130>)
 810084c:	f000 f876 	bl	810093c <crc32>
 8100850:	6278      	str	r0, [r7, #36]	@ 0x24

    	if ( actual_crc == received_crc) {
 8100852:	69fb      	ldr	r3, [r7, #28]
 8100854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8100856:	429a      	cmp	r2, r3
 8100858:	d11c      	bne.n	8100894 <Flash_Parse+0x90>
    	    Set_Boot_Flag(true);
 810085a:	2001      	movs	r0, #1
 810085c:	f000 f900 	bl	8100a60 <Set_Boot_Flag>
    	    CAN_Transmit(FILTER_ID2, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_1, (uint8_t[]){CRC_OK}, &hfdcan1);
 8100860:	f240 200a 	movw	r0, #522	@ 0x20a
 8100864:	23e0      	movs	r3, #224	@ 0xe0
 8100866:	763b      	strb	r3, [r7, #24]
 8100868:	f107 0318 	add.w	r3, r7, #24
 810086c:	4a32      	ldr	r2, [pc, #200]	@ (8100938 <Flash_Parse+0x134>)
 810086e:	9200      	str	r2, [sp, #0]
 8100870:	2201      	movs	r2, #1
 8100872:	2100      	movs	r1, #0
 8100874:	f7ff ff3e 	bl	81006f4 <CAN_Transmit>
    	    //HAL_Delay(100);
    	    uint32_t putIndexMask = hfdcan1.LatestTxFifoQRequest;
 8100878:	4b2f      	ldr	r3, [pc, #188]	@ (8100938 <Flash_Parse+0x134>)
 810087a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810087c:	623b      	str	r3, [r7, #32]
    	    while ((hfdcan1.Instance->TXBTO & putIndexMask) == 0U) {
 810087e:	bf00      	nop
 8100880:	4b2d      	ldr	r3, [pc, #180]	@ (8100938 <Flash_Parse+0x134>)
 8100882:	681b      	ldr	r3, [r3, #0]
 8100884:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8100888:	6a3b      	ldr	r3, [r7, #32]
 810088a:	4013      	ands	r3, r2
 810088c:	2b00      	cmp	r3, #0
 810088e:	d0f7      	beq.n	8100880 <Flash_Parse+0x7c>
    	    	//wait or timeout
    	    }
    	    NVIC_SystemReset();
 8100890:	f7ff ffa2 	bl	81007d8 <__NVIC_SystemReset>
    	} else {
    	    Set_Boot_Flag(false);
 8100894:	2000      	movs	r0, #0
 8100896:	f000 f8e3 	bl	8100a60 <Set_Boot_Flag>
    	    Flash_Erase(16, 112,1);
 810089a:	2201      	movs	r2, #1
 810089c:	2170      	movs	r1, #112	@ 0x70
 810089e:	2010      	movs	r0, #16
 81008a0:	f000 f900 	bl	8100aa4 <Flash_Erase>
    	    CAN_Transmit(FILTER_ID2, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_1, (uint8_t[]){CRC_ERROR}, &hfdcan1);
 81008a4:	f240 200a 	movw	r0, #522	@ 0x20a
 81008a8:	23e1      	movs	r3, #225	@ 0xe1
 81008aa:	753b      	strb	r3, [r7, #20]
 81008ac:	f107 0314 	add.w	r3, r7, #20
 81008b0:	4a21      	ldr	r2, [pc, #132]	@ (8100938 <Flash_Parse+0x134>)
 81008b2:	9200      	str	r2, [sp, #0]
 81008b4:	2201      	movs	r2, #1
 81008b6:	2100      	movs	r1, #0
 81008b8:	f7ff ff1c 	bl	81006f4 <CAN_Transmit>
 81008bc:	e032      	b.n	8100924 <Flash_Parse+0x120>
    	}
    }
    else if(Data_Length == (PAYLOAD_SIZE)){
 81008be:	683b      	ldr	r3, [r7, #0]
 81008c0:	2b0f      	cmp	r3, #15
 81008c2:	d123      	bne.n	810090c <Flash_Parse+0x108>
    	if (write_offset + 64 < APP_MAX_SIZE) {
 81008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8100930 <Flash_Parse+0x12c>)
 81008c6:	681b      	ldr	r3, [r3, #0]
 81008c8:	3340      	adds	r3, #64	@ 0x40
 81008ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 81008ce:	d210      	bcs.n	81008f2 <Flash_Parse+0xee>
    	        Flash_Write(APP_LOAD_ADD + write_offset, RxData, 64);
 81008d0:	4b17      	ldr	r3, [pc, #92]	@ (8100930 <Flash_Parse+0x12c>)
 81008d2:	681b      	ldr	r3, [r3, #0]
 81008d4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 81008d8:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 81008dc:	2240      	movs	r2, #64	@ 0x40
 81008de:	6879      	ldr	r1, [r7, #4]
 81008e0:	4618      	mov	r0, r3
 81008e2:	f000 f917 	bl	8100b14 <Flash_Write>
    	        write_offset += 64;
 81008e6:	4b12      	ldr	r3, [pc, #72]	@ (8100930 <Flash_Parse+0x12c>)
 81008e8:	681b      	ldr	r3, [r3, #0]
 81008ea:	3340      	adds	r3, #64	@ 0x40
 81008ec:	4a10      	ldr	r2, [pc, #64]	@ (8100930 <Flash_Parse+0x12c>)
 81008ee:	6013      	str	r3, [r2, #0]
 81008f0:	e018      	b.n	8100924 <Flash_Parse+0x120>
    	    } else {
    	    	CAN_Transmit(FILTER_ID2, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_1, (uint8_t[]){OVERFLOW}, &hfdcan1);
 81008f2:	f240 200a 	movw	r0, #522	@ 0x20a
 81008f6:	23e3      	movs	r3, #227	@ 0xe3
 81008f8:	743b      	strb	r3, [r7, #16]
 81008fa:	f107 0310 	add.w	r3, r7, #16
 81008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8100938 <Flash_Parse+0x134>)
 8100900:	9200      	str	r2, [sp, #0]
 8100902:	2201      	movs	r2, #1
 8100904:	2100      	movs	r1, #0
 8100906:	f7ff fef5 	bl	81006f4 <CAN_Transmit>
 810090a:	e00b      	b.n	8100924 <Flash_Parse+0x120>
    	    }
    }
    else {
    	CAN_Transmit(FILTER_ID2, FDCAN_STANDARD_ID, FDCAN_DLC_BYTES_1, (uint8_t[]){INVALID_LENGTH}, &hfdcan1);
 810090c:	f240 200a 	movw	r0, #522	@ 0x20a
 8100910:	23e2      	movs	r3, #226	@ 0xe2
 8100912:	733b      	strb	r3, [r7, #12]
 8100914:	f107 030c 	add.w	r3, r7, #12
 8100918:	4a07      	ldr	r2, [pc, #28]	@ (8100938 <Flash_Parse+0x134>)
 810091a:	9200      	str	r2, [sp, #0]
 810091c:	2201      	movs	r2, #1
 810091e:	2100      	movs	r1, #0
 8100920:	f7ff fee8 	bl	81006f4 <CAN_Transmit>
        return;
    }
}
 8100924:	3728      	adds	r7, #40	@ 0x28
 8100926:	46bd      	mov	sp, r7
 8100928:	bd80      	pop	{r7, pc}
 810092a:	bf00      	nop
 810092c:	200000d4 	.word	0x200000d4
 8100930:	200000d0 	.word	0x200000d0
 8100934:	08020000 	.word	0x08020000
 8100938:	200000ec 	.word	0x200000ec

0810093c <crc32>:

uint32_t crc32(uint8_t *data, size_t len) {
 810093c:	b480      	push	{r7}
 810093e:	b089      	sub	sp, #36	@ 0x24
 8100940:	af00      	add	r7, sp, #0
 8100942:	6078      	str	r0, [r7, #4]
 8100944:	6039      	str	r1, [r7, #0]
    uint32_t crc = 0xFFFFFFFF;
 8100946:	f04f 33ff 	mov.w	r3, #4294967295
 810094a:	61fb      	str	r3, [r7, #28]

    // Calculate number of bytes to pad so total length is a multiple of 64
    size_t padded_len = len;
 810094c:	683b      	ldr	r3, [r7, #0]
 810094e:	61bb      	str	r3, [r7, #24]
    size_t rem = len % 64;
 8100950:	683b      	ldr	r3, [r7, #0]
 8100952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8100956:	60fb      	str	r3, [r7, #12]
    if (rem != 0) {
 8100958:	68fb      	ldr	r3, [r7, #12]
 810095a:	2b00      	cmp	r3, #0
 810095c:	d004      	beq.n	8100968 <crc32+0x2c>
        padded_len += (64 - rem);
 810095e:	69ba      	ldr	r2, [r7, #24]
 8100960:	68fb      	ldr	r3, [r7, #12]
 8100962:	1ad3      	subs	r3, r2, r3
 8100964:	3340      	adds	r3, #64	@ 0x40
 8100966:	61bb      	str	r3, [r7, #24]
    }

    for (size_t i = 0; i < padded_len; i++) {
 8100968:	2300      	movs	r3, #0
 810096a:	617b      	str	r3, [r7, #20]
 810096c:	e025      	b.n	81009ba <crc32+0x7e>
        uint8_t byte;
        if (i < len) {
 810096e:	697a      	ldr	r2, [r7, #20]
 8100970:	683b      	ldr	r3, [r7, #0]
 8100972:	429a      	cmp	r2, r3
 8100974:	d205      	bcs.n	8100982 <crc32+0x46>
            byte = data[i];
 8100976:	687a      	ldr	r2, [r7, #4]
 8100978:	697b      	ldr	r3, [r7, #20]
 810097a:	4413      	add	r3, r2
 810097c:	781b      	ldrb	r3, [r3, #0]
 810097e:	74fb      	strb	r3, [r7, #19]
 8100980:	e001      	b.n	8100986 <crc32+0x4a>
        } else {
            byte = 0xFF;  // Pad byte
 8100982:	23ff      	movs	r3, #255	@ 0xff
 8100984:	74fb      	strb	r3, [r7, #19]
        }

        crc ^= byte;
 8100986:	7cfb      	ldrb	r3, [r7, #19]
 8100988:	69fa      	ldr	r2, [r7, #28]
 810098a:	4053      	eors	r3, r2
 810098c:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; j < 8; j++) {
 810098e:	2300      	movs	r3, #0
 8100990:	74bb      	strb	r3, [r7, #18]
 8100992:	e00c      	b.n	81009ae <crc32+0x72>
            crc = (crc >> 1) ^ (0xEDB88320 & -(crc & 1));
 8100994:	69fb      	ldr	r3, [r7, #28]
 8100996:	085a      	lsrs	r2, r3, #1
 8100998:	69fb      	ldr	r3, [r7, #28]
 810099a:	f003 0301 	and.w	r3, r3, #1
 810099e:	4259      	negs	r1, r3
 81009a0:	4b0c      	ldr	r3, [pc, #48]	@ (81009d4 <crc32+0x98>)
 81009a2:	400b      	ands	r3, r1
 81009a4:	4053      	eors	r3, r2
 81009a6:	61fb      	str	r3, [r7, #28]
        for (uint8_t j = 0; j < 8; j++) {
 81009a8:	7cbb      	ldrb	r3, [r7, #18]
 81009aa:	3301      	adds	r3, #1
 81009ac:	74bb      	strb	r3, [r7, #18]
 81009ae:	7cbb      	ldrb	r3, [r7, #18]
 81009b0:	2b07      	cmp	r3, #7
 81009b2:	d9ef      	bls.n	8100994 <crc32+0x58>
    for (size_t i = 0; i < padded_len; i++) {
 81009b4:	697b      	ldr	r3, [r7, #20]
 81009b6:	3301      	adds	r3, #1
 81009b8:	617b      	str	r3, [r7, #20]
 81009ba:	697a      	ldr	r2, [r7, #20]
 81009bc:	69bb      	ldr	r3, [r7, #24]
 81009be:	429a      	cmp	r2, r3
 81009c0:	d3d5      	bcc.n	810096e <crc32+0x32>
        }
    }

    return ~crc;
 81009c2:	69fb      	ldr	r3, [r7, #28]
 81009c4:	43db      	mvns	r3, r3
}
 81009c6:	4618      	mov	r0, r3
 81009c8:	3724      	adds	r7, #36	@ 0x24
 81009ca:	46bd      	mov	sp, r7
 81009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009d0:	4770      	bx	lr
 81009d2:	bf00      	nop
 81009d4:	edb88320 	.word	0xedb88320

081009d8 <HAL_FDCAN_RxFifo0Callback>:


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 81009d8:	b580      	push	{r7, lr}
 81009da:	b08c      	sub	sp, #48	@ 0x30
 81009dc:	af00      	add	r7, sp, #0
 81009de:	6078      	str	r0, [r7, #4]
 81009e0:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 81009e2:	683b      	ldr	r3, [r7, #0]
 81009e4:	f003 0301 	and.w	r3, r3, #1
 81009e8:	2b00      	cmp	r3, #0
 81009ea:	d02b      	beq.n	8100a44 <HAL_FDCAN_RxFifo0Callback+0x6c>
        FDCAN_RxHeaderTypeDef RxHeader;
        memset(RxData1, 0, 64);
 81009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8100a58 <HAL_FDCAN_RxFifo0Callback+0x80>)
 81009ee:	681b      	ldr	r3, [r3, #0]
 81009f0:	2240      	movs	r2, #64	@ 0x40
 81009f2:	2100      	movs	r1, #0
 81009f4:	4618      	mov	r0, r3
 81009f6:	f007 ff61 	bl	81088bc <memset>
        if (RxData1 == NULL) {
 81009fa:	4b17      	ldr	r3, [pc, #92]	@ (8100a58 <HAL_FDCAN_RxFifo0Callback+0x80>)
 81009fc:	681b      	ldr	r3, [r3, #0]
 81009fe:	2b00      	cmp	r3, #0
 8100a00:	d101      	bne.n	8100a06 <HAL_FDCAN_RxFifo0Callback+0x2e>
            Error_Handler();
 8100a02:	f000 fa73 	bl	8100eec <Error_Handler>
        }
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData1) != HAL_OK) {
 8100a06:	4b14      	ldr	r3, [pc, #80]	@ (8100a58 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8100a08:	681b      	ldr	r3, [r3, #0]
 8100a0a:	f107 0208 	add.w	r2, r7, #8
 8100a0e:	2140      	movs	r1, #64	@ 0x40
 8100a10:	6878      	ldr	r0, [r7, #4]
 8100a12:	f001 fb6d 	bl	81020f0 <HAL_FDCAN_GetRxMessage>
 8100a16:	4603      	mov	r3, r0
 8100a18:	2b00      	cmp	r3, #0
 8100a1a:	d001      	beq.n	8100a20 <HAL_FDCAN_RxFifo0Callback+0x48>
            Error_Handler();
 8100a1c:	f000 fa66 	bl	8100eec <Error_Handler>
        }
        //check actual length incoming against the buf len rather than stringcmp?
//        RxData1_BufferLength = dlc_to_bytes(RxHeader.DataLength);
//        RxData1_Identifier = RxHeader.Identifier;

        BSP_LED_Toggle(LED_GREEN);
 8100a20:	2000      	movs	r0, #0
 8100a22:	f000 fd73 	bl	810150c <BSP_LED_Toggle>
        /* BOOTLOADER CAN*/
		if (RxHeader.Identifier == FILTER_ID1) {
 8100a26:	68bb      	ldr	r3, [r7, #8]
 8100a28:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8100a2c:	4293      	cmp	r3, r2
 8100a2e:	d109      	bne.n	8100a44 <HAL_FDCAN_RxFifo0Callback+0x6c>
			BSP_LED_Toggle(LED_RED);
 8100a30:	2002      	movs	r0, #2
 8100a32:	f000 fd6b 	bl	810150c <BSP_LED_Toggle>
			Flash_Parse(RxData1, RxHeader.DataLength);
 8100a36:	4b08      	ldr	r3, [pc, #32]	@ (8100a58 <HAL_FDCAN_RxFifo0Callback+0x80>)
 8100a38:	681b      	ldr	r3, [r3, #0]
 8100a3a:	697a      	ldr	r2, [r7, #20]
 8100a3c:	4611      	mov	r1, r2
 8100a3e:	4618      	mov	r0, r3
 8100a40:	f7ff fee0 	bl	8100804 <Flash_Parse>
		}
    }
    /* added for debug */
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8100a44:	2201      	movs	r2, #1
 8100a46:	2180      	movs	r1, #128	@ 0x80
 8100a48:	4804      	ldr	r0, [pc, #16]	@ (8100a5c <HAL_FDCAN_RxFifo0Callback+0x84>)
 8100a4a:	f002 fb79 	bl	8103140 <HAL_GPIO_WritePin>
}
 8100a4e:	bf00      	nop
 8100a50:	3730      	adds	r7, #48	@ 0x30
 8100a52:	46bd      	mov	sp, r7
 8100a54:	bd80      	pop	{r7, pc}
 8100a56:	bf00      	nop
 8100a58:	200000c0 	.word	0x200000c0
 8100a5c:	42020800 	.word	0x42020800

08100a60 <Set_Boot_Flag>:
#include "flash_util.h"
#include "main.h"

void Set_Boot_Flag(bool boot) {
 8100a60:	b580      	push	{r7, lr}
 8100a62:	b084      	sub	sp, #16
 8100a64:	af00      	add	r7, sp, #0
 8100a66:	4603      	mov	r3, r0
 8100a68:	71fb      	strb	r3, [r7, #7]
    Flash_Erase(15, 1, 1);
 8100a6a:	2201      	movs	r2, #1
 8100a6c:	2101      	movs	r1, #1
 8100a6e:	200f      	movs	r0, #15
 8100a70:	f000 f818 	bl	8100aa4 <Flash_Erase>
    uint32_t value = boot ? BOOT_FLAG : 0xAAAAAAAA;
 8100a74:	79fb      	ldrb	r3, [r7, #7]
 8100a76:	2b00      	cmp	r3, #0
 8100a78:	d001      	beq.n	8100a7e <Set_Boot_Flag+0x1e>
 8100a7a:	4b08      	ldr	r3, [pc, #32]	@ (8100a9c <Set_Boot_Flag+0x3c>)
 8100a7c:	e001      	b.n	8100a82 <Set_Boot_Flag+0x22>
 8100a7e:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8100a82:	60fb      	str	r3, [r7, #12]
    Flash_Write(BOOT_FLAG_ADD, (uint8_t *)&value, sizeof(value));
 8100a84:	f107 030c 	add.w	r3, r7, #12
 8100a88:	2204      	movs	r2, #4
 8100a8a:	4619      	mov	r1, r3
 8100a8c:	4804      	ldr	r0, [pc, #16]	@ (8100aa0 <Set_Boot_Flag+0x40>)
 8100a8e:	f000 f841 	bl	8100b14 <Flash_Write>
}
 8100a92:	bf00      	nop
 8100a94:	3710      	adds	r7, #16
 8100a96:	46bd      	mov	sp, r7
 8100a98:	bd80      	pop	{r7, pc}
 8100a9a:	bf00      	nop
 8100a9c:	deadbeef 	.word	0xdeadbeef
 8100aa0:	0801e000 	.word	0x0801e000

08100aa4 <Flash_Erase>:

/**
 * Clears The Application Bank, page index starts at 1
 */
void Flash_Erase(int start_page, int num_pages, int bank) {
 8100aa4:	b580      	push	{r7, lr}
 8100aa6:	b08a      	sub	sp, #40	@ 0x28
 8100aa8:	af00      	add	r7, sp, #0
 8100aaa:	60f8      	str	r0, [r7, #12]
 8100aac:	60b9      	str	r1, [r7, #8]
 8100aae:	607a      	str	r2, [r7, #4]
  // Unlock flash before starting erase
  if (HAL_FLASH_Unlock() != HAL_OK) {
 8100ab0:	f001 ffac 	bl	8102a0c <HAL_FLASH_Unlock>
 8100ab4:	4603      	mov	r3, r0
 8100ab6:	2b00      	cmp	r3, #0
 8100ab8:	d128      	bne.n	8100b0c <Flash_Erase+0x68>
    // Handle flash unlock error
    return;
  }

  FLASH_EraseInitTypeDef eraseConfig;
  uint32_t sectorError = 0;
 8100aba:	2300      	movs	r3, #0
 8100abc:	613b      	str	r3, [r7, #16]

  eraseConfig.TypeErase = FLASH_TYPEERASE_PAGES;
 8100abe:	2302      	movs	r3, #2
 8100ac0:	617b      	str	r3, [r7, #20]
  switch(bank){
 8100ac2:	687b      	ldr	r3, [r7, #4]
 8100ac4:	2b01      	cmp	r3, #1
 8100ac6:	d003      	beq.n	8100ad0 <Flash_Erase+0x2c>
 8100ac8:	687b      	ldr	r3, [r7, #4]
 8100aca:	2b02      	cmp	r3, #2
 8100acc:	d003      	beq.n	8100ad6 <Flash_Erase+0x32>
 8100ace:	e004      	b.n	8100ada <Flash_Erase+0x36>
  case 1:
	  eraseConfig.Banks = FLASH_BANK_1;
 8100ad0:	2301      	movs	r3, #1
 8100ad2:	61bb      	str	r3, [r7, #24]
	  break;
 8100ad4:	e001      	b.n	8100ada <Flash_Erase+0x36>
  case 2:
	  eraseConfig.Banks = FLASH_BANK_2;
 8100ad6:	2302      	movs	r3, #2
 8100ad8:	61bb      	str	r3, [r7, #24]
  }

  eraseConfig.Page = start_page;             // Check if page numbering starts at 0 or 1.
 8100ada:	68fb      	ldr	r3, [r7, #12]
 8100adc:	61fb      	str	r3, [r7, #28]
  eraseConfig.NbPages = num_pages; // Ensure this value matches your flash layout.
 8100ade:	68bb      	ldr	r3, [r7, #8]
 8100ae0:	623b      	str	r3, [r7, #32]

  HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&eraseConfig, &sectorError);
 8100ae2:	f107 0210 	add.w	r2, r7, #16
 8100ae6:	f107 0314 	add.w	r3, r7, #20
 8100aea:	4611      	mov	r1, r2
 8100aec:	4618      	mov	r0, r3
 8100aee:	f002 f889 	bl	8102c04 <HAL_FLASHEx_Erase>
 8100af2:	4603      	mov	r3, r0
 8100af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (status != HAL_OK) {
 8100af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8100afc:	2b00      	cmp	r3, #0
 8100afe:	d002      	beq.n	8100b06 <Flash_Erase+0x62>
    // Optionally get the error code for debugging.
    //uint32_t error = HAL_FLASH_GetError();
    //printf("Flash erase error: 0x%08lX\r\n", (unsigned long)error);
    // Handle error (for example, log the error code)
    HAL_FLASH_Lock();
 8100b00:	f001 ffa6 	bl	8102a50 <HAL_FLASH_Lock>
    return;
 8100b04:	e003      	b.n	8100b0e <Flash_Erase+0x6a>
  }

  HAL_FLASH_Lock(); // Lock flash after erase
 8100b06:	f001 ffa3 	bl	8102a50 <HAL_FLASH_Lock>
 8100b0a:	e000      	b.n	8100b0e <Flash_Erase+0x6a>
    return;
 8100b0c:	bf00      	nop
}
 8100b0e:	3728      	adds	r7, #40	@ 0x28
 8100b10:	46bd      	mov	sp, r7
 8100b12:	bd80      	pop	{r7, pc}

08100b14 <Flash_Write>:

void Flash_Write(uint32_t address, uint8_t *data, uint32_t length) {
 8100b14:	b580      	push	{r7, lr}
 8100b16:	b08a      	sub	sp, #40	@ 0x28
 8100b18:	af00      	add	r7, sp, #0
 8100b1a:	60f8      	str	r0, [r7, #12]
 8100b1c:	60b9      	str	r1, [r7, #8]
 8100b1e:	607a      	str	r2, [r7, #4]
  HAL_FLASH_Unlock(); // Unlock Flash
 8100b20:	f001 ff74 	bl	8102a0c <HAL_FLASH_Unlock>
  // Example: Writing data in 16-byte (quadword) chunks
  for (uint32_t i = 0; i < length; i += 16) {
 8100b24:	2300      	movs	r3, #0
 8100b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8100b28:	e028      	b.n	8100b7c <Flash_Write+0x68>
    // Prepare a 16-byte (quadword) buffer
    uint8_t quadBuf[16];
    // Fill with 0xFF (or 0x00) to avoid uninitialized bytes
    memset(quadBuf, 0xFF, sizeof(quadBuf));
 8100b2a:	f107 0310 	add.w	r3, r7, #16
 8100b2e:	2210      	movs	r2, #16
 8100b30:	21ff      	movs	r1, #255	@ 0xff
 8100b32:	4618      	mov	r0, r3
 8100b34:	f007 fec2 	bl	81088bc <memset>

    // Copy up to 16 bytes from 'data' into quadBuf
    uint32_t chunkSize = (length - i) < 16 ? (length - i) : 16;
 8100b38:	687a      	ldr	r2, [r7, #4]
 8100b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100b3c:	1ad3      	subs	r3, r2, r3
 8100b3e:	2b10      	cmp	r3, #16
 8100b40:	bf28      	it	cs
 8100b42:	2310      	movcs	r3, #16
 8100b44:	623b      	str	r3, [r7, #32]
    memcpy(quadBuf, &data[i], chunkSize);
 8100b46:	68ba      	ldr	r2, [r7, #8]
 8100b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100b4a:	18d1      	adds	r1, r2, r3
 8100b4c:	f107 0310 	add.w	r3, r7, #16
 8100b50:	6a3a      	ldr	r2, [r7, #32]
 8100b52:	4618      	mov	r0, r3
 8100b54:	f007 ff3d 	bl	81089d2 <memcpy>

    // Program this 16-byte chunk
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_QUADWORD, address + i,
 8100b58:	68fa      	ldr	r2, [r7, #12]
 8100b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100b5c:	4413      	add	r3, r2
 8100b5e:	f107 0210 	add.w	r2, r7, #16
 8100b62:	4619      	mov	r1, r3
 8100b64:	2001      	movs	r0, #1
 8100b66:	f001 ff07 	bl	8102978 <HAL_FLASH_Program>
 8100b6a:	4603      	mov	r3, r0
 8100b6c:	2b00      	cmp	r3, #0
 8100b6e:	d002      	beq.n	8100b76 <Flash_Write+0x62>
                          (uint32_t)quadBuf) != HAL_OK) {
      HAL_FLASH_Lock();
 8100b70:	f001 ff6e 	bl	8102a50 <HAL_FLASH_Lock>
 8100b74:	e008      	b.n	8100b88 <Flash_Write+0x74>
  for (uint32_t i = 0; i < length; i += 16) {
 8100b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100b78:	3310      	adds	r3, #16
 8100b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8100b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8100b7e:	687b      	ldr	r3, [r7, #4]
 8100b80:	429a      	cmp	r2, r3
 8100b82:	d3d2      	bcc.n	8100b2a <Flash_Write+0x16>
      return; // Errorhandling
    }
  }

  HAL_FLASH_Lock(); // Lock Flash
 8100b84:	f001 ff64 	bl	8102a50 <HAL_FLASH_Lock>
}
 8100b88:	3728      	adds	r7, #40	@ 0x28
 8100b8a:	46bd      	mov	sp, r7
 8100b8c:	bd80      	pop	{r7, pc}
	...

08100b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100b90:	b580      	push	{r7, lr}
 8100b92:	b082      	sub	sp, #8
 8100b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  SCB->VTOR = 0x08100000;
 8100b96:	4b34      	ldr	r3, [pc, #208]	@ (8100c68 <main+0xd8>)
 8100b98:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8100b9c:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100b9e:	f000 fe4d 	bl	810183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8100ba2:	f000 f8ca 	bl	8100d3a <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8100ba6:	f000 f86b 	bl	8100c80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100baa:	f000 f931 	bl	8100e10 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8100bae:	f000 f91b 	bl	8100de8 <MX_ICACHE_Init>
  MX_FDCAN1_Init();
 8100bb2:	f000 f8d1 	bl	8100d58 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  CAN_Init(&hfdcan1);
 8100bb6:	482d      	ldr	r0, [pc, #180]	@ (8100c6c <main+0xdc>)
 8100bb8:	f7ff fd30 	bl	810061c <CAN_Init>
  CAN_SetRxBufferSize(64,64);
 8100bbc:	2140      	movs	r1, #64	@ 0x40
 8100bbe:	2040      	movs	r0, #64	@ 0x40
 8100bc0:	f7ff fce6 	bl	8100590 <CAN_SetRxBufferSize>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8100bc4:	2000      	movs	r0, #0
 8100bc6:	f000 fbe7 	bl	8101398 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8100bca:	2001      	movs	r0, #1
 8100bcc:	f000 fbe4 	bl	8101398 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8100bd0:	2002      	movs	r0, #2
 8100bd2:	f000 fbe1 	bl	8101398 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8100bd6:	2101      	movs	r1, #1
 8100bd8:	2000      	movs	r0, #0
 8100bda:	f000 fcc1 	bl	8101560 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8100bde:	4b24      	ldr	r3, [pc, #144]	@ (8100c70 <main+0xe0>)
 8100be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8100be4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8100be6:	4b22      	ldr	r3, [pc, #136]	@ (8100c70 <main+0xe0>)
 8100be8:	2200      	movs	r2, #0
 8100bea:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8100bec:	4b20      	ldr	r3, [pc, #128]	@ (8100c70 <main+0xe0>)
 8100bee:	2200      	movs	r2, #0
 8100bf0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8100bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8100c70 <main+0xe0>)
 8100bf4:	2200      	movs	r2, #0
 8100bf6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8100bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8100c70 <main+0xe0>)
 8100bfa:	2200      	movs	r2, #0
 8100bfc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8100bfe:	491c      	ldr	r1, [pc, #112]	@ (8100c70 <main+0xe0>)
 8100c00:	2000      	movs	r0, #0
 8100c02:	f000 fd3b 	bl	810167c <BSP_COM_Init>
 8100c06:	4603      	mov	r3, r0
 8100c08:	2b00      	cmp	r3, #0
 8100c0a:	d001      	beq.n	8100c10 <main+0x80>
  {
    Error_Handler();
 8100c0c:	f000 f96e 	bl	8100eec <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 8100c10:	4818      	ldr	r0, [pc, #96]	@ (8100c74 <main+0xe4>)
 8100c12:	f007 fd69 	bl	81086e8 <iprintf>
//  BSP_LED_On(LED_GREEN);
//  BSP_LED_On(LED_BLUE);
//  BSP_LED_On(LED_RED);

//  __enable_irq();
  if (SCB->VTOR == 0x8100000){
 8100c16:	4b14      	ldr	r3, [pc, #80]	@ (8100c68 <main+0xd8>)
 8100c18:	689b      	ldr	r3, [r3, #8]
 8100c1a:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8100c1e:	d103      	bne.n	8100c28 <main+0x98>
	  BSP_LED_On(LED_BLUE);
 8100c20:	2001      	movs	r0, #1
 8100c22:	f000 fc49 	bl	81014b8 <BSP_LED_On>
 8100c26:	e003      	b.n	8100c30 <main+0xa0>
  }
  else SCB->VTOR = 0x8100000;
 8100c28:	4b0f      	ldr	r3, [pc, #60]	@ (8100c68 <main+0xd8>)
 8100c2a:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8100c2e:	609a      	str	r2, [r3, #8]
//  Set_Boot_Flag(false);
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 8100c30:	4b11      	ldr	r3, [pc, #68]	@ (8100c78 <main+0xe8>)
 8100c32:	681b      	ldr	r3, [r3, #0]
 8100c34:	2b01      	cmp	r3, #1
 8100c36:	d105      	bne.n	8100c44 <main+0xb4>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8100c38:	4b0f      	ldr	r3, [pc, #60]	@ (8100c78 <main+0xe8>)
 8100c3a:	2200      	movs	r2, #0
 8100c3c:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_BLUE);
 8100c3e:	2001      	movs	r0, #1
 8100c40:	f000 fc64 	bl	810150c <BSP_LED_Toggle>

      /* ..... Perform your action ..... */
    }


    uint32_t current_tick = HAL_GetTick();
 8100c44:	f000 fe3e 	bl	81018c4 <HAL_GetTick>
 8100c48:	6078      	str	r0, [r7, #4]
    if (current_tick - last_tick >= 2000) {
 8100c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8100c7c <main+0xec>)
 8100c4c:	681b      	ldr	r3, [r3, #0]
 8100c4e:	461a      	mov	r2, r3
 8100c50:	687b      	ldr	r3, [r7, #4]
 8100c52:	1a9b      	subs	r3, r3, r2
 8100c54:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8100c58:	d3ea      	bcc.n	8100c30 <main+0xa0>
          last_tick = current_tick;
 8100c5a:	687b      	ldr	r3, [r7, #4]
 8100c5c:	4a07      	ldr	r2, [pc, #28]	@ (8100c7c <main+0xec>)
 8100c5e:	6013      	str	r3, [r2, #0]
          BSP_LED_Toggle(LED_GREEN);
 8100c60:	2000      	movs	r0, #0
 8100c62:	f000 fc53 	bl	810150c <BSP_LED_Toggle>
  {
 8100c66:	e7e3      	b.n	8100c30 <main+0xa0>
 8100c68:	e000ed00 	.word	0xe000ed00
 8100c6c:	200000ec 	.word	0x200000ec
 8100c70:	200000d8 	.word	0x200000d8
 8100c74:	081092bc 	.word	0x081092bc
 8100c78:	200000e8 	.word	0x200000e8
 8100c7c:	20000150 	.word	0x20000150

08100c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8100c80:	b580      	push	{r7, lr}
 8100c82:	b09e      	sub	sp, #120	@ 0x78
 8100c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8100c86:	f107 0318 	add.w	r3, r7, #24
 8100c8a:	2260      	movs	r2, #96	@ 0x60
 8100c8c:	2100      	movs	r1, #0
 8100c8e:	4618      	mov	r0, r3
 8100c90:	f007 fe14 	bl	81088bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8100c94:	463b      	mov	r3, r7
 8100c96:	2200      	movs	r2, #0
 8100c98:	601a      	str	r2, [r3, #0]
 8100c9a:	605a      	str	r2, [r3, #4]
 8100c9c:	609a      	str	r2, [r3, #8]
 8100c9e:	60da      	str	r2, [r3, #12]
 8100ca0:	611a      	str	r2, [r3, #16]
 8100ca2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8100ca4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8100ca8:	f002 faac 	bl	8103204 <HAL_PWREx_ControlVoltageScaling>
 8100cac:	4603      	mov	r3, r0
 8100cae:	2b00      	cmp	r3, #0
 8100cb0:	d001      	beq.n	8100cb6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8100cb2:	f000 f91b 	bl	8100eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8100cb6:	2310      	movs	r3, #16
 8100cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8100cba:	2301      	movs	r3, #1
 8100cbc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8100cbe:	2310      	movs	r3, #16
 8100cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8100cc2:	2300      	movs	r3, #0
 8100cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8100cc6:	2302      	movs	r3, #2
 8100cc8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8100cca:	2301      	movs	r3, #1
 8100ccc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8100cce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8100cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8100cd4:	2303      	movs	r3, #3
 8100cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 9;
 8100cd8:	2309      	movs	r3, #9
 8100cda:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8100cdc:	2302      	movs	r3, #2
 8100cde:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8100ce0:	2303      	movs	r3, #3
 8100ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8100ce4:	2302      	movs	r3, #2
 8100ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8100ce8:	230c      	movs	r3, #12
 8100cea:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8100cec:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8100cf0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8100cf2:	f107 0318 	add.w	r3, r7, #24
 8100cf6:	4618      	mov	r0, r3
 8100cf8:	f002 fb80 	bl	81033fc <HAL_RCC_OscConfig>
 8100cfc:	4603      	mov	r3, r0
 8100cfe:	2b00      	cmp	r3, #0
 8100d00:	d001      	beq.n	8100d06 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8100d02:	f000 f8f3 	bl	8100eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8100d06:	231f      	movs	r3, #31
 8100d08:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8100d0a:	2300      	movs	r3, #0
 8100d0c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8100d0e:	2300      	movs	r3, #0
 8100d10:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8100d12:	2300      	movs	r3, #0
 8100d14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8100d16:	2300      	movs	r3, #0
 8100d18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8100d1a:	2300      	movs	r3, #0
 8100d1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8100d1e:	463b      	mov	r3, r7
 8100d20:	2101      	movs	r1, #1
 8100d22:	4618      	mov	r0, r3
 8100d24:	f003 fa46 	bl	81041b4 <HAL_RCC_ClockConfig>
 8100d28:	4603      	mov	r3, r0
 8100d2a:	2b00      	cmp	r3, #0
 8100d2c:	d001      	beq.n	8100d32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8100d2e:	f000 f8dd 	bl	8100eec <Error_Handler>
  }
}
 8100d32:	bf00      	nop
 8100d34:	3778      	adds	r7, #120	@ 0x78
 8100d36:	46bd      	mov	sp, r7
 8100d38:	bd80      	pop	{r7, pc}

08100d3a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8100d3a:	b580      	push	{r7, lr}
 8100d3c:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8100d3e:	f002 fb4d 	bl	81033dc <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8100d42:	2002      	movs	r0, #2
 8100d44:	f002 faea 	bl	810331c <HAL_PWREx_ConfigSupply>
 8100d48:	4603      	mov	r3, r0
 8100d4a:	2b00      	cmp	r3, #0
 8100d4c:	d001      	beq.n	8100d52 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8100d4e:	f000 f8cd 	bl	8100eec <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8100d52:	bf00      	nop
 8100d54:	bd80      	pop	{r7, pc}
	...

08100d58 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8100d58:	b580      	push	{r7, lr}
 8100d5a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8100d5c:	4b20      	ldr	r3, [pc, #128]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d5e:	4a21      	ldr	r2, [pc, #132]	@ (8100de4 <MX_FDCAN1_Init+0x8c>)
 8100d60:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8100d62:	4b1f      	ldr	r3, [pc, #124]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d64:	2200      	movs	r2, #0
 8100d66:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8100d68:	4b1d      	ldr	r3, [pc, #116]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d6a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8100d6e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8100d70:	4b1b      	ldr	r3, [pc, #108]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d72:	2200      	movs	r2, #0
 8100d74:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8100d76:	4b1a      	ldr	r3, [pc, #104]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d78:	2201      	movs	r2, #1
 8100d7a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8100d7c:	4b18      	ldr	r3, [pc, #96]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d7e:	2200      	movs	r2, #0
 8100d80:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8100d82:	4b17      	ldr	r3, [pc, #92]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d84:	2200      	movs	r2, #0
 8100d86:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 5;
 8100d88:	4b15      	ldr	r3, [pc, #84]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d8a:	2205      	movs	r2, #5
 8100d8c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 3;
 8100d8e:	4b14      	ldr	r3, [pc, #80]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d90:	2203      	movs	r2, #3
 8100d92:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 16;
 8100d94:	4b12      	ldr	r3, [pc, #72]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d96:	2210      	movs	r2, #16
 8100d98:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8100d9a:	4b11      	ldr	r3, [pc, #68]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100d9c:	2203      	movs	r2, #3
 8100d9e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8100da0:	4b0f      	ldr	r3, [pc, #60]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100da2:	2202      	movs	r2, #2
 8100da4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 11;
 8100da6:	4b0e      	ldr	r3, [pc, #56]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100da8:	220b      	movs	r2, #11
 8100daa:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8100dac:	4b0c      	ldr	r3, [pc, #48]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100dae:	220d      	movs	r2, #13
 8100db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 11;
 8100db2:	4b0b      	ldr	r3, [pc, #44]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100db4:	220b      	movs	r2, #11
 8100db6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8100db8:	4b09      	ldr	r3, [pc, #36]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100dba:	2201      	movs	r2, #1
 8100dbc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8100dbe:	4b08      	ldr	r3, [pc, #32]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100dc0:	2201      	movs	r2, #1
 8100dc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8100dc4:	4b06      	ldr	r3, [pc, #24]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100dc6:	2200      	movs	r2, #0
 8100dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8100dca:	4805      	ldr	r0, [pc, #20]	@ (8100de0 <MX_FDCAN1_Init+0x88>)
 8100dcc:	f000 ff46 	bl	8101c5c <HAL_FDCAN_Init>
 8100dd0:	4603      	mov	r3, r0
 8100dd2:	2b00      	cmp	r3, #0
 8100dd4:	d001      	beq.n	8100dda <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8100dd6:	f000 f889 	bl	8100eec <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8100dda:	bf00      	nop
 8100ddc:	bd80      	pop	{r7, pc}
 8100dde:	bf00      	nop
 8100de0:	200000ec 	.word	0x200000ec
 8100de4:	4000a400 	.word	0x4000a400

08100de8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8100de8:	b580      	push	{r7, lr}
 8100dea:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8100dec:	2000      	movs	r0, #0
 8100dee:	f002 f9d9 	bl	81031a4 <HAL_ICACHE_ConfigAssociativityMode>
 8100df2:	4603      	mov	r3, r0
 8100df4:	2b00      	cmp	r3, #0
 8100df6:	d001      	beq.n	8100dfc <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8100df8:	f000 f878 	bl	8100eec <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8100dfc:	f002 f9f2 	bl	81031e4 <HAL_ICACHE_Enable>
 8100e00:	4603      	mov	r3, r0
 8100e02:	2b00      	cmp	r3, #0
 8100e04:	d001      	beq.n	8100e0a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8100e06:	f000 f871 	bl	8100eec <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8100e0a:	bf00      	nop
 8100e0c:	bd80      	pop	{r7, pc}
	...

08100e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100e10:	b480      	push	{r7}
 8100e12:	b085      	sub	sp, #20
 8100e14:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100e16:	4b21      	ldr	r3, [pc, #132]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e1e:	f043 0304 	orr.w	r3, r3, #4
 8100e22:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100e26:	4b1d      	ldr	r3, [pc, #116]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e2c:	f003 0304 	and.w	r3, r3, #4
 8100e30:	60fb      	str	r3, [r7, #12]
 8100e32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8100e34:	4b19      	ldr	r3, [pc, #100]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e3a:	4a18      	ldr	r2, [pc, #96]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e3c:	f043 0301 	orr.w	r3, r3, #1
 8100e40:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100e44:	4b15      	ldr	r3, [pc, #84]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e4a:	f003 0301 	and.w	r3, r3, #1
 8100e4e:	60bb      	str	r3, [r7, #8]
 8100e50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e52:	4b12      	ldr	r3, [pc, #72]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e58:	4a10      	ldr	r2, [pc, #64]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e5a:	f043 0308 	orr.w	r3, r3, #8
 8100e5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100e62:	4b0e      	ldr	r3, [pc, #56]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e68:	f003 0308 	and.w	r3, r3, #8
 8100e6c:	607b      	str	r3, [r7, #4]
 8100e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100e70:	4b0a      	ldr	r3, [pc, #40]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e76:	4a09      	ldr	r2, [pc, #36]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e78:	f043 0302 	orr.w	r3, r3, #2
 8100e7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100e80:	4b06      	ldr	r3, [pc, #24]	@ (8100e9c <MX_GPIO_Init+0x8c>)
 8100e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100e86:	f003 0302 	and.w	r3, r3, #2
 8100e8a:	603b      	str	r3, [r7, #0]
 8100e8c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100e8e:	bf00      	nop
 8100e90:	3714      	adds	r7, #20
 8100e92:	46bd      	mov	sp, r7
 8100e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e98:	4770      	bx	lr
 8100e9a:	bf00      	nop
 8100e9c:	46020c00 	.word	0x46020c00

08100ea0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100ea0:	b580      	push	{r7, lr}
 8100ea2:	b082      	sub	sp, #8
 8100ea4:	af00      	add	r7, sp, #0
 8100ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8100ea8:	687b      	ldr	r3, [r7, #4]
 8100eaa:	681b      	ldr	r3, [r3, #0]
 8100eac:	4a04      	ldr	r2, [pc, #16]	@ (8100ec0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8100eae:	4293      	cmp	r3, r2
 8100eb0:	d101      	bne.n	8100eb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8100eb2:	f000 fcf3 	bl	810189c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8100eb6:	bf00      	nop
 8100eb8:	3708      	adds	r7, #8
 8100eba:	46bd      	mov	sp, r7
 8100ebc:	bd80      	pop	{r7, pc}
 8100ebe:	bf00      	nop
 8100ec0:	40014800 	.word	0x40014800

08100ec4 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8100ec4:	b480      	push	{r7}
 8100ec6:	b083      	sub	sp, #12
 8100ec8:	af00      	add	r7, sp, #0
 8100eca:	4603      	mov	r3, r0
 8100ecc:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8100ece:	79fb      	ldrb	r3, [r7, #7]
 8100ed0:	2b00      	cmp	r3, #0
 8100ed2:	d102      	bne.n	8100eda <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8100ed4:	4b04      	ldr	r3, [pc, #16]	@ (8100ee8 <BSP_PB_Callback+0x24>)
 8100ed6:	2201      	movs	r2, #1
 8100ed8:	601a      	str	r2, [r3, #0]
  }
}
 8100eda:	bf00      	nop
 8100edc:	370c      	adds	r7, #12
 8100ede:	46bd      	mov	sp, r7
 8100ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ee4:	4770      	bx	lr
 8100ee6:	bf00      	nop
 8100ee8:	200000e8 	.word	0x200000e8

08100eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100eec:	b480      	push	{r7}
 8100eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100ef0:	b672      	cpsid	i
}
 8100ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100ef4:	bf00      	nop
 8100ef6:	e7fd      	b.n	8100ef4 <Error_Handler+0x8>

08100ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100ef8:	b580      	push	{r7, lr}
 8100efa:	b082      	sub	sp, #8
 8100efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8100efe:	4b0b      	ldr	r3, [pc, #44]	@ (8100f2c <HAL_MspInit+0x34>)
 8100f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100f04:	4a09      	ldr	r2, [pc, #36]	@ (8100f2c <HAL_MspInit+0x34>)
 8100f06:	f043 0304 	orr.w	r3, r3, #4
 8100f0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8100f0e:	4b07      	ldr	r3, [pc, #28]	@ (8100f2c <HAL_MspInit+0x34>)
 8100f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8100f14:	f003 0304 	and.w	r3, r3, #4
 8100f18:	607b      	str	r3, [r7, #4]
 8100f1a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8100f1c:	2004      	movs	r0, #4
 8100f1e:	f000 fd8a 	bl	8101a36 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100f22:	bf00      	nop
 8100f24:	3708      	adds	r7, #8
 8100f26:	46bd      	mov	sp, r7
 8100f28:	bd80      	pop	{r7, pc}
 8100f2a:	bf00      	nop
 8100f2c:	46020c00 	.word	0x46020c00

08100f30 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8100f30:	b580      	push	{r7, lr}
 8100f32:	b0ba      	sub	sp, #232	@ 0xe8
 8100f34:	af00      	add	r7, sp, #0
 8100f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100f3c:	2200      	movs	r2, #0
 8100f3e:	601a      	str	r2, [r3, #0]
 8100f40:	605a      	str	r2, [r3, #4]
 8100f42:	609a      	str	r2, [r3, #8]
 8100f44:	60da      	str	r2, [r3, #12]
 8100f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8100f48:	f107 0310 	add.w	r3, r7, #16
 8100f4c:	22c0      	movs	r2, #192	@ 0xc0
 8100f4e:	2100      	movs	r1, #0
 8100f50:	4618      	mov	r0, r3
 8100f52:	f007 fcb3 	bl	81088bc <memset>
  if(hfdcan->Instance==FDCAN1)
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	681b      	ldr	r3, [r3, #0]
 8100f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8101008 <HAL_FDCAN_MspInit+0xd8>)
 8100f5c:	4293      	cmp	r3, r2
 8100f5e:	d14e      	bne.n	8100ffe <HAL_FDCAN_MspInit+0xce>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN1;
 8100f60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8100f64:	f04f 0300 	mov.w	r3, #0
 8100f68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Fdcan1ClockSelection = RCC_FDCAN1CLKSOURCE_PLL1;
 8100f6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8100f70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8100f74:	f107 0310 	add.w	r3, r7, #16
 8100f78:	4618      	mov	r0, r3
 8100f7a:	f003 fd23 	bl	81049c4 <HAL_RCCEx_PeriphCLKConfig>
 8100f7e:	4603      	mov	r3, r0
 8100f80:	2b00      	cmp	r3, #0
 8100f82:	d001      	beq.n	8100f88 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8100f84:	f7ff ffb2 	bl	8100eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 8100f88:	4b20      	ldr	r3, [pc, #128]	@ (810100c <HAL_FDCAN_MspInit+0xdc>)
 8100f8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8100f8e:	4a1f      	ldr	r2, [pc, #124]	@ (810100c <HAL_FDCAN_MspInit+0xdc>)
 8100f90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8100f94:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8100f98:	4b1c      	ldr	r3, [pc, #112]	@ (810100c <HAL_FDCAN_MspInit+0xdc>)
 8100f9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8100f9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8100fa2:	60fb      	str	r3, [r7, #12]
 8100fa4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100fa6:	4b19      	ldr	r3, [pc, #100]	@ (810100c <HAL_FDCAN_MspInit+0xdc>)
 8100fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100fac:	4a17      	ldr	r2, [pc, #92]	@ (810100c <HAL_FDCAN_MspInit+0xdc>)
 8100fae:	f043 0308 	orr.w	r3, r3, #8
 8100fb2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8100fb6:	4b15      	ldr	r3, [pc, #84]	@ (810100c <HAL_FDCAN_MspInit+0xdc>)
 8100fb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8100fbc:	f003 0308 	and.w	r3, r3, #8
 8100fc0:	60bb      	str	r3, [r7, #8]
 8100fc2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8100fc4:	2303      	movs	r3, #3
 8100fc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100fca:	2302      	movs	r3, #2
 8100fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fd0:	2300      	movs	r3, #0
 8100fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8100fdc:	2309      	movs	r3, #9
 8100fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100fe2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8100fe6:	4619      	mov	r1, r3
 8100fe8:	4809      	ldr	r0, [pc, #36]	@ (8101010 <HAL_FDCAN_MspInit+0xe0>)
 8100fea:	f001 fed1 	bl	8102d90 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8100fee:	2200      	movs	r2, #0
 8100ff0:	2100      	movs	r1, #0
 8100ff2:	2027      	movs	r0, #39	@ 0x27
 8100ff4:	f000 fd2a 	bl	8101a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8100ff8:	2027      	movs	r0, #39	@ 0x27
 8100ffa:	f000 fd41 	bl	8101a80 <HAL_NVIC_EnableIRQ>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8100ffe:	bf00      	nop
 8101000:	37e8      	adds	r7, #232	@ 0xe8
 8101002:	46bd      	mov	sp, r7
 8101004:	bd80      	pop	{r7, pc}
 8101006:	bf00      	nop
 8101008:	4000a400 	.word	0x4000a400
 810100c:	46020c00 	.word	0x46020c00
 8101010:	42020c00 	.word	0x42020c00

08101014 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101014:	b580      	push	{r7, lr}
 8101016:	b08e      	sub	sp, #56	@ 0x38
 8101018:	af00      	add	r7, sp, #0
 810101a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 810101c:	2300      	movs	r3, #0
 810101e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8101020:	2300      	movs	r3, #0
 8101022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8101024:	4b2e      	ldr	r3, [pc, #184]	@ (81010e0 <HAL_InitTick+0xcc>)
 8101026:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810102a:	4a2d      	ldr	r2, [pc, #180]	@ (81010e0 <HAL_InitTick+0xcc>)
 810102c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8101030:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8101034:	4b2a      	ldr	r3, [pc, #168]	@ (81010e0 <HAL_InitTick+0xcc>)
 8101036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810103a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810103e:	60fb      	str	r3, [r7, #12]
 8101040:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8101042:	f107 0210 	add.w	r2, r7, #16
 8101046:	f107 0314 	add.w	r3, r7, #20
 810104a:	4611      	mov	r1, r2
 810104c:	4618      	mov	r0, r3
 810104e:	f003 fbfb 	bl	8104848 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8101052:	f003 fbd1 	bl	81047f8 <HAL_RCC_GetPCLK2Freq>
 8101056:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8101058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810105a:	4a22      	ldr	r2, [pc, #136]	@ (81010e4 <HAL_InitTick+0xd0>)
 810105c:	fba2 2303 	umull	r2, r3, r2, r3
 8101060:	0c9b      	lsrs	r3, r3, #18
 8101062:	3b01      	subs	r3, #1
 8101064:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8101066:	4b20      	ldr	r3, [pc, #128]	@ (81010e8 <HAL_InitTick+0xd4>)
 8101068:	4a20      	ldr	r2, [pc, #128]	@ (81010ec <HAL_InitTick+0xd8>)
 810106a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 810106c:	4b1e      	ldr	r3, [pc, #120]	@ (81010e8 <HAL_InitTick+0xd4>)
 810106e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8101072:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8101074:	4a1c      	ldr	r2, [pc, #112]	@ (81010e8 <HAL_InitTick+0xd4>)
 8101076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8101078:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 810107a:	4b1b      	ldr	r3, [pc, #108]	@ (81010e8 <HAL_InitTick+0xd4>)
 810107c:	2200      	movs	r2, #0
 810107e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101080:	4b19      	ldr	r3, [pc, #100]	@ (81010e8 <HAL_InitTick+0xd4>)
 8101082:	2200      	movs	r2, #0
 8101084:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8101086:	4818      	ldr	r0, [pc, #96]	@ (81010e8 <HAL_InitTick+0xd4>)
 8101088:	f006 f934 	bl	81072f4 <HAL_TIM_Base_Init>
 810108c:	4603      	mov	r3, r0
 810108e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8101092:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8101096:	2b00      	cmp	r3, #0
 8101098:	d118      	bne.n	81010cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 810109a:	4813      	ldr	r0, [pc, #76]	@ (81010e8 <HAL_InitTick+0xd4>)
 810109c:	f006 f98c 	bl	81073b8 <HAL_TIM_Base_Start_IT>
 81010a0:	4603      	mov	r3, r0
 81010a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 81010a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 81010aa:	2b00      	cmp	r3, #0
 81010ac:	d10e      	bne.n	81010cc <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81010ae:	687b      	ldr	r3, [r7, #4]
 81010b0:	2b0f      	cmp	r3, #15
 81010b2:	d808      	bhi.n	81010c6 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 81010b4:	2200      	movs	r2, #0
 81010b6:	6879      	ldr	r1, [r7, #4]
 81010b8:	2047      	movs	r0, #71	@ 0x47
 81010ba:	f000 fcc7 	bl	8101a4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 81010be:	4a0c      	ldr	r2, [pc, #48]	@ (81010f0 <HAL_InitTick+0xdc>)
 81010c0:	687b      	ldr	r3, [r7, #4]
 81010c2:	6013      	str	r3, [r2, #0]
 81010c4:	e002      	b.n	81010cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 81010c6:	2301      	movs	r3, #1
 81010c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 81010cc:	2047      	movs	r0, #71	@ 0x47
 81010ce:	f000 fcd7 	bl	8101a80 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 81010d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 81010d6:	4618      	mov	r0, r3
 81010d8:	3738      	adds	r7, #56	@ 0x38
 81010da:	46bd      	mov	sp, r7
 81010dc:	bd80      	pop	{r7, pc}
 81010de:	bf00      	nop
 81010e0:	46020c00 	.word	0x46020c00
 81010e4:	431bde83 	.word	0x431bde83
 81010e8:	20000154 	.word	0x20000154
 81010ec:	40014800 	.word	0x40014800
 81010f0:	20000020 	.word	0x20000020

081010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81010f4:	b480      	push	{r7}
 81010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81010f8:	bf00      	nop
 81010fa:	e7fd      	b.n	81010f8 <NMI_Handler+0x4>

081010fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81010fc:	b480      	push	{r7}
 81010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101100:	bf00      	nop
 8101102:	e7fd      	b.n	8101100 <HardFault_Handler+0x4>

08101104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101104:	b480      	push	{r7}
 8101106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101108:	bf00      	nop
 810110a:	e7fd      	b.n	8101108 <MemManage_Handler+0x4>

0810110c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810110c:	b480      	push	{r7}
 810110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101110:	bf00      	nop
 8101112:	e7fd      	b.n	8101110 <BusFault_Handler+0x4>

08101114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101114:	b480      	push	{r7}
 8101116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101118:	bf00      	nop
 810111a:	e7fd      	b.n	8101118 <UsageFault_Handler+0x4>

0810111c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810111c:	b480      	push	{r7}
 810111e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr

0810112a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810112a:	b480      	push	{r7}
 810112c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810112e:	bf00      	nop
 8101130:	46bd      	mov	sp, r7
 8101132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101136:	4770      	bx	lr

08101138 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101138:	b480      	push	{r7}
 810113a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810113c:	bf00      	nop
 810113e:	46bd      	mov	sp, r7
 8101140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101144:	4770      	bx	lr

08101146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101146:	b480      	push	{r7}
 8101148:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810114a:	bf00      	nop
 810114c:	46bd      	mov	sp, r7
 810114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101152:	4770      	bx	lr

08101154 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8101154:	b580      	push	{r7, lr}
 8101156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8101158:	2000      	movs	r0, #0
 810115a:	f000 fa79 	bl	8101650 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 810115e:	bf00      	nop
 8101160:	bd80      	pop	{r7, pc}
	...

08101164 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8101164:	b580      	push	{r7, lr}
 8101166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8101168:	4802      	ldr	r0, [pc, #8]	@ (8101174 <FDCAN1_IT0_IRQHandler+0x10>)
 810116a:	f001 f9af 	bl	81024cc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 810116e:	bf00      	nop
 8101170:	bd80      	pop	{r7, pc}
 8101172:	bf00      	nop
 8101174:	200000ec 	.word	0x200000ec

08101178 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8101178:	b580      	push	{r7, lr}
 810117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 810117c:	4802      	ldr	r0, [pc, #8]	@ (8101188 <TIM17_IRQHandler+0x10>)
 810117e:	f006 f9bb 	bl	81074f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8101182:	bf00      	nop
 8101184:	bd80      	pop	{r7, pc}
 8101186:	bf00      	nop
 8101188:	20000154 	.word	0x20000154

0810118c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810118c:	b580      	push	{r7, lr}
 810118e:	b086      	sub	sp, #24
 8101190:	af00      	add	r7, sp, #0
 8101192:	60f8      	str	r0, [r7, #12]
 8101194:	60b9      	str	r1, [r7, #8]
 8101196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101198:	2300      	movs	r3, #0
 810119a:	617b      	str	r3, [r7, #20]
 810119c:	e00a      	b.n	81011b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 810119e:	f3af 8000 	nop.w
 81011a2:	4601      	mov	r1, r0
 81011a4:	68bb      	ldr	r3, [r7, #8]
 81011a6:	1c5a      	adds	r2, r3, #1
 81011a8:	60ba      	str	r2, [r7, #8]
 81011aa:	b2ca      	uxtb	r2, r1
 81011ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81011ae:	697b      	ldr	r3, [r7, #20]
 81011b0:	3301      	adds	r3, #1
 81011b2:	617b      	str	r3, [r7, #20]
 81011b4:	697a      	ldr	r2, [r7, #20]
 81011b6:	687b      	ldr	r3, [r7, #4]
 81011b8:	429a      	cmp	r2, r3
 81011ba:	dbf0      	blt.n	810119e <_read+0x12>
  }

  return len;
 81011bc:	687b      	ldr	r3, [r7, #4]
}
 81011be:	4618      	mov	r0, r3
 81011c0:	3718      	adds	r7, #24
 81011c2:	46bd      	mov	sp, r7
 81011c4:	bd80      	pop	{r7, pc}

081011c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81011c6:	b580      	push	{r7, lr}
 81011c8:	b086      	sub	sp, #24
 81011ca:	af00      	add	r7, sp, #0
 81011cc:	60f8      	str	r0, [r7, #12]
 81011ce:	60b9      	str	r1, [r7, #8]
 81011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81011d2:	2300      	movs	r3, #0
 81011d4:	617b      	str	r3, [r7, #20]
 81011d6:	e009      	b.n	81011ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 81011d8:	68bb      	ldr	r3, [r7, #8]
 81011da:	1c5a      	adds	r2, r3, #1
 81011dc:	60ba      	str	r2, [r7, #8]
 81011de:	781b      	ldrb	r3, [r3, #0]
 81011e0:	4618      	mov	r0, r3
 81011e2:	f000 faaf 	bl	8101744 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81011e6:	697b      	ldr	r3, [r7, #20]
 81011e8:	3301      	adds	r3, #1
 81011ea:	617b      	str	r3, [r7, #20]
 81011ec:	697a      	ldr	r2, [r7, #20]
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	429a      	cmp	r2, r3
 81011f2:	dbf1      	blt.n	81011d8 <_write+0x12>
  }
  return len;
 81011f4:	687b      	ldr	r3, [r7, #4]
}
 81011f6:	4618      	mov	r0, r3
 81011f8:	3718      	adds	r7, #24
 81011fa:	46bd      	mov	sp, r7
 81011fc:	bd80      	pop	{r7, pc}

081011fe <_close>:

int _close(int file)
{
 81011fe:	b480      	push	{r7}
 8101200:	b083      	sub	sp, #12
 8101202:	af00      	add	r7, sp, #0
 8101204:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101206:	f04f 33ff 	mov.w	r3, #4294967295
}
 810120a:	4618      	mov	r0, r3
 810120c:	370c      	adds	r7, #12
 810120e:	46bd      	mov	sp, r7
 8101210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101214:	4770      	bx	lr

08101216 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101216:	b480      	push	{r7}
 8101218:	b083      	sub	sp, #12
 810121a:	af00      	add	r7, sp, #0
 810121c:	6078      	str	r0, [r7, #4]
 810121e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101220:	683b      	ldr	r3, [r7, #0]
 8101222:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101226:	605a      	str	r2, [r3, #4]
  return 0;
 8101228:	2300      	movs	r3, #0
}
 810122a:	4618      	mov	r0, r3
 810122c:	370c      	adds	r7, #12
 810122e:	46bd      	mov	sp, r7
 8101230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101234:	4770      	bx	lr

08101236 <_isatty>:

int _isatty(int file)
{
 8101236:	b480      	push	{r7}
 8101238:	b083      	sub	sp, #12
 810123a:	af00      	add	r7, sp, #0
 810123c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 810123e:	2301      	movs	r3, #1
}
 8101240:	4618      	mov	r0, r3
 8101242:	370c      	adds	r7, #12
 8101244:	46bd      	mov	sp, r7
 8101246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810124a:	4770      	bx	lr

0810124c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 810124c:	b480      	push	{r7}
 810124e:	b085      	sub	sp, #20
 8101250:	af00      	add	r7, sp, #0
 8101252:	60f8      	str	r0, [r7, #12]
 8101254:	60b9      	str	r1, [r7, #8]
 8101256:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101258:	2300      	movs	r3, #0
}
 810125a:	4618      	mov	r0, r3
 810125c:	3714      	adds	r7, #20
 810125e:	46bd      	mov	sp, r7
 8101260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101264:	4770      	bx	lr
	...

08101268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101268:	b580      	push	{r7, lr}
 810126a:	b086      	sub	sp, #24
 810126c:	af00      	add	r7, sp, #0
 810126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101270:	4a14      	ldr	r2, [pc, #80]	@ (81012c4 <_sbrk+0x5c>)
 8101272:	4b15      	ldr	r3, [pc, #84]	@ (81012c8 <_sbrk+0x60>)
 8101274:	1ad3      	subs	r3, r2, r3
 8101276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101278:	697b      	ldr	r3, [r7, #20]
 810127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 810127c:	4b13      	ldr	r3, [pc, #76]	@ (81012cc <_sbrk+0x64>)
 810127e:	681b      	ldr	r3, [r3, #0]
 8101280:	2b00      	cmp	r3, #0
 8101282:	d102      	bne.n	810128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101284:	4b11      	ldr	r3, [pc, #68]	@ (81012cc <_sbrk+0x64>)
 8101286:	4a12      	ldr	r2, [pc, #72]	@ (81012d0 <_sbrk+0x68>)
 8101288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810128a:	4b10      	ldr	r3, [pc, #64]	@ (81012cc <_sbrk+0x64>)
 810128c:	681a      	ldr	r2, [r3, #0]
 810128e:	687b      	ldr	r3, [r7, #4]
 8101290:	4413      	add	r3, r2
 8101292:	693a      	ldr	r2, [r7, #16]
 8101294:	429a      	cmp	r2, r3
 8101296:	d207      	bcs.n	81012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101298:	f007 fb6e 	bl	8108978 <__errno>
 810129c:	4603      	mov	r3, r0
 810129e:	220c      	movs	r2, #12
 81012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81012a2:	f04f 33ff 	mov.w	r3, #4294967295
 81012a6:	e009      	b.n	81012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81012a8:	4b08      	ldr	r3, [pc, #32]	@ (81012cc <_sbrk+0x64>)
 81012aa:	681b      	ldr	r3, [r3, #0]
 81012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81012ae:	4b07      	ldr	r3, [pc, #28]	@ (81012cc <_sbrk+0x64>)
 81012b0:	681a      	ldr	r2, [r3, #0]
 81012b2:	687b      	ldr	r3, [r7, #4]
 81012b4:	4413      	add	r3, r2
 81012b6:	4a05      	ldr	r2, [pc, #20]	@ (81012cc <_sbrk+0x64>)
 81012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81012ba:	68fb      	ldr	r3, [r7, #12]
}
 81012bc:	4618      	mov	r0, r3
 81012be:	3718      	adds	r7, #24
 81012c0:	46bd      	mov	sp, r7
 81012c2:	bd80      	pop	{r7, pc}
 81012c4:	200c0000 	.word	0x200c0000
 81012c8:	00000400 	.word	0x00000400
 81012cc:	200001a0 	.word	0x200001a0
 81012d0:	20000398 	.word	0x20000398

081012d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 81012d4:	b480      	push	{r7}
 81012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 81012d8:	4b18      	ldr	r3, [pc, #96]	@ (810133c <SystemInit+0x68>)
 81012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81012de:	4a17      	ldr	r2, [pc, #92]	@ (810133c <SystemInit+0x68>)
 81012e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81012e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 81012e8:	4b15      	ldr	r3, [pc, #84]	@ (8101340 <SystemInit+0x6c>)
 81012ea:	2201      	movs	r2, #1
 81012ec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 81012ee:	4b14      	ldr	r3, [pc, #80]	@ (8101340 <SystemInit+0x6c>)
 81012f0:	2200      	movs	r2, #0
 81012f2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 81012f4:	4b12      	ldr	r3, [pc, #72]	@ (8101340 <SystemInit+0x6c>)
 81012f6:	2200      	movs	r2, #0
 81012f8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 81012fa:	4b11      	ldr	r3, [pc, #68]	@ (8101340 <SystemInit+0x6c>)
 81012fc:	2200      	movs	r2, #0
 81012fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8101300:	4b0f      	ldr	r3, [pc, #60]	@ (8101340 <SystemInit+0x6c>)
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	4a0e      	ldr	r2, [pc, #56]	@ (8101340 <SystemInit+0x6c>)
 8101306:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 810130a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 810130e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8101310:	4b0b      	ldr	r3, [pc, #44]	@ (8101340 <SystemInit+0x6c>)
 8101312:	2200      	movs	r2, #0
 8101314:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8101316:	4b0a      	ldr	r3, [pc, #40]	@ (8101340 <SystemInit+0x6c>)
 8101318:	681b      	ldr	r3, [r3, #0]
 810131a:	4a09      	ldr	r2, [pc, #36]	@ (8101340 <SystemInit+0x6c>)
 810131c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8101320:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8101322:	4b07      	ldr	r3, [pc, #28]	@ (8101340 <SystemInit+0x6c>)
 8101324:	2200      	movs	r2, #0
 8101326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8101328:	4b04      	ldr	r3, [pc, #16]	@ (810133c <SystemInit+0x68>)
 810132a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 810132e:	609a      	str	r2, [r3, #8]
  #endif
}
 8101330:	bf00      	nop
 8101332:	46bd      	mov	sp, r7
 8101334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101338:	4770      	bx	lr
 810133a:	bf00      	nop
 810133c:	e000ed00 	.word	0xe000ed00
 8101340:	46020c00 	.word	0x46020c00

08101344 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8101344:	f8df d034 	ldr.w	sp, [pc, #52]	@ 810137c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8101348:	f7ff ffc4 	bl	81012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 810134c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 810134e:	e003      	b.n	8101358 <LoopCopyDataInit>

08101350 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8101350:	4b0b      	ldr	r3, [pc, #44]	@ (8101380 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8101352:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8101354:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8101356:	3104      	adds	r1, #4

08101358 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8101358:	480a      	ldr	r0, [pc, #40]	@ (8101384 <LoopForever+0xa>)
	ldr	r3, =_edata
 810135a:	4b0b      	ldr	r3, [pc, #44]	@ (8101388 <LoopForever+0xe>)
	adds	r2, r0, r1
 810135c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 810135e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8101360:	d3f6      	bcc.n	8101350 <CopyDataInit>
	ldr	r2, =_sbss
 8101362:	4a0a      	ldr	r2, [pc, #40]	@ (810138c <LoopForever+0x12>)
	b	LoopFillZerobss
 8101364:	e002      	b.n	810136c <LoopFillZerobss>

08101366 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8101366:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8101368:	f842 3b04 	str.w	r3, [r2], #4

0810136c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 810136c:	4b08      	ldr	r3, [pc, #32]	@ (8101390 <LoopForever+0x16>)
	cmp	r2, r3
 810136e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8101370:	d3f9      	bcc.n	8101366 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101372:	f007 fb07 	bl	8108984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8101376:	f7ff fc0b 	bl	8100b90 <main>

0810137a <LoopForever>:

LoopForever:
    b LoopForever
 810137a:	e7fe      	b.n	810137a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 810137c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8101380:	08109438 	.word	0x08109438
	ldr	r0, =_sdata
 8101384:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8101388:	200000a0 	.word	0x200000a0
	ldr	r2, =_sbss
 810138c:	200000a0 	.word	0x200000a0
	ldr	r3, = _ebss
 8101390:	20000396 	.word	0x20000396

08101394 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8101394:	e7fe      	b.n	8101394 <ADC1_IRQHandler>
	...

08101398 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8101398:	b580      	push	{r7, lr}
 810139a:	b08e      	sub	sp, #56	@ 0x38
 810139c:	af00      	add	r7, sp, #0
 810139e:	4603      	mov	r3, r0
 81013a0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81013a2:	2300      	movs	r3, #0
 81013a4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 81013a6:	2300      	movs	r3, #0
 81013a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 81013aa:	79fb      	ldrb	r3, [r7, #7]
 81013ac:	2b01      	cmp	r3, #1
 81013ae:	d009      	beq.n	81013c4 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 81013b0:	79fb      	ldrb	r3, [r7, #7]
 81013b2:	2b00      	cmp	r3, #0
 81013b4:	d006      	beq.n	81013c4 <BSP_LED_Init+0x2c>
 81013b6:	79fb      	ldrb	r3, [r7, #7]
 81013b8:	2b02      	cmp	r3, #2
 81013ba:	d003      	beq.n	81013c4 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81013bc:	f06f 0301 	mvn.w	r3, #1
 81013c0:	637b      	str	r3, [r7, #52]	@ 0x34
 81013c2:	e06e      	b.n	81014a2 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 81013c4:	79fb      	ldrb	r3, [r7, #7]
 81013c6:	2b01      	cmp	r3, #1
 81013c8:	d10f      	bne.n	81013ea <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 81013ca:	4b38      	ldr	r3, [pc, #224]	@ (81014ac <BSP_LED_Init+0x114>)
 81013cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81013d0:	4a36      	ldr	r2, [pc, #216]	@ (81014ac <BSP_LED_Init+0x114>)
 81013d2:	f043 0302 	orr.w	r3, r3, #2
 81013d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 81013da:	4b34      	ldr	r3, [pc, #208]	@ (81014ac <BSP_LED_Init+0x114>)
 81013dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81013e0:	f003 0302 	and.w	r3, r3, #2
 81013e4:	61bb      	str	r3, [r7, #24]
 81013e6:	69bb      	ldr	r3, [r7, #24]
 81013e8:	e046      	b.n	8101478 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 81013ea:	79fb      	ldrb	r3, [r7, #7]
 81013ec:	2b00      	cmp	r3, #0
 81013ee:	d10f      	bne.n	8101410 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 81013f0:	4b2e      	ldr	r3, [pc, #184]	@ (81014ac <BSP_LED_Init+0x114>)
 81013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81013f6:	4a2d      	ldr	r2, [pc, #180]	@ (81014ac <BSP_LED_Init+0x114>)
 81013f8:	f043 0304 	orr.w	r3, r3, #4
 81013fc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8101400:	4b2a      	ldr	r3, [pc, #168]	@ (81014ac <BSP_LED_Init+0x114>)
 8101402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8101406:	f003 0304 	and.w	r3, r3, #4
 810140a:	617b      	str	r3, [r7, #20]
 810140c:	697b      	ldr	r3, [r7, #20]
 810140e:	e033      	b.n	8101478 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8101410:	4b26      	ldr	r3, [pc, #152]	@ (81014ac <BSP_LED_Init+0x114>)
 8101412:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101416:	f003 0304 	and.w	r3, r3, #4
 810141a:	2b00      	cmp	r3, #0
 810141c:	d110      	bne.n	8101440 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 810141e:	4b23      	ldr	r3, [pc, #140]	@ (81014ac <BSP_LED_Init+0x114>)
 8101420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101424:	4a21      	ldr	r2, [pc, #132]	@ (81014ac <BSP_LED_Init+0x114>)
 8101426:	f043 0304 	orr.w	r3, r3, #4
 810142a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 810142e:	4b1f      	ldr	r3, [pc, #124]	@ (81014ac <BSP_LED_Init+0x114>)
 8101430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101434:	f003 0304 	and.w	r3, r3, #4
 8101438:	613b      	str	r3, [r7, #16]
 810143a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 810143c:	2301      	movs	r3, #1
 810143e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8101440:	f001 ffbc 	bl	81033bc <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8101444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8101446:	2b01      	cmp	r3, #1
 8101448:	d107      	bne.n	810145a <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 810144a:	4b18      	ldr	r3, [pc, #96]	@ (81014ac <BSP_LED_Init+0x114>)
 810144c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8101450:	4a16      	ldr	r2, [pc, #88]	@ (81014ac <BSP_LED_Init+0x114>)
 8101452:	f023 0304 	bic.w	r3, r3, #4
 8101456:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 810145a:	4b14      	ldr	r3, [pc, #80]	@ (81014ac <BSP_LED_Init+0x114>)
 810145c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8101460:	4a12      	ldr	r2, [pc, #72]	@ (81014ac <BSP_LED_Init+0x114>)
 8101462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101466:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 810146a:	4b10      	ldr	r3, [pc, #64]	@ (81014ac <BSP_LED_Init+0x114>)
 810146c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8101470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101474:	60fb      	str	r3, [r7, #12]
 8101476:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8101478:	79fb      	ldrb	r3, [r7, #7]
 810147a:	4a0d      	ldr	r2, [pc, #52]	@ (81014b0 <BSP_LED_Init+0x118>)
 810147c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8101480:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8101482:	2301      	movs	r3, #1
 8101484:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8101486:	2300      	movs	r3, #0
 8101488:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810148a:	2303      	movs	r3, #3
 810148c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 810148e:	79fb      	ldrb	r3, [r7, #7]
 8101490:	4a08      	ldr	r2, [pc, #32]	@ (81014b4 <BSP_LED_Init+0x11c>)
 8101492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101496:	f107 021c 	add.w	r2, r7, #28
 810149a:	4611      	mov	r1, r2
 810149c:	4618      	mov	r0, r3
 810149e:	f001 fc77 	bl	8102d90 <HAL_GPIO_Init>
  }

  return ret;
 81014a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 81014a4:	4618      	mov	r0, r3
 81014a6:	3738      	adds	r7, #56	@ 0x38
 81014a8:	46bd      	mov	sp, r7
 81014aa:	bd80      	pop	{r7, pc}
 81014ac:	46020c00 	.word	0x46020c00
 81014b0:	08109340 	.word	0x08109340
 81014b4:	20000008 	.word	0x20000008

081014b8 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 81014b8:	b580      	push	{r7, lr}
 81014ba:	b084      	sub	sp, #16
 81014bc:	af00      	add	r7, sp, #0
 81014be:	4603      	mov	r3, r0
 81014c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 81014c2:	2300      	movs	r3, #0
 81014c4:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 81014c6:	79fb      	ldrb	r3, [r7, #7]
 81014c8:	2b01      	cmp	r3, #1
 81014ca:	d009      	beq.n	81014e0 <BSP_LED_On+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 81014cc:	79fb      	ldrb	r3, [r7, #7]
 81014ce:	2b00      	cmp	r3, #0
 81014d0:	d006      	beq.n	81014e0 <BSP_LED_On+0x28>
 81014d2:	79fb      	ldrb	r3, [r7, #7]
 81014d4:	2b02      	cmp	r3, #2
 81014d6:	d003      	beq.n	81014e0 <BSP_LED_On+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 81014d8:	f06f 0301 	mvn.w	r3, #1
 81014dc:	60fb      	str	r3, [r7, #12]
 81014de:	e00b      	b.n	81014f8 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 81014e0:	79fb      	ldrb	r3, [r7, #7]
 81014e2:	4a08      	ldr	r2, [pc, #32]	@ (8101504 <BSP_LED_On+0x4c>)
 81014e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 81014e8:	79fb      	ldrb	r3, [r7, #7]
 81014ea:	4a07      	ldr	r2, [pc, #28]	@ (8101508 <BSP_LED_On+0x50>)
 81014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81014f0:	2201      	movs	r2, #1
 81014f2:	4619      	mov	r1, r3
 81014f4:	f001 fe24 	bl	8103140 <HAL_GPIO_WritePin>
  }

  return ret;
 81014f8:	68fb      	ldr	r3, [r7, #12]
}
 81014fa:	4618      	mov	r0, r3
 81014fc:	3710      	adds	r7, #16
 81014fe:	46bd      	mov	sp, r7
 8101500:	bd80      	pop	{r7, pc}
 8101502:	bf00      	nop
 8101504:	20000008 	.word	0x20000008
 8101508:	08109340 	.word	0x08109340

0810150c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 810150c:	b580      	push	{r7, lr}
 810150e:	b084      	sub	sp, #16
 8101510:	af00      	add	r7, sp, #0
 8101512:	4603      	mov	r3, r0
 8101514:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8101516:	2300      	movs	r3, #0
 8101518:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 810151a:	79fb      	ldrb	r3, [r7, #7]
 810151c:	2b01      	cmp	r3, #1
 810151e:	d009      	beq.n	8101534 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8101520:	79fb      	ldrb	r3, [r7, #7]
 8101522:	2b00      	cmp	r3, #0
 8101524:	d006      	beq.n	8101534 <BSP_LED_Toggle+0x28>
 8101526:	79fb      	ldrb	r3, [r7, #7]
 8101528:	2b02      	cmp	r3, #2
 810152a:	d003      	beq.n	8101534 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 810152c:	f06f 0301 	mvn.w	r3, #1
 8101530:	60fb      	str	r3, [r7, #12]
 8101532:	e00b      	b.n	810154c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8101534:	79fb      	ldrb	r3, [r7, #7]
 8101536:	4a08      	ldr	r2, [pc, #32]	@ (8101558 <BSP_LED_Toggle+0x4c>)
 8101538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810153c:	79fb      	ldrb	r3, [r7, #7]
 810153e:	4907      	ldr	r1, [pc, #28]	@ (810155c <BSP_LED_Toggle+0x50>)
 8101540:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8101544:	4619      	mov	r1, r3
 8101546:	4610      	mov	r0, r2
 8101548:	f001 fe12 	bl	8103170 <HAL_GPIO_TogglePin>
  }

  return ret;
 810154c:	68fb      	ldr	r3, [r7, #12]
}
 810154e:	4618      	mov	r0, r3
 8101550:	3710      	adds	r7, #16
 8101552:	46bd      	mov	sp, r7
 8101554:	bd80      	pop	{r7, pc}
 8101556:	bf00      	nop
 8101558:	20000008 	.word	0x20000008
 810155c:	08109340 	.word	0x08109340

08101560 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8101560:	b580      	push	{r7, lr}
 8101562:	b088      	sub	sp, #32
 8101564:	af00      	add	r7, sp, #0
 8101566:	4603      	mov	r3, r0
 8101568:	460a      	mov	r2, r1
 810156a:	71fb      	strb	r3, [r7, #7]
 810156c:	4613      	mov	r3, r2
 810156e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8101570:	4b30      	ldr	r3, [pc, #192]	@ (8101634 <BSP_PB_Init+0xd4>)
 8101572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8101576:	4a2f      	ldr	r2, [pc, #188]	@ (8101634 <BSP_PB_Init+0xd4>)
 8101578:	f043 0304 	orr.w	r3, r3, #4
 810157c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8101580:	4b2c      	ldr	r3, [pc, #176]	@ (8101634 <BSP_PB_Init+0xd4>)
 8101582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8101586:	f003 0304 	and.w	r3, r3, #4
 810158a:	60bb      	str	r3, [r7, #8]
 810158c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 810158e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8101592:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8101594:	2302      	movs	r3, #2
 8101596:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8101598:	2302      	movs	r3, #2
 810159a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 810159c:	79bb      	ldrb	r3, [r7, #6]
 810159e:	2b00      	cmp	r3, #0
 81015a0:	d10c      	bne.n	81015bc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 81015a2:	2300      	movs	r3, #0
 81015a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 81015a6:	79fb      	ldrb	r3, [r7, #7]
 81015a8:	4a23      	ldr	r2, [pc, #140]	@ (8101638 <BSP_PB_Init+0xd8>)
 81015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81015ae:	f107 020c 	add.w	r2, r7, #12
 81015b2:	4611      	mov	r1, r2
 81015b4:	4618      	mov	r0, r3
 81015b6:	f001 fbeb 	bl	8102d90 <HAL_GPIO_Init>
 81015ba:	e036      	b.n	810162a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 81015bc:	4b1f      	ldr	r3, [pc, #124]	@ (810163c <BSP_PB_Init+0xdc>)
 81015be:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 81015c0:	79fb      	ldrb	r3, [r7, #7]
 81015c2:	4a1d      	ldr	r2, [pc, #116]	@ (8101638 <BSP_PB_Init+0xd8>)
 81015c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81015c8:	f107 020c 	add.w	r2, r7, #12
 81015cc:	4611      	mov	r1, r2
 81015ce:	4618      	mov	r0, r3
 81015d0:	f001 fbde 	bl	8102d90 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 81015d4:	79fa      	ldrb	r2, [r7, #7]
 81015d6:	4613      	mov	r3, r2
 81015d8:	005b      	lsls	r3, r3, #1
 81015da:	4413      	add	r3, r2
 81015dc:	009b      	lsls	r3, r3, #2
 81015de:	4a18      	ldr	r2, [pc, #96]	@ (8101640 <BSP_PB_Init+0xe0>)
 81015e0:	441a      	add	r2, r3
 81015e2:	79fb      	ldrb	r3, [r7, #7]
 81015e4:	4917      	ldr	r1, [pc, #92]	@ (8101644 <BSP_PB_Init+0xe4>)
 81015e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 81015ea:	4619      	mov	r1, r3
 81015ec:	4610      	mov	r0, r2
 81015ee:	f000 fad9 	bl	8101ba4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 81015f2:	79fa      	ldrb	r2, [r7, #7]
 81015f4:	4613      	mov	r3, r2
 81015f6:	005b      	lsls	r3, r3, #1
 81015f8:	4413      	add	r3, r2
 81015fa:	009b      	lsls	r3, r3, #2
 81015fc:	4a10      	ldr	r2, [pc, #64]	@ (8101640 <BSP_PB_Init+0xe0>)
 81015fe:	1898      	adds	r0, r3, r2
 8101600:	79fb      	ldrb	r3, [r7, #7]
 8101602:	4a11      	ldr	r2, [pc, #68]	@ (8101648 <BSP_PB_Init+0xe8>)
 8101604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101608:	461a      	mov	r2, r3
 810160a:	2100      	movs	r1, #0
 810160c:	f000 fa9e 	bl	8101b4c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8101610:	2018      	movs	r0, #24
 8101612:	79fb      	ldrb	r3, [r7, #7]
 8101614:	4a0d      	ldr	r2, [pc, #52]	@ (810164c <BSP_PB_Init+0xec>)
 8101616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810161a:	2200      	movs	r2, #0
 810161c:	4619      	mov	r1, r3
 810161e:	f000 fa15 	bl	8101a4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8101622:	2318      	movs	r3, #24
 8101624:	4618      	mov	r0, r3
 8101626:	f000 fa2b 	bl	8101a80 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 810162a:	2300      	movs	r3, #0
}
 810162c:	4618      	mov	r0, r3
 810162e:	3720      	adds	r7, #32
 8101630:	46bd      	mov	sp, r7
 8101632:	bd80      	pop	{r7, pc}
 8101634:	46020c00 	.word	0x46020c00
 8101638:	20000014 	.word	0x20000014
 810163c:	10110000 	.word	0x10110000
 8101640:	200001a4 	.word	0x200001a4
 8101644:	08109348 	.word	0x08109348
 8101648:	20000018 	.word	0x20000018
 810164c:	2000001c 	.word	0x2000001c

08101650 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8101650:	b580      	push	{r7, lr}
 8101652:	b082      	sub	sp, #8
 8101654:	af00      	add	r7, sp, #0
 8101656:	4603      	mov	r3, r0
 8101658:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 810165a:	79fa      	ldrb	r2, [r7, #7]
 810165c:	4613      	mov	r3, r2
 810165e:	005b      	lsls	r3, r3, #1
 8101660:	4413      	add	r3, r2
 8101662:	009b      	lsls	r3, r3, #2
 8101664:	4a04      	ldr	r2, [pc, #16]	@ (8101678 <BSP_PB_IRQHandler+0x28>)
 8101666:	4413      	add	r3, r2
 8101668:	4618      	mov	r0, r3
 810166a:	f000 faaf 	bl	8101bcc <HAL_EXTI_IRQHandler>
}
 810166e:	bf00      	nop
 8101670:	3708      	adds	r7, #8
 8101672:	46bd      	mov	sp, r7
 8101674:	bd80      	pop	{r7, pc}
 8101676:	bf00      	nop
 8101678:	200001a4 	.word	0x200001a4

0810167c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 810167c:	b580      	push	{r7, lr}
 810167e:	b084      	sub	sp, #16
 8101680:	af00      	add	r7, sp, #0
 8101682:	4603      	mov	r3, r0
 8101684:	6039      	str	r1, [r7, #0]
 8101686:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8101688:	2300      	movs	r3, #0
 810168a:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 810168c:	79fb      	ldrb	r3, [r7, #7]
 810168e:	2b00      	cmp	r3, #0
 8101690:	d003      	beq.n	810169a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8101692:	f06f 0301 	mvn.w	r3, #1
 8101696:	60fb      	str	r3, [r7, #12]
 8101698:	e018      	b.n	81016cc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 810169a:	79fb      	ldrb	r3, [r7, #7]
 810169c:	2294      	movs	r2, #148	@ 0x94
 810169e:	fb02 f303 	mul.w	r3, r2, r3
 81016a2:	4a0d      	ldr	r2, [pc, #52]	@ (81016d8 <BSP_COM_Init+0x5c>)
 81016a4:	4413      	add	r3, r2
 81016a6:	4618      	mov	r0, r3
 81016a8:	f000 f870 	bl	810178c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 81016ac:	79fb      	ldrb	r3, [r7, #7]
 81016ae:	2294      	movs	r2, #148	@ 0x94
 81016b0:	fb02 f303 	mul.w	r3, r2, r3
 81016b4:	4a08      	ldr	r2, [pc, #32]	@ (81016d8 <BSP_COM_Init+0x5c>)
 81016b6:	4413      	add	r3, r2
 81016b8:	6839      	ldr	r1, [r7, #0]
 81016ba:	4618      	mov	r0, r3
 81016bc:	f000 f80e 	bl	81016dc <MX_USART1_Init>
 81016c0:	4603      	mov	r3, r0
 81016c2:	2b00      	cmp	r3, #0
 81016c4:	d002      	beq.n	81016cc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 81016c6:	f06f 0303 	mvn.w	r3, #3
 81016ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 81016cc:	68fb      	ldr	r3, [r7, #12]
}
 81016ce:	4618      	mov	r0, r3
 81016d0:	3710      	adds	r7, #16
 81016d2:	46bd      	mov	sp, r7
 81016d4:	bd80      	pop	{r7, pc}
 81016d6:	bf00      	nop
 81016d8:	200001b0 	.word	0x200001b0

081016dc <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 81016dc:	b580      	push	{r7, lr}
 81016de:	b082      	sub	sp, #8
 81016e0:	af00      	add	r7, sp, #0
 81016e2:	6078      	str	r0, [r7, #4]
 81016e4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 81016e6:	4b16      	ldr	r3, [pc, #88]	@ (8101740 <MX_USART1_Init+0x64>)
 81016e8:	681a      	ldr	r2, [r3, #0]
 81016ea:	687b      	ldr	r3, [r7, #4]
 81016ec:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 81016ee:	683b      	ldr	r3, [r7, #0]
 81016f0:	681a      	ldr	r2, [r3, #0]
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	220c      	movs	r2, #12
 81016fa:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 81016fc:	683b      	ldr	r3, [r7, #0]
 81016fe:	895b      	ldrh	r3, [r3, #10]
 8101700:	461a      	mov	r2, r3
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8101706:	683b      	ldr	r3, [r7, #0]
 8101708:	685a      	ldr	r2, [r3, #4]
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 810170e:	683b      	ldr	r3, [r7, #0]
 8101710:	891b      	ldrh	r3, [r3, #8]
 8101712:	461a      	mov	r2, r3
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8101718:	683b      	ldr	r3, [r7, #0]
 810171a:	899b      	ldrh	r3, [r3, #12]
 810171c:	461a      	mov	r2, r3
 810171e:	687b      	ldr	r3, [r7, #4]
 8101720:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8101722:	687b      	ldr	r3, [r7, #4]
 8101724:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8101728:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 810172a:	687b      	ldr	r3, [r7, #4]
 810172c:	2200      	movs	r2, #0
 810172e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8101730:	6878      	ldr	r0, [r7, #4]
 8101732:	f006 f99f 	bl	8107a74 <HAL_UART_Init>
 8101736:	4603      	mov	r3, r0
}
 8101738:	4618      	mov	r0, r3
 810173a:	3708      	adds	r7, #8
 810173c:	46bd      	mov	sp, r7
 810173e:	bd80      	pop	{r7, pc}
 8101740:	20000004 	.word	0x20000004

08101744 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8101744:	b580      	push	{r7, lr}
 8101746:	b082      	sub	sp, #8
 8101748:	af00      	add	r7, sp, #0
 810174a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 810174c:	4b09      	ldr	r3, [pc, #36]	@ (8101774 <__io_putchar+0x30>)
 810174e:	781b      	ldrb	r3, [r3, #0]
 8101750:	461a      	mov	r2, r3
 8101752:	2394      	movs	r3, #148	@ 0x94
 8101754:	fb02 f303 	mul.w	r3, r2, r3
 8101758:	4a07      	ldr	r2, [pc, #28]	@ (8101778 <__io_putchar+0x34>)
 810175a:	1898      	adds	r0, r3, r2
 810175c:	1d39      	adds	r1, r7, #4
 810175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101762:	2201      	movs	r2, #1
 8101764:	f006 f9e0 	bl	8107b28 <HAL_UART_Transmit>
  return ch;
 8101768:	687b      	ldr	r3, [r7, #4]
}
 810176a:	4618      	mov	r0, r3
 810176c:	3708      	adds	r7, #8
 810176e:	46bd      	mov	sp, r7
 8101770:	bd80      	pop	{r7, pc}
 8101772:	bf00      	nop
 8101774:	20000244 	.word	0x20000244
 8101778:	200001b0 	.word	0x200001b0

0810177c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 810177c:	b580      	push	{r7, lr}
 810177e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8101780:	2000      	movs	r0, #0
 8101782:	f7ff fb9f 	bl	8100ec4 <BSP_PB_Callback>
}
 8101786:	bf00      	nop
 8101788:	bd80      	pop	{r7, pc}
	...

0810178c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 810178c:	b580      	push	{r7, lr}
 810178e:	b08a      	sub	sp, #40	@ 0x28
 8101790:	af00      	add	r7, sp, #0
 8101792:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8101794:	4b27      	ldr	r3, [pc, #156]	@ (8101834 <COM1_MspInit+0xa8>)
 8101796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810179a:	4a26      	ldr	r2, [pc, #152]	@ (8101834 <COM1_MspInit+0xa8>)
 810179c:	f043 0301 	orr.w	r3, r3, #1
 81017a0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 81017a4:	4b23      	ldr	r3, [pc, #140]	@ (8101834 <COM1_MspInit+0xa8>)
 81017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81017aa:	f003 0301 	and.w	r3, r3, #1
 81017ae:	613b      	str	r3, [r7, #16]
 81017b0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 81017b2:	4b20      	ldr	r3, [pc, #128]	@ (8101834 <COM1_MspInit+0xa8>)
 81017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81017b8:	4a1e      	ldr	r2, [pc, #120]	@ (8101834 <COM1_MspInit+0xa8>)
 81017ba:	f043 0301 	orr.w	r3, r3, #1
 81017be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 81017c2:	4b1c      	ldr	r3, [pc, #112]	@ (8101834 <COM1_MspInit+0xa8>)
 81017c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81017c8:	f003 0301 	and.w	r3, r3, #1
 81017cc:	60fb      	str	r3, [r7, #12]
 81017ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 81017d0:	4b18      	ldr	r3, [pc, #96]	@ (8101834 <COM1_MspInit+0xa8>)
 81017d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81017d6:	4a17      	ldr	r2, [pc, #92]	@ (8101834 <COM1_MspInit+0xa8>)
 81017d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81017dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 81017e0:	4b14      	ldr	r3, [pc, #80]	@ (8101834 <COM1_MspInit+0xa8>)
 81017e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81017e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81017ea:	60bb      	str	r3, [r7, #8]
 81017ec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 81017ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 81017f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 81017f4:	2302      	movs	r3, #2
 81017f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 81017f8:	2302      	movs	r3, #2
 81017fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 81017fc:	2301      	movs	r3, #1
 81017fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8101800:	2307      	movs	r3, #7
 8101802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8101804:	f107 0314 	add.w	r3, r7, #20
 8101808:	4619      	mov	r1, r3
 810180a:	480b      	ldr	r0, [pc, #44]	@ (8101838 <COM1_MspInit+0xac>)
 810180c:	f001 fac0 	bl	8102d90 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8101810:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101814:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8101816:	2302      	movs	r3, #2
 8101818:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 810181a:	2307      	movs	r3, #7
 810181c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 810181e:	f107 0314 	add.w	r3, r7, #20
 8101822:	4619      	mov	r1, r3
 8101824:	4804      	ldr	r0, [pc, #16]	@ (8101838 <COM1_MspInit+0xac>)
 8101826:	f001 fab3 	bl	8102d90 <HAL_GPIO_Init>
}
 810182a:	bf00      	nop
 810182c:	3728      	adds	r7, #40	@ 0x28
 810182e:	46bd      	mov	sp, r7
 8101830:	bd80      	pop	{r7, pc}
 8101832:	bf00      	nop
 8101834:	46020c00 	.word	0x46020c00
 8101838:	42020000 	.word	0x42020000

0810183c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810183c:	b580      	push	{r7, lr}
 810183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8101840:	4b12      	ldr	r3, [pc, #72]	@ (810188c <HAL_Init+0x50>)
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	4a11      	ldr	r2, [pc, #68]	@ (810188c <HAL_Init+0x50>)
 8101846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810184a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810184c:	2003      	movs	r0, #3
 810184e:	f000 f8f2 	bl	8101a36 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8101852:	f002 fea1 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8101856:	4602      	mov	r2, r0
 8101858:	4b0d      	ldr	r3, [pc, #52]	@ (8101890 <HAL_Init+0x54>)
 810185a:	6a1b      	ldr	r3, [r3, #32]
 810185c:	f003 030f 	and.w	r3, r3, #15
 8101860:	490c      	ldr	r1, [pc, #48]	@ (8101894 <HAL_Init+0x58>)
 8101862:	5ccb      	ldrb	r3, [r1, r3]
 8101864:	fa22 f303 	lsr.w	r3, r2, r3
 8101868:	4a0b      	ldr	r2, [pc, #44]	@ (8101898 <HAL_Init+0x5c>)
 810186a:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 810186c:	2004      	movs	r0, #4
 810186e:	f000 f915 	bl	8101a9c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101872:	2007      	movs	r0, #7
 8101874:	f7ff fbce 	bl	8101014 <HAL_InitTick>
 8101878:	4603      	mov	r3, r0
 810187a:	2b00      	cmp	r3, #0
 810187c:	d001      	beq.n	8101882 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 810187e:	2301      	movs	r3, #1
 8101880:	e002      	b.n	8101888 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101882:	f7ff fb39 	bl	8100ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101886:	2300      	movs	r3, #0
}
 8101888:	4618      	mov	r0, r3
 810188a:	bd80      	pop	{r7, pc}
 810188c:	40022000 	.word	0x40022000
 8101890:	46020c00 	.word	0x46020c00
 8101894:	081092e8 	.word	0x081092e8
 8101898:	20000000 	.word	0x20000000

0810189c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810189c:	b480      	push	{r7}
 810189e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81018a0:	4b06      	ldr	r3, [pc, #24]	@ (81018bc <HAL_IncTick+0x20>)
 81018a2:	781b      	ldrb	r3, [r3, #0]
 81018a4:	461a      	mov	r2, r3
 81018a6:	4b06      	ldr	r3, [pc, #24]	@ (81018c0 <HAL_IncTick+0x24>)
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	4413      	add	r3, r2
 81018ac:	4a04      	ldr	r2, [pc, #16]	@ (81018c0 <HAL_IncTick+0x24>)
 81018ae:	6013      	str	r3, [r2, #0]
}
 81018b0:	bf00      	nop
 81018b2:	46bd      	mov	sp, r7
 81018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b8:	4770      	bx	lr
 81018ba:	bf00      	nop
 81018bc:	20000024 	.word	0x20000024
 81018c0:	20000248 	.word	0x20000248

081018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81018c4:	b480      	push	{r7}
 81018c6:	af00      	add	r7, sp, #0
  return uwTick;
 81018c8:	4b03      	ldr	r3, [pc, #12]	@ (81018d8 <HAL_GetTick+0x14>)
 81018ca:	681b      	ldr	r3, [r3, #0]
}
 81018cc:	4618      	mov	r0, r3
 81018ce:	46bd      	mov	sp, r7
 81018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d4:	4770      	bx	lr
 81018d6:	bf00      	nop
 81018d8:	20000248 	.word	0x20000248

081018dc <__NVIC_SetPriorityGrouping>:
{
 81018dc:	b480      	push	{r7}
 81018de:	b085      	sub	sp, #20
 81018e0:	af00      	add	r7, sp, #0
 81018e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	f003 0307 	and.w	r3, r3, #7
 81018ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81018ec:	4b0c      	ldr	r3, [pc, #48]	@ (8101920 <__NVIC_SetPriorityGrouping+0x44>)
 81018ee:	68db      	ldr	r3, [r3, #12]
 81018f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81018f2:	68ba      	ldr	r2, [r7, #8]
 81018f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81018f8:	4013      	ands	r3, r2
 81018fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81018fc:	68fb      	ldr	r3, [r7, #12]
 81018fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101900:	68bb      	ldr	r3, [r7, #8]
 8101902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810190c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810190e:	4a04      	ldr	r2, [pc, #16]	@ (8101920 <__NVIC_SetPriorityGrouping+0x44>)
 8101910:	68bb      	ldr	r3, [r7, #8]
 8101912:	60d3      	str	r3, [r2, #12]
}
 8101914:	bf00      	nop
 8101916:	3714      	adds	r7, #20
 8101918:	46bd      	mov	sp, r7
 810191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810191e:	4770      	bx	lr
 8101920:	e000ed00 	.word	0xe000ed00

08101924 <__NVIC_GetPriorityGrouping>:
{
 8101924:	b480      	push	{r7}
 8101926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101928:	4b04      	ldr	r3, [pc, #16]	@ (810193c <__NVIC_GetPriorityGrouping+0x18>)
 810192a:	68db      	ldr	r3, [r3, #12]
 810192c:	0a1b      	lsrs	r3, r3, #8
 810192e:	f003 0307 	and.w	r3, r3, #7
}
 8101932:	4618      	mov	r0, r3
 8101934:	46bd      	mov	sp, r7
 8101936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810193a:	4770      	bx	lr
 810193c:	e000ed00 	.word	0xe000ed00

08101940 <__NVIC_EnableIRQ>:
{
 8101940:	b480      	push	{r7}
 8101942:	b083      	sub	sp, #12
 8101944:	af00      	add	r7, sp, #0
 8101946:	4603      	mov	r3, r0
 8101948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 810194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810194e:	2b00      	cmp	r3, #0
 8101950:	db0b      	blt.n	810196a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101952:	79fb      	ldrb	r3, [r7, #7]
 8101954:	f003 021f 	and.w	r2, r3, #31
 8101958:	4907      	ldr	r1, [pc, #28]	@ (8101978 <__NVIC_EnableIRQ+0x38>)
 810195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810195e:	095b      	lsrs	r3, r3, #5
 8101960:	2001      	movs	r0, #1
 8101962:	fa00 f202 	lsl.w	r2, r0, r2
 8101966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810196a:	bf00      	nop
 810196c:	370c      	adds	r7, #12
 810196e:	46bd      	mov	sp, r7
 8101970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101974:	4770      	bx	lr
 8101976:	bf00      	nop
 8101978:	e000e100 	.word	0xe000e100

0810197c <__NVIC_SetPriority>:
{
 810197c:	b480      	push	{r7}
 810197e:	b083      	sub	sp, #12
 8101980:	af00      	add	r7, sp, #0
 8101982:	4603      	mov	r3, r0
 8101984:	6039      	str	r1, [r7, #0]
 8101986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8101988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810198c:	2b00      	cmp	r3, #0
 810198e:	db0a      	blt.n	81019a6 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101990:	683b      	ldr	r3, [r7, #0]
 8101992:	b2da      	uxtb	r2, r3
 8101994:	490c      	ldr	r1, [pc, #48]	@ (81019c8 <__NVIC_SetPriority+0x4c>)
 8101996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 810199a:	0112      	lsls	r2, r2, #4
 810199c:	b2d2      	uxtb	r2, r2
 810199e:	440b      	add	r3, r1
 81019a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 81019a4:	e00a      	b.n	81019bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81019a6:	683b      	ldr	r3, [r7, #0]
 81019a8:	b2da      	uxtb	r2, r3
 81019aa:	4908      	ldr	r1, [pc, #32]	@ (81019cc <__NVIC_SetPriority+0x50>)
 81019ac:	79fb      	ldrb	r3, [r7, #7]
 81019ae:	f003 030f 	and.w	r3, r3, #15
 81019b2:	3b04      	subs	r3, #4
 81019b4:	0112      	lsls	r2, r2, #4
 81019b6:	b2d2      	uxtb	r2, r2
 81019b8:	440b      	add	r3, r1
 81019ba:	761a      	strb	r2, [r3, #24]
}
 81019bc:	bf00      	nop
 81019be:	370c      	adds	r7, #12
 81019c0:	46bd      	mov	sp, r7
 81019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c6:	4770      	bx	lr
 81019c8:	e000e100 	.word	0xe000e100
 81019cc:	e000ed00 	.word	0xe000ed00

081019d0 <NVIC_EncodePriority>:
{
 81019d0:	b480      	push	{r7}
 81019d2:	b089      	sub	sp, #36	@ 0x24
 81019d4:	af00      	add	r7, sp, #0
 81019d6:	60f8      	str	r0, [r7, #12]
 81019d8:	60b9      	str	r1, [r7, #8]
 81019da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81019dc:	68fb      	ldr	r3, [r7, #12]
 81019de:	f003 0307 	and.w	r3, r3, #7
 81019e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81019e4:	69fb      	ldr	r3, [r7, #28]
 81019e6:	f1c3 0307 	rsb	r3, r3, #7
 81019ea:	2b04      	cmp	r3, #4
 81019ec:	bf28      	it	cs
 81019ee:	2304      	movcs	r3, #4
 81019f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81019f2:	69fb      	ldr	r3, [r7, #28]
 81019f4:	3304      	adds	r3, #4
 81019f6:	2b06      	cmp	r3, #6
 81019f8:	d902      	bls.n	8101a00 <NVIC_EncodePriority+0x30>
 81019fa:	69fb      	ldr	r3, [r7, #28]
 81019fc:	3b03      	subs	r3, #3
 81019fe:	e000      	b.n	8101a02 <NVIC_EncodePriority+0x32>
 8101a00:	2300      	movs	r3, #0
 8101a02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a04:	f04f 32ff 	mov.w	r2, #4294967295
 8101a08:	69bb      	ldr	r3, [r7, #24]
 8101a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a0e:	43da      	mvns	r2, r3
 8101a10:	68bb      	ldr	r3, [r7, #8]
 8101a12:	401a      	ands	r2, r3
 8101a14:	697b      	ldr	r3, [r7, #20]
 8101a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101a18:	f04f 31ff 	mov.w	r1, #4294967295
 8101a1c:	697b      	ldr	r3, [r7, #20]
 8101a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8101a22:	43d9      	mvns	r1, r3
 8101a24:	687b      	ldr	r3, [r7, #4]
 8101a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101a28:	4313      	orrs	r3, r2
}
 8101a2a:	4618      	mov	r0, r3
 8101a2c:	3724      	adds	r7, #36	@ 0x24
 8101a2e:	46bd      	mov	sp, r7
 8101a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a34:	4770      	bx	lr

08101a36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101a36:	b580      	push	{r7, lr}
 8101a38:	b082      	sub	sp, #8
 8101a3a:	af00      	add	r7, sp, #0
 8101a3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101a3e:	6878      	ldr	r0, [r7, #4]
 8101a40:	f7ff ff4c 	bl	81018dc <__NVIC_SetPriorityGrouping>
}
 8101a44:	bf00      	nop
 8101a46:	3708      	adds	r7, #8
 8101a48:	46bd      	mov	sp, r7
 8101a4a:	bd80      	pop	{r7, pc}

08101a4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101a4c:	b580      	push	{r7, lr}
 8101a4e:	b086      	sub	sp, #24
 8101a50:	af00      	add	r7, sp, #0
 8101a52:	4603      	mov	r3, r0
 8101a54:	60b9      	str	r1, [r7, #8]
 8101a56:	607a      	str	r2, [r7, #4]
 8101a58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101a5a:	f7ff ff63 	bl	8101924 <__NVIC_GetPriorityGrouping>
 8101a5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101a60:	687a      	ldr	r2, [r7, #4]
 8101a62:	68b9      	ldr	r1, [r7, #8]
 8101a64:	6978      	ldr	r0, [r7, #20]
 8101a66:	f7ff ffb3 	bl	81019d0 <NVIC_EncodePriority>
 8101a6a:	4602      	mov	r2, r0
 8101a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8101a70:	4611      	mov	r1, r2
 8101a72:	4618      	mov	r0, r3
 8101a74:	f7ff ff82 	bl	810197c <__NVIC_SetPriority>
}
 8101a78:	bf00      	nop
 8101a7a:	3718      	adds	r7, #24
 8101a7c:	46bd      	mov	sp, r7
 8101a7e:	bd80      	pop	{r7, pc}

08101a80 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101a80:	b580      	push	{r7, lr}
 8101a82:	b082      	sub	sp, #8
 8101a84:	af00      	add	r7, sp, #0
 8101a86:	4603      	mov	r3, r0
 8101a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8101a8e:	4618      	mov	r0, r3
 8101a90:	f7ff ff56 	bl	8101940 <__NVIC_EnableIRQ>
}
 8101a94:	bf00      	nop
 8101a96:	3708      	adds	r7, #8
 8101a98:	46bd      	mov	sp, r7
 8101a9a:	bd80      	pop	{r7, pc}

08101a9c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8101a9c:	b480      	push	{r7}
 8101a9e:	b083      	sub	sp, #12
 8101aa0:	af00      	add	r7, sp, #0
 8101aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	2b04      	cmp	r3, #4
 8101aa8:	d844      	bhi.n	8101b34 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8101aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8101ab0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8101aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ab0:	08101ad3 	.word	0x08101ad3
 8101ab4:	08101af1 	.word	0x08101af1
 8101ab8:	08101b13 	.word	0x08101b13
 8101abc:	08101b35 	.word	0x08101b35
 8101ac0:	08101ac5 	.word	0x08101ac5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8101ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101ac6:	681b      	ldr	r3, [r3, #0]
 8101ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101aca:	f043 0304 	orr.w	r3, r3, #4
 8101ace:	6013      	str	r3, [r2, #0]
      break;
 8101ad0:	e031      	b.n	8101b36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8101ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101ad4:	681b      	ldr	r3, [r3, #0]
 8101ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101ad8:	f023 0304 	bic.w	r3, r3, #4
 8101adc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8101ade:	4b1a      	ldr	r3, [pc, #104]	@ (8101b48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ae4:	4a18      	ldr	r2, [pc, #96]	@ (8101b48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101ae6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8101aea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8101aee:	e022      	b.n	8101b36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8101af0:	4b14      	ldr	r3, [pc, #80]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	4a13      	ldr	r2, [pc, #76]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101af6:	f023 0304 	bic.w	r3, r3, #4
 8101afa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8101afc:	4b12      	ldr	r3, [pc, #72]	@ (8101b48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8101b06:	4a10      	ldr	r2, [pc, #64]	@ (8101b48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101b08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8101b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8101b10:	e011      	b.n	8101b36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8101b12:	4b0c      	ldr	r3, [pc, #48]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101b14:	681b      	ldr	r3, [r3, #0]
 8101b16:	4a0b      	ldr	r2, [pc, #44]	@ (8101b44 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8101b18:	f023 0304 	bic.w	r3, r3, #4
 8101b1c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8101b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8101b48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b24:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8101b28:	4a07      	ldr	r2, [pc, #28]	@ (8101b48 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8101b2a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8101b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8101b32:	e000      	b.n	8101b36 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8101b34:	bf00      	nop
  }
}
 8101b36:	bf00      	nop
 8101b38:	370c      	adds	r7, #12
 8101b3a:	46bd      	mov	sp, r7
 8101b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b40:	4770      	bx	lr
 8101b42:	bf00      	nop
 8101b44:	e000e010 	.word	0xe000e010
 8101b48:	46020c00 	.word	0x46020c00

08101b4c <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8101b4c:	b480      	push	{r7}
 8101b4e:	b087      	sub	sp, #28
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	60f8      	str	r0, [r7, #12]
 8101b54:	460b      	mov	r3, r1
 8101b56:	607a      	str	r2, [r7, #4]
 8101b58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8101b5a:	2300      	movs	r3, #0
 8101b5c:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8101b5e:	7afb      	ldrb	r3, [r7, #11]
 8101b60:	2b02      	cmp	r3, #2
 8101b62:	d011      	beq.n	8101b88 <HAL_EXTI_RegisterCallback+0x3c>
 8101b64:	2b02      	cmp	r3, #2
 8101b66:	dc13      	bgt.n	8101b90 <HAL_EXTI_RegisterCallback+0x44>
 8101b68:	2b00      	cmp	r3, #0
 8101b6a:	d002      	beq.n	8101b72 <HAL_EXTI_RegisterCallback+0x26>
 8101b6c:	2b01      	cmp	r3, #1
 8101b6e:	d007      	beq.n	8101b80 <HAL_EXTI_RegisterCallback+0x34>
 8101b70:	e00e      	b.n	8101b90 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8101b72:	68fb      	ldr	r3, [r7, #12]
 8101b74:	687a      	ldr	r2, [r7, #4]
 8101b76:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8101b78:	68fb      	ldr	r3, [r7, #12]
 8101b7a:	687a      	ldr	r2, [r7, #4]
 8101b7c:	609a      	str	r2, [r3, #8]
      break;
 8101b7e:	e00a      	b.n	8101b96 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8101b80:	68fb      	ldr	r3, [r7, #12]
 8101b82:	687a      	ldr	r2, [r7, #4]
 8101b84:	605a      	str	r2, [r3, #4]
      break;
 8101b86:	e006      	b.n	8101b96 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8101b88:	68fb      	ldr	r3, [r7, #12]
 8101b8a:	687a      	ldr	r2, [r7, #4]
 8101b8c:	609a      	str	r2, [r3, #8]
      break;
 8101b8e:	e002      	b.n	8101b96 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8101b90:	2301      	movs	r3, #1
 8101b92:	75fb      	strb	r3, [r7, #23]
      break;
 8101b94:	bf00      	nop
  }

  return status;
 8101b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8101b98:	4618      	mov	r0, r3
 8101b9a:	371c      	adds	r7, #28
 8101b9c:	46bd      	mov	sp, r7
 8101b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ba2:	4770      	bx	lr

08101ba4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8101ba4:	b480      	push	{r7}
 8101ba6:	b083      	sub	sp, #12
 8101ba8:	af00      	add	r7, sp, #0
 8101baa:	6078      	str	r0, [r7, #4]
 8101bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8101bae:	687b      	ldr	r3, [r7, #4]
 8101bb0:	2b00      	cmp	r3, #0
 8101bb2:	d101      	bne.n	8101bb8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8101bb4:	2301      	movs	r3, #1
 8101bb6:	e003      	b.n	8101bc0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	683a      	ldr	r2, [r7, #0]
 8101bbc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8101bbe:	2300      	movs	r3, #0
  }
}
 8101bc0:	4618      	mov	r0, r3
 8101bc2:	370c      	adds	r7, #12
 8101bc4:	46bd      	mov	sp, r7
 8101bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bca:	4770      	bx	lr

08101bcc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8101bcc:	b580      	push	{r7, lr}
 8101bce:	b086      	sub	sp, #24
 8101bd0:	af00      	add	r7, sp, #0
 8101bd2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8101bd4:	687b      	ldr	r3, [r7, #4]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	0c1b      	lsrs	r3, r3, #16
 8101bda:	f003 0301 	and.w	r3, r3, #1
 8101bde:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8101be0:	687b      	ldr	r3, [r7, #4]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	f003 031f 	and.w	r3, r3, #31
 8101be8:	2201      	movs	r2, #1
 8101bea:	fa02 f303 	lsl.w	r3, r2, r3
 8101bee:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8101bf0:	697b      	ldr	r3, [r7, #20]
 8101bf2:	015a      	lsls	r2, r3, #5
 8101bf4:	4b17      	ldr	r3, [pc, #92]	@ (8101c54 <HAL_EXTI_IRQHandler+0x88>)
 8101bf6:	4413      	add	r3, r2
 8101bf8:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8101bfa:	68fb      	ldr	r3, [r7, #12]
 8101bfc:	681b      	ldr	r3, [r3, #0]
 8101bfe:	693a      	ldr	r2, [r7, #16]
 8101c00:	4013      	ands	r3, r2
 8101c02:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8101c04:	68bb      	ldr	r3, [r7, #8]
 8101c06:	2b00      	cmp	r3, #0
 8101c08:	d009      	beq.n	8101c1e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8101c0a:	68fb      	ldr	r3, [r7, #12]
 8101c0c:	693a      	ldr	r2, [r7, #16]
 8101c0e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8101c10:	687b      	ldr	r3, [r7, #4]
 8101c12:	685b      	ldr	r3, [r3, #4]
 8101c14:	2b00      	cmp	r3, #0
 8101c16:	d002      	beq.n	8101c1e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	685b      	ldr	r3, [r3, #4]
 8101c1c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8101c1e:	697b      	ldr	r3, [r7, #20]
 8101c20:	015a      	lsls	r2, r3, #5
 8101c22:	4b0d      	ldr	r3, [pc, #52]	@ (8101c58 <HAL_EXTI_IRQHandler+0x8c>)
 8101c24:	4413      	add	r3, r2
 8101c26:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8101c28:	68fb      	ldr	r3, [r7, #12]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	693a      	ldr	r2, [r7, #16]
 8101c2e:	4013      	ands	r3, r2
 8101c30:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8101c32:	68bb      	ldr	r3, [r7, #8]
 8101c34:	2b00      	cmp	r3, #0
 8101c36:	d009      	beq.n	8101c4c <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8101c38:	68fb      	ldr	r3, [r7, #12]
 8101c3a:	693a      	ldr	r2, [r7, #16]
 8101c3c:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8101c3e:	687b      	ldr	r3, [r7, #4]
 8101c40:	689b      	ldr	r3, [r3, #8]
 8101c42:	2b00      	cmp	r3, #0
 8101c44:	d002      	beq.n	8101c4c <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	689b      	ldr	r3, [r3, #8]
 8101c4a:	4798      	blx	r3
    }
  }
}
 8101c4c:	bf00      	nop
 8101c4e:	3718      	adds	r7, #24
 8101c50:	46bd      	mov	sp, r7
 8101c52:	bd80      	pop	{r7, pc}
 8101c54:	4602200c 	.word	0x4602200c
 8101c58:	46022010 	.word	0x46022010

08101c5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8101c5c:	b580      	push	{r7, lr}
 8101c5e:	b084      	sub	sp, #16
 8101c60:	af00      	add	r7, sp, #0
 8101c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	2b00      	cmp	r3, #0
 8101c68:	d101      	bne.n	8101c6e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8101c6a:	2301      	movs	r3, #1
 8101c6c:	e142      	b.n	8101ef4 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8101c74:	b2db      	uxtb	r3, r3
 8101c76:	2b00      	cmp	r3, #0
 8101c78:	d106      	bne.n	8101c88 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8101c7a:	687b      	ldr	r3, [r7, #4]
 8101c7c:	2200      	movs	r2, #0
 8101c7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8101c82:	6878      	ldr	r0, [r7, #4]
 8101c84:	f7ff f954 	bl	8100f30 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8101c88:	687b      	ldr	r3, [r7, #4]
 8101c8a:	681b      	ldr	r3, [r3, #0]
 8101c8c:	699a      	ldr	r2, [r3, #24]
 8101c8e:	687b      	ldr	r3, [r7, #4]
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	f022 0210 	bic.w	r2, r2, #16
 8101c96:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101c98:	f7ff fe14 	bl	81018c4 <HAL_GetTick>
 8101c9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101c9e:	e012      	b.n	8101cc6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101ca0:	f7ff fe10 	bl	81018c4 <HAL_GetTick>
 8101ca4:	4602      	mov	r2, r0
 8101ca6:	68fb      	ldr	r3, [r7, #12]
 8101ca8:	1ad3      	subs	r3, r2, r3
 8101caa:	2b0a      	cmp	r3, #10
 8101cac:	d90b      	bls.n	8101cc6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101cae:	687b      	ldr	r3, [r7, #4]
 8101cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101cb2:	f043 0201 	orr.w	r2, r3, #1
 8101cb6:	687b      	ldr	r3, [r7, #4]
 8101cb8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	2203      	movs	r2, #3
 8101cbe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8101cc2:	2301      	movs	r3, #1
 8101cc4:	e116      	b.n	8101ef4 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8101cc6:	687b      	ldr	r3, [r7, #4]
 8101cc8:	681b      	ldr	r3, [r3, #0]
 8101cca:	699b      	ldr	r3, [r3, #24]
 8101ccc:	f003 0308 	and.w	r3, r3, #8
 8101cd0:	2b08      	cmp	r3, #8
 8101cd2:	d0e5      	beq.n	8101ca0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8101cd4:	687b      	ldr	r3, [r7, #4]
 8101cd6:	681b      	ldr	r3, [r3, #0]
 8101cd8:	699a      	ldr	r2, [r3, #24]
 8101cda:	687b      	ldr	r3, [r7, #4]
 8101cdc:	681b      	ldr	r3, [r3, #0]
 8101cde:	f042 0201 	orr.w	r2, r2, #1
 8101ce2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8101ce4:	f7ff fdee 	bl	81018c4 <HAL_GetTick>
 8101ce8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101cea:	e012      	b.n	8101d12 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8101cec:	f7ff fdea 	bl	81018c4 <HAL_GetTick>
 8101cf0:	4602      	mov	r2, r0
 8101cf2:	68fb      	ldr	r3, [r7, #12]
 8101cf4:	1ad3      	subs	r3, r2, r3
 8101cf6:	2b0a      	cmp	r3, #10
 8101cf8:	d90b      	bls.n	8101d12 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101cfe:	f043 0201 	orr.w	r2, r3, #1
 8101d02:	687b      	ldr	r3, [r7, #4]
 8101d04:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8101d06:	687b      	ldr	r3, [r7, #4]
 8101d08:	2203      	movs	r2, #3
 8101d0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8101d0e:	2301      	movs	r3, #1
 8101d10:	e0f0      	b.n	8101ef4 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	699b      	ldr	r3, [r3, #24]
 8101d18:	f003 0301 	and.w	r3, r3, #1
 8101d1c:	2b00      	cmp	r3, #0
 8101d1e:	d0e5      	beq.n	8101cec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	681b      	ldr	r3, [r3, #0]
 8101d24:	699a      	ldr	r2, [r3, #24]
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	681b      	ldr	r3, [r3, #0]
 8101d2a:	f042 0202 	orr.w	r2, r2, #2
 8101d2e:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8101d30:	4a72      	ldr	r2, [pc, #456]	@ (8101efc <HAL_FDCAN_Init+0x2a0>)
 8101d32:	687b      	ldr	r3, [r7, #4]
 8101d34:	685b      	ldr	r3, [r3, #4]
 8101d36:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8101d38:	687b      	ldr	r3, [r7, #4]
 8101d3a:	7c1b      	ldrb	r3, [r3, #16]
 8101d3c:	2b01      	cmp	r3, #1
 8101d3e:	d108      	bne.n	8101d52 <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	681b      	ldr	r3, [r3, #0]
 8101d44:	699a      	ldr	r2, [r3, #24]
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8101d4e:	619a      	str	r2, [r3, #24]
 8101d50:	e007      	b.n	8101d62 <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	681b      	ldr	r3, [r3, #0]
 8101d56:	699a      	ldr	r2, [r3, #24]
 8101d58:	687b      	ldr	r3, [r7, #4]
 8101d5a:	681b      	ldr	r3, [r3, #0]
 8101d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8101d60:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8101d62:	687b      	ldr	r3, [r7, #4]
 8101d64:	7c5b      	ldrb	r3, [r3, #17]
 8101d66:	2b01      	cmp	r3, #1
 8101d68:	d108      	bne.n	8101d7c <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8101d6a:	687b      	ldr	r3, [r7, #4]
 8101d6c:	681b      	ldr	r3, [r3, #0]
 8101d6e:	699a      	ldr	r2, [r3, #24]
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	681b      	ldr	r3, [r3, #0]
 8101d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8101d78:	619a      	str	r2, [r3, #24]
 8101d7a:	e007      	b.n	8101d8c <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8101d7c:	687b      	ldr	r3, [r7, #4]
 8101d7e:	681b      	ldr	r3, [r3, #0]
 8101d80:	699a      	ldr	r2, [r3, #24]
 8101d82:	687b      	ldr	r3, [r7, #4]
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8101d8a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8101d8c:	687b      	ldr	r3, [r7, #4]
 8101d8e:	7c9b      	ldrb	r3, [r3, #18]
 8101d90:	2b01      	cmp	r3, #1
 8101d92:	d108      	bne.n	8101da6 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	699a      	ldr	r2, [r3, #24]
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8101da2:	619a      	str	r2, [r3, #24]
 8101da4:	e007      	b.n	8101db6 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	681b      	ldr	r3, [r3, #0]
 8101daa:	699a      	ldr	r2, [r3, #24]
 8101dac:	687b      	ldr	r3, [r7, #4]
 8101dae:	681b      	ldr	r3, [r3, #0]
 8101db0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8101db4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8101db6:	687b      	ldr	r3, [r7, #4]
 8101db8:	681b      	ldr	r3, [r3, #0]
 8101dba:	699b      	ldr	r3, [r3, #24]
 8101dbc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8101dc0:	687b      	ldr	r3, [r7, #4]
 8101dc2:	689a      	ldr	r2, [r3, #8]
 8101dc4:	687b      	ldr	r3, [r7, #4]
 8101dc6:	681b      	ldr	r3, [r3, #0]
 8101dc8:	430a      	orrs	r2, r1
 8101dca:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8101dcc:	687b      	ldr	r3, [r7, #4]
 8101dce:	681b      	ldr	r3, [r3, #0]
 8101dd0:	699a      	ldr	r2, [r3, #24]
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8101dda:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	681b      	ldr	r3, [r3, #0]
 8101de0:	691a      	ldr	r2, [r3, #16]
 8101de2:	687b      	ldr	r3, [r7, #4]
 8101de4:	681b      	ldr	r3, [r3, #0]
 8101de6:	f022 0210 	bic.w	r2, r2, #16
 8101dea:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	68db      	ldr	r3, [r3, #12]
 8101df0:	2b01      	cmp	r3, #1
 8101df2:	d108      	bne.n	8101e06 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	699a      	ldr	r2, [r3, #24]
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	681b      	ldr	r3, [r3, #0]
 8101dfe:	f042 0204 	orr.w	r2, r2, #4
 8101e02:	619a      	str	r2, [r3, #24]
 8101e04:	e02c      	b.n	8101e60 <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	68db      	ldr	r3, [r3, #12]
 8101e0a:	2b00      	cmp	r3, #0
 8101e0c:	d028      	beq.n	8101e60 <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8101e0e:	687b      	ldr	r3, [r7, #4]
 8101e10:	68db      	ldr	r3, [r3, #12]
 8101e12:	2b02      	cmp	r3, #2
 8101e14:	d01c      	beq.n	8101e50 <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8101e16:	687b      	ldr	r3, [r7, #4]
 8101e18:	681b      	ldr	r3, [r3, #0]
 8101e1a:	699a      	ldr	r2, [r3, #24]
 8101e1c:	687b      	ldr	r3, [r7, #4]
 8101e1e:	681b      	ldr	r3, [r3, #0]
 8101e20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8101e24:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	681b      	ldr	r3, [r3, #0]
 8101e2a:	691a      	ldr	r2, [r3, #16]
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	f042 0210 	orr.w	r2, r2, #16
 8101e34:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	68db      	ldr	r3, [r3, #12]
 8101e3a:	2b03      	cmp	r3, #3
 8101e3c:	d110      	bne.n	8101e60 <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	699a      	ldr	r2, [r3, #24]
 8101e44:	687b      	ldr	r3, [r7, #4]
 8101e46:	681b      	ldr	r3, [r3, #0]
 8101e48:	f042 0220 	orr.w	r2, r2, #32
 8101e4c:	619a      	str	r2, [r3, #24]
 8101e4e:	e007      	b.n	8101e60 <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8101e50:	687b      	ldr	r3, [r7, #4]
 8101e52:	681b      	ldr	r3, [r3, #0]
 8101e54:	699a      	ldr	r2, [r3, #24]
 8101e56:	687b      	ldr	r3, [r7, #4]
 8101e58:	681b      	ldr	r3, [r3, #0]
 8101e5a:	f042 0220 	orr.w	r2, r2, #32
 8101e5e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101e60:	687b      	ldr	r3, [r7, #4]
 8101e62:	699b      	ldr	r3, [r3, #24]
 8101e64:	3b01      	subs	r3, #1
 8101e66:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101e68:	687b      	ldr	r3, [r7, #4]
 8101e6a:	69db      	ldr	r3, [r3, #28]
 8101e6c:	3b01      	subs	r3, #1
 8101e6e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101e70:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101e72:	687b      	ldr	r3, [r7, #4]
 8101e74:	6a1b      	ldr	r3, [r3, #32]
 8101e76:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8101e78:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8101e7c:	687b      	ldr	r3, [r7, #4]
 8101e7e:	695b      	ldr	r3, [r3, #20]
 8101e80:	3b01      	subs	r3, #1
 8101e82:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101e84:	687b      	ldr	r3, [r7, #4]
 8101e86:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8101e88:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8101e8a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	689b      	ldr	r3, [r3, #8]
 8101e90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8101e94:	d115      	bne.n	8101ec2 <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101e9a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8101e9c:	687b      	ldr	r3, [r7, #4]
 8101e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101ea0:	3b01      	subs	r3, #1
 8101ea2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8101ea4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101eaa:	3b01      	subs	r3, #1
 8101eac:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8101eae:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8101eb6:	3b01      	subs	r3, #1
 8101eb8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8101eba:	687b      	ldr	r3, [r7, #4]
 8101ebc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8101ebe:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8101ec0:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	681b      	ldr	r3, [r3, #0]
 8101ec6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	681b      	ldr	r3, [r3, #0]
 8101ed2:	430a      	orrs	r2, r1
 8101ed4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8101ed8:	6878      	ldr	r0, [r7, #4]
 8101eda:	f000 fc7b 	bl	81027d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8101ede:	687b      	ldr	r3, [r7, #4]
 8101ee0:	2200      	movs	r2, #0
 8101ee2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8101ee4:	687b      	ldr	r3, [r7, #4]
 8101ee6:	2200      	movs	r2, #0
 8101ee8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8101eea:	687b      	ldr	r3, [r7, #4]
 8101eec:	2201      	movs	r2, #1
 8101eee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8101ef2:	2300      	movs	r3, #0
}
 8101ef4:	4618      	mov	r0, r3
 8101ef6:	3710      	adds	r7, #16
 8101ef8:	46bd      	mov	sp, r7
 8101efa:	bd80      	pop	{r7, pc}
 8101efc:	4000a500 	.word	0x4000a500

08101f00 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8101f00:	b480      	push	{r7}
 8101f02:	b087      	sub	sp, #28
 8101f04:	af00      	add	r7, sp, #0
 8101f06:	6078      	str	r0, [r7, #4]
 8101f08:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8101f0a:	687b      	ldr	r3, [r7, #4]
 8101f0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8101f10:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8101f12:	7dfb      	ldrb	r3, [r7, #23]
 8101f14:	2b01      	cmp	r3, #1
 8101f16:	d002      	beq.n	8101f1e <HAL_FDCAN_ConfigFilter+0x1e>
 8101f18:	7dfb      	ldrb	r3, [r7, #23]
 8101f1a:	2b02      	cmp	r3, #2
 8101f1c:	d13d      	bne.n	8101f9a <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8101f1e:	683b      	ldr	r3, [r7, #0]
 8101f20:	681b      	ldr	r3, [r3, #0]
 8101f22:	2b00      	cmp	r3, #0
 8101f24:	d119      	bne.n	8101f5a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101f26:	683b      	ldr	r3, [r7, #0]
 8101f28:	689b      	ldr	r3, [r3, #8]
 8101f2a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8101f2c:	683b      	ldr	r3, [r7, #0]
 8101f2e:	68db      	ldr	r3, [r3, #12]
 8101f30:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101f32:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8101f34:	683b      	ldr	r3, [r7, #0]
 8101f36:	691b      	ldr	r3, [r3, #16]
 8101f38:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8101f3a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8101f3c:	683b      	ldr	r3, [r7, #0]
 8101f3e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8101f40:	4313      	orrs	r3, r2
 8101f42:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8101f48:	683b      	ldr	r3, [r7, #0]
 8101f4a:	685b      	ldr	r3, [r3, #4]
 8101f4c:	009b      	lsls	r3, r3, #2
 8101f4e:	4413      	add	r3, r2
 8101f50:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8101f52:	68bb      	ldr	r3, [r7, #8]
 8101f54:	693a      	ldr	r2, [r7, #16]
 8101f56:	601a      	str	r2, [r3, #0]
 8101f58:	e01d      	b.n	8101f96 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8101f5a:	683b      	ldr	r3, [r7, #0]
 8101f5c:	68db      	ldr	r3, [r3, #12]
 8101f5e:	075a      	lsls	r2, r3, #29
 8101f60:	683b      	ldr	r3, [r7, #0]
 8101f62:	691b      	ldr	r3, [r3, #16]
 8101f64:	4313      	orrs	r3, r2
 8101f66:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8101f68:	683b      	ldr	r3, [r7, #0]
 8101f6a:	689b      	ldr	r3, [r3, #8]
 8101f6c:	079a      	lsls	r2, r3, #30
 8101f6e:	683b      	ldr	r3, [r7, #0]
 8101f70:	695b      	ldr	r3, [r3, #20]
 8101f72:	4313      	orrs	r3, r2
 8101f74:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8101f76:	687b      	ldr	r3, [r7, #4]
 8101f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8101f7a:	683b      	ldr	r3, [r7, #0]
 8101f7c:	685b      	ldr	r3, [r3, #4]
 8101f7e:	00db      	lsls	r3, r3, #3
 8101f80:	4413      	add	r3, r2
 8101f82:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8101f84:	68bb      	ldr	r3, [r7, #8]
 8101f86:	693a      	ldr	r2, [r7, #16]
 8101f88:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8101f8a:	68bb      	ldr	r3, [r7, #8]
 8101f8c:	3304      	adds	r3, #4
 8101f8e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8101f90:	68bb      	ldr	r3, [r7, #8]
 8101f92:	68fa      	ldr	r2, [r7, #12]
 8101f94:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8101f96:	2300      	movs	r3, #0
 8101f98:	e006      	b.n	8101fa8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8101f9a:	687b      	ldr	r3, [r7, #4]
 8101f9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101f9e:	f043 0202 	orr.w	r2, r3, #2
 8101fa2:	687b      	ldr	r3, [r7, #4]
 8101fa4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8101fa6:	2301      	movs	r3, #1
  }
}
 8101fa8:	4618      	mov	r0, r3
 8101faa:	371c      	adds	r7, #28
 8101fac:	46bd      	mov	sp, r7
 8101fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fb2:	4770      	bx	lr

08101fb4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8101fb4:	b480      	push	{r7}
 8101fb6:	b085      	sub	sp, #20
 8101fb8:	af00      	add	r7, sp, #0
 8101fba:	60f8      	str	r0, [r7, #12]
 8101fbc:	60b9      	str	r1, [r7, #8]
 8101fbe:	607a      	str	r2, [r7, #4]
 8101fc0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8101fc2:	68fb      	ldr	r3, [r7, #12]
 8101fc4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8101fc8:	b2db      	uxtb	r3, r3
 8101fca:	2b01      	cmp	r3, #1
 8101fcc:	d116      	bne.n	8101ffc <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8101fce:	68fb      	ldr	r3, [r7, #12]
 8101fd0:	681b      	ldr	r3, [r3, #0]
 8101fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8101fd6:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8101fda:	68bb      	ldr	r3, [r7, #8]
 8101fdc:	011a      	lsls	r2, r3, #4
 8101fde:	687b      	ldr	r3, [r7, #4]
 8101fe0:	009b      	lsls	r3, r3, #2
 8101fe2:	431a      	orrs	r2, r3
 8101fe4:	683b      	ldr	r3, [r7, #0]
 8101fe6:	005b      	lsls	r3, r3, #1
 8101fe8:	431a      	orrs	r2, r3
 8101fea:	69bb      	ldr	r3, [r7, #24]
 8101fec:	431a      	orrs	r2, r3
 8101fee:	68fb      	ldr	r3, [r7, #12]
 8101ff0:	681b      	ldr	r3, [r3, #0]
 8101ff2:	430a      	orrs	r2, r1
 8101ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8101ff8:	2300      	movs	r3, #0
 8101ffa:	e006      	b.n	810200a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8101ffc:	68fb      	ldr	r3, [r7, #12]
 8101ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102000:	f043 0204 	orr.w	r2, r3, #4
 8102004:	68fb      	ldr	r3, [r7, #12]
 8102006:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8102008:	2301      	movs	r3, #1
  }
}
 810200a:	4618      	mov	r0, r3
 810200c:	3714      	adds	r7, #20
 810200e:	46bd      	mov	sp, r7
 8102010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102014:	4770      	bx	lr

08102016 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8102016:	b480      	push	{r7}
 8102018:	b083      	sub	sp, #12
 810201a:	af00      	add	r7, sp, #0
 810201c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 810201e:	687b      	ldr	r3, [r7, #4]
 8102020:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8102024:	b2db      	uxtb	r3, r3
 8102026:	2b01      	cmp	r3, #1
 8102028:	d110      	bne.n	810204c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 810202a:	687b      	ldr	r3, [r7, #4]
 810202c:	2202      	movs	r2, #2
 810202e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8102032:	687b      	ldr	r3, [r7, #4]
 8102034:	681b      	ldr	r3, [r3, #0]
 8102036:	699a      	ldr	r2, [r3, #24]
 8102038:	687b      	ldr	r3, [r7, #4]
 810203a:	681b      	ldr	r3, [r3, #0]
 810203c:	f022 0201 	bic.w	r2, r2, #1
 8102040:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	2200      	movs	r2, #0
 8102046:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8102048:	2300      	movs	r3, #0
 810204a:	e006      	b.n	810205a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 810204c:	687b      	ldr	r3, [r7, #4]
 810204e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102050:	f043 0204 	orr.w	r2, r3, #4
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8102058:	2301      	movs	r3, #1
  }
}
 810205a:	4618      	mov	r0, r3
 810205c:	370c      	adds	r7, #12
 810205e:	46bd      	mov	sp, r7
 8102060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102064:	4770      	bx	lr

08102066 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8102066:	b580      	push	{r7, lr}
 8102068:	b086      	sub	sp, #24
 810206a:	af00      	add	r7, sp, #0
 810206c:	60f8      	str	r0, [r7, #12]
 810206e:	60b9      	str	r1, [r7, #8]
 8102070:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8102072:	68fb      	ldr	r3, [r7, #12]
 8102074:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8102078:	b2db      	uxtb	r3, r3
 810207a:	2b02      	cmp	r3, #2
 810207c:	d12c      	bne.n	81020d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 810207e:	68fb      	ldr	r3, [r7, #12]
 8102080:	681b      	ldr	r3, [r3, #0]
 8102082:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8102086:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810208a:	2b00      	cmp	r3, #0
 810208c:	d007      	beq.n	810209e <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 810208e:	68fb      	ldr	r3, [r7, #12]
 8102090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102092:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8102096:	68fb      	ldr	r3, [r7, #12]
 8102098:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 810209a:	2301      	movs	r3, #1
 810209c:	e023      	b.n	81020e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 810209e:	68fb      	ldr	r3, [r7, #12]
 81020a0:	681b      	ldr	r3, [r3, #0]
 81020a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 81020a6:	0c1b      	lsrs	r3, r3, #16
 81020a8:	f003 0303 	and.w	r3, r3, #3
 81020ac:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 81020ae:	697b      	ldr	r3, [r7, #20]
 81020b0:	687a      	ldr	r2, [r7, #4]
 81020b2:	68b9      	ldr	r1, [r7, #8]
 81020b4:	68f8      	ldr	r0, [r7, #12]
 81020b6:	f000 fbe3 	bl	8102880 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 81020ba:	68fb      	ldr	r3, [r7, #12]
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	2101      	movs	r1, #1
 81020c0:	697a      	ldr	r2, [r7, #20]
 81020c2:	fa01 f202 	lsl.w	r2, r1, r2
 81020c6:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 81020ca:	2201      	movs	r2, #1
 81020cc:	697b      	ldr	r3, [r7, #20]
 81020ce:	409a      	lsls	r2, r3
 81020d0:	68fb      	ldr	r3, [r7, #12]
 81020d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 81020d4:	2300      	movs	r3, #0
 81020d6:	e006      	b.n	81020e6 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 81020d8:	68fb      	ldr	r3, [r7, #12]
 81020da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81020dc:	f043 0208 	orr.w	r2, r3, #8
 81020e0:	68fb      	ldr	r3, [r7, #12]
 81020e2:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 81020e4:	2301      	movs	r3, #1
  }
}
 81020e6:	4618      	mov	r0, r3
 81020e8:	3718      	adds	r7, #24
 81020ea:	46bd      	mov	sp, r7
 81020ec:	bd80      	pop	{r7, pc}
	...

081020f0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 81020f0:	b480      	push	{r7}
 81020f2:	b08b      	sub	sp, #44	@ 0x2c
 81020f4:	af00      	add	r7, sp, #0
 81020f6:	60f8      	str	r0, [r7, #12]
 81020f8:	60b9      	str	r1, [r7, #8]
 81020fa:	607a      	str	r2, [r7, #4]
 81020fc:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 81020fe:	2300      	movs	r3, #0
 8102100:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8102102:	68fb      	ldr	r3, [r7, #12]
 8102104:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8102108:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 810210a:	7efb      	ldrb	r3, [r7, #27]
 810210c:	2b02      	cmp	r3, #2
 810210e:	f040 80e8 	bne.w	81022e2 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8102112:	68bb      	ldr	r3, [r7, #8]
 8102114:	2b40      	cmp	r3, #64	@ 0x40
 8102116:	d137      	bne.n	8102188 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8102118:	68fb      	ldr	r3, [r7, #12]
 810211a:	681b      	ldr	r3, [r3, #0]
 810211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102120:	f003 030f 	and.w	r3, r3, #15
 8102124:	2b00      	cmp	r3, #0
 8102126:	d107      	bne.n	8102138 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8102128:	68fb      	ldr	r3, [r7, #12]
 810212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810212c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8102130:	68fb      	ldr	r3, [r7, #12]
 8102132:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8102134:	2301      	movs	r3, #1
 8102136:	e0db      	b.n	81022f0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8102138:	68fb      	ldr	r3, [r7, #12]
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102140:	0e1b      	lsrs	r3, r3, #24
 8102142:	f003 0301 	and.w	r3, r3, #1
 8102146:	2b01      	cmp	r3, #1
 8102148:	d10a      	bne.n	8102160 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 810214a:	68fb      	ldr	r3, [r7, #12]
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102152:	0a5b      	lsrs	r3, r3, #9
 8102154:	f003 0301 	and.w	r3, r3, #1
 8102158:	2b01      	cmp	r3, #1
 810215a:	d101      	bne.n	8102160 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 810215c:	2301      	movs	r3, #1
 810215e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8102160:	68fb      	ldr	r3, [r7, #12]
 8102162:	681b      	ldr	r3, [r3, #0]
 8102164:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102168:	0a1b      	lsrs	r3, r3, #8
 810216a:	f003 0303 	and.w	r3, r3, #3
 810216e:	69fa      	ldr	r2, [r7, #28]
 8102170:	4413      	add	r3, r2
 8102172:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8102174:	68fb      	ldr	r3, [r7, #12]
 8102176:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8102178:	69fa      	ldr	r2, [r7, #28]
 810217a:	4613      	mov	r3, r2
 810217c:	00db      	lsls	r3, r3, #3
 810217e:	4413      	add	r3, r2
 8102180:	00db      	lsls	r3, r3, #3
 8102182:	440b      	add	r3, r1
 8102184:	627b      	str	r3, [r7, #36]	@ 0x24
 8102186:	e036      	b.n	81021f6 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8102188:	68fb      	ldr	r3, [r7, #12]
 810218a:	681b      	ldr	r3, [r3, #0]
 810218c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102190:	f003 030f 	and.w	r3, r3, #15
 8102194:	2b00      	cmp	r3, #0
 8102196:	d107      	bne.n	81021a8 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8102198:	68fb      	ldr	r3, [r7, #12]
 810219a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810219c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 81021a0:	68fb      	ldr	r3, [r7, #12]
 81021a2:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 81021a4:	2301      	movs	r3, #1
 81021a6:	e0a3      	b.n	81022f0 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 81021a8:	68fb      	ldr	r3, [r7, #12]
 81021aa:	681b      	ldr	r3, [r3, #0]
 81021ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81021b0:	0e1b      	lsrs	r3, r3, #24
 81021b2:	f003 0301 	and.w	r3, r3, #1
 81021b6:	2b01      	cmp	r3, #1
 81021b8:	d10a      	bne.n	81021d0 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 81021ba:	68fb      	ldr	r3, [r7, #12]
 81021bc:	681b      	ldr	r3, [r3, #0]
 81021be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81021c2:	0a1b      	lsrs	r3, r3, #8
 81021c4:	f003 0301 	and.w	r3, r3, #1
 81021c8:	2b01      	cmp	r3, #1
 81021ca:	d101      	bne.n	81021d0 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 81021cc:	2301      	movs	r3, #1
 81021ce:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 81021d0:	68fb      	ldr	r3, [r7, #12]
 81021d2:	681b      	ldr	r3, [r3, #0]
 81021d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81021d8:	0a1b      	lsrs	r3, r3, #8
 81021da:	f003 0303 	and.w	r3, r3, #3
 81021de:	69fa      	ldr	r2, [r7, #28]
 81021e0:	4413      	add	r3, r2
 81021e2:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 81021e4:	68fb      	ldr	r3, [r7, #12]
 81021e6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 81021e8:	69fa      	ldr	r2, [r7, #28]
 81021ea:	4613      	mov	r3, r2
 81021ec:	00db      	lsls	r3, r3, #3
 81021ee:	4413      	add	r3, r2
 81021f0:	00db      	lsls	r3, r3, #3
 81021f2:	440b      	add	r3, r1
 81021f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 81021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81021f8:	681b      	ldr	r3, [r3, #0]
 81021fa:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 81021fe:	687b      	ldr	r3, [r7, #4]
 8102200:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	685b      	ldr	r3, [r3, #4]
 8102206:	2b00      	cmp	r3, #0
 8102208:	d107      	bne.n	810221a <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 810220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810220c:	681b      	ldr	r3, [r3, #0]
 810220e:	0c9b      	lsrs	r3, r3, #18
 8102210:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8102214:	687b      	ldr	r3, [r7, #4]
 8102216:	601a      	str	r2, [r3, #0]
 8102218:	e005      	b.n	8102226 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 810221a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810221c:	681b      	ldr	r3, [r3, #0]
 810221e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8102226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102228:	681b      	ldr	r3, [r3, #0]
 810222a:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 810222e:	687b      	ldr	r3, [r7, #4]
 8102230:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8102232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 810223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102240:	3304      	adds	r3, #4
 8102242:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8102244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102246:	681b      	ldr	r3, [r3, #0]
 8102248:	b29a      	uxth	r2, r3
 810224a:	687b      	ldr	r3, [r7, #4]
 810224c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 810224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	0c1b      	lsrs	r3, r3, #16
 8102254:	f003 020f 	and.w	r2, r3, #15
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 810225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810225e:	681b      	ldr	r3, [r3, #0]
 8102260:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8102268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810226a:	681b      	ldr	r3, [r3, #0]
 810226c:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8102274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102276:	681b      	ldr	r3, [r3, #0]
 8102278:	0e1b      	lsrs	r3, r3, #24
 810227a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8102282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102284:	681b      	ldr	r3, [r3, #0]
 8102286:	0fda      	lsrs	r2, r3, #31
 8102288:	687b      	ldr	r3, [r7, #4]
 810228a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 810228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810228e:	3304      	adds	r3, #4
 8102290:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8102292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8102294:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8102296:	2300      	movs	r3, #0
 8102298:	623b      	str	r3, [r7, #32]
 810229a:	e00a      	b.n	81022b2 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 810229c:	697a      	ldr	r2, [r7, #20]
 810229e:	6a3b      	ldr	r3, [r7, #32]
 81022a0:	441a      	add	r2, r3
 81022a2:	6839      	ldr	r1, [r7, #0]
 81022a4:	6a3b      	ldr	r3, [r7, #32]
 81022a6:	440b      	add	r3, r1
 81022a8:	7812      	ldrb	r2, [r2, #0]
 81022aa:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 81022ac:	6a3b      	ldr	r3, [r7, #32]
 81022ae:	3301      	adds	r3, #1
 81022b0:	623b      	str	r3, [r7, #32]
 81022b2:	687b      	ldr	r3, [r7, #4]
 81022b4:	68db      	ldr	r3, [r3, #12]
 81022b6:	4a11      	ldr	r2, [pc, #68]	@ (81022fc <HAL_FDCAN_GetRxMessage+0x20c>)
 81022b8:	5cd3      	ldrb	r3, [r2, r3]
 81022ba:	461a      	mov	r2, r3
 81022bc:	6a3b      	ldr	r3, [r7, #32]
 81022be:	4293      	cmp	r3, r2
 81022c0:	d3ec      	bcc.n	810229c <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 81022c2:	68bb      	ldr	r3, [r7, #8]
 81022c4:	2b40      	cmp	r3, #64	@ 0x40
 81022c6:	d105      	bne.n	81022d4 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 81022c8:	68fb      	ldr	r3, [r7, #12]
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	69fa      	ldr	r2, [r7, #28]
 81022ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 81022d2:	e004      	b.n	81022de <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 81022d4:	68fb      	ldr	r3, [r7, #12]
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	69fa      	ldr	r2, [r7, #28]
 81022da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 81022de:	2300      	movs	r3, #0
 81022e0:	e006      	b.n	81022f0 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 81022e2:	68fb      	ldr	r3, [r7, #12]
 81022e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81022e6:	f043 0208 	orr.w	r2, r3, #8
 81022ea:	68fb      	ldr	r3, [r7, #12]
 81022ec:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 81022ee:	2301      	movs	r3, #1
  }
}
 81022f0:	4618      	mov	r0, r3
 81022f2:	372c      	adds	r7, #44	@ 0x2c
 81022f4:	46bd      	mov	sp, r7
 81022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022fa:	4770      	bx	lr
 81022fc:	0810934c 	.word	0x0810934c

08102300 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8102300:	b480      	push	{r7}
 8102302:	b087      	sub	sp, #28
 8102304:	af00      	add	r7, sp, #0
 8102306:	60f8      	str	r0, [r7, #12]
 8102308:	60b9      	str	r1, [r7, #8]
 810230a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 810230c:	68fb      	ldr	r3, [r7, #12]
 810230e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8102312:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8102314:	7dfb      	ldrb	r3, [r7, #23]
 8102316:	2b01      	cmp	r3, #1
 8102318:	d003      	beq.n	8102322 <HAL_FDCAN_ActivateNotification+0x22>
 810231a:	7dfb      	ldrb	r3, [r7, #23]
 810231c:	2b02      	cmp	r3, #2
 810231e:	f040 80c8 	bne.w	81024b2 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8102322:	68fb      	ldr	r3, [r7, #12]
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102328:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 810232a:	68bb      	ldr	r3, [r7, #8]
 810232c:	f003 0307 	and.w	r3, r3, #7
 8102330:	2b00      	cmp	r3, #0
 8102332:	d004      	beq.n	810233e <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8102334:	693b      	ldr	r3, [r7, #16]
 8102336:	f003 0301 	and.w	r3, r3, #1
 810233a:	2b00      	cmp	r3, #0
 810233c:	d03b      	beq.n	81023b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 810233e:	68bb      	ldr	r3, [r7, #8]
 8102340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8102344:	2b00      	cmp	r3, #0
 8102346:	d004      	beq.n	8102352 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8102348:	693b      	ldr	r3, [r7, #16]
 810234a:	f003 0302 	and.w	r3, r3, #2
 810234e:	2b00      	cmp	r3, #0
 8102350:	d031      	beq.n	81023b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8102352:	68bb      	ldr	r3, [r7, #8]
 8102354:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8102358:	2b00      	cmp	r3, #0
 810235a:	d004      	beq.n	8102366 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 810235c:	693b      	ldr	r3, [r7, #16]
 810235e:	f003 0304 	and.w	r3, r3, #4
 8102362:	2b00      	cmp	r3, #0
 8102364:	d027      	beq.n	81023b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8102366:	68bb      	ldr	r3, [r7, #8]
 8102368:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 810236c:	2b00      	cmp	r3, #0
 810236e:	d004      	beq.n	810237a <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8102370:	693b      	ldr	r3, [r7, #16]
 8102372:	f003 0308 	and.w	r3, r3, #8
 8102376:	2b00      	cmp	r3, #0
 8102378:	d01d      	beq.n	81023b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 810237a:	68bb      	ldr	r3, [r7, #8]
 810237c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8102380:	2b00      	cmp	r3, #0
 8102382:	d004      	beq.n	810238e <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8102384:	693b      	ldr	r3, [r7, #16]
 8102386:	f003 0310 	and.w	r3, r3, #16
 810238a:	2b00      	cmp	r3, #0
 810238c:	d013      	beq.n	81023b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 810238e:	68bb      	ldr	r3, [r7, #8]
 8102390:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8102394:	2b00      	cmp	r3, #0
 8102396:	d004      	beq.n	81023a2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8102398:	693b      	ldr	r3, [r7, #16]
 810239a:	f003 0320 	and.w	r3, r3, #32
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d009      	beq.n	81023b6 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 81023a2:	68bb      	ldr	r3, [r7, #8]
 81023a4:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 81023a8:	2b00      	cmp	r3, #0
 81023aa:	d00c      	beq.n	81023c6 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 81023ac:	693b      	ldr	r3, [r7, #16]
 81023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81023b2:	2b00      	cmp	r3, #0
 81023b4:	d107      	bne.n	81023c6 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 81023b6:	68fb      	ldr	r3, [r7, #12]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81023bc:	68fb      	ldr	r3, [r7, #12]
 81023be:	681b      	ldr	r3, [r3, #0]
 81023c0:	f042 0201 	orr.w	r2, r2, #1
 81023c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 81023c6:	68bb      	ldr	r3, [r7, #8]
 81023c8:	f003 0307 	and.w	r3, r3, #7
 81023cc:	2b00      	cmp	r3, #0
 81023ce:	d004      	beq.n	81023da <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 81023d0:	693b      	ldr	r3, [r7, #16]
 81023d2:	f003 0301 	and.w	r3, r3, #1
 81023d6:	2b00      	cmp	r3, #0
 81023d8:	d13b      	bne.n	8102452 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 81023da:	68bb      	ldr	r3, [r7, #8]
 81023dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	d004      	beq.n	81023ee <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 81023e4:	693b      	ldr	r3, [r7, #16]
 81023e6:	f003 0302 	and.w	r3, r3, #2
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	d131      	bne.n	8102452 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 81023ee:	68bb      	ldr	r3, [r7, #8]
 81023f0:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 81023f4:	2b00      	cmp	r3, #0
 81023f6:	d004      	beq.n	8102402 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 81023f8:	693b      	ldr	r3, [r7, #16]
 81023fa:	f003 0304 	and.w	r3, r3, #4
 81023fe:	2b00      	cmp	r3, #0
 8102400:	d127      	bne.n	8102452 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8102402:	68bb      	ldr	r3, [r7, #8]
 8102404:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8102408:	2b00      	cmp	r3, #0
 810240a:	d004      	beq.n	8102416 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 810240c:	693b      	ldr	r3, [r7, #16]
 810240e:	f003 0308 	and.w	r3, r3, #8
 8102412:	2b00      	cmp	r3, #0
 8102414:	d11d      	bne.n	8102452 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8102416:	68bb      	ldr	r3, [r7, #8]
 8102418:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 810241c:	2b00      	cmp	r3, #0
 810241e:	d004      	beq.n	810242a <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8102420:	693b      	ldr	r3, [r7, #16]
 8102422:	f003 0310 	and.w	r3, r3, #16
 8102426:	2b00      	cmp	r3, #0
 8102428:	d113      	bne.n	8102452 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 810242a:	68bb      	ldr	r3, [r7, #8]
 810242c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8102430:	2b00      	cmp	r3, #0
 8102432:	d004      	beq.n	810243e <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8102434:	693b      	ldr	r3, [r7, #16]
 8102436:	f003 0320 	and.w	r3, r3, #32
 810243a:	2b00      	cmp	r3, #0
 810243c:	d109      	bne.n	8102452 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 810243e:	68bb      	ldr	r3, [r7, #8]
 8102440:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8102444:	2b00      	cmp	r3, #0
 8102446:	d00c      	beq.n	8102462 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8102448:	693b      	ldr	r3, [r7, #16]
 810244a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810244e:	2b00      	cmp	r3, #0
 8102450:	d007      	beq.n	8102462 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8102452:	68fb      	ldr	r3, [r7, #12]
 8102454:	681b      	ldr	r3, [r3, #0]
 8102456:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8102458:	68fb      	ldr	r3, [r7, #12]
 810245a:	681b      	ldr	r3, [r3, #0]
 810245c:	f042 0202 	orr.w	r2, r2, #2
 8102460:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8102462:	68bb      	ldr	r3, [r7, #8]
 8102464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102468:	2b00      	cmp	r3, #0
 810246a:	d009      	beq.n	8102480 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 810246c:	68fb      	ldr	r3, [r7, #12]
 810246e:	681b      	ldr	r3, [r3, #0]
 8102470:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8102474:	68fb      	ldr	r3, [r7, #12]
 8102476:	681b      	ldr	r3, [r3, #0]
 8102478:	687a      	ldr	r2, [r7, #4]
 810247a:	430a      	orrs	r2, r1
 810247c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8102480:	68bb      	ldr	r3, [r7, #8]
 8102482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102486:	2b00      	cmp	r3, #0
 8102488:	d009      	beq.n	810249e <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 810248a:	68fb      	ldr	r3, [r7, #12]
 810248c:	681b      	ldr	r3, [r3, #0]
 810248e:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8102492:	68fb      	ldr	r3, [r7, #12]
 8102494:	681b      	ldr	r3, [r3, #0]
 8102496:	687a      	ldr	r2, [r7, #4]
 8102498:	430a      	orrs	r2, r1
 810249a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 810249e:	68fb      	ldr	r3, [r7, #12]
 81024a0:	681b      	ldr	r3, [r3, #0]
 81024a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81024a4:	68fb      	ldr	r3, [r7, #12]
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	68ba      	ldr	r2, [r7, #8]
 81024aa:	430a      	orrs	r2, r1
 81024ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 81024ae:	2300      	movs	r3, #0
 81024b0:	e006      	b.n	81024c0 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 81024b2:	68fb      	ldr	r3, [r7, #12]
 81024b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81024b6:	f043 0202 	orr.w	r2, r3, #2
 81024ba:	68fb      	ldr	r3, [r7, #12]
 81024bc:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 81024be:	2301      	movs	r3, #1
  }
}
 81024c0:	4618      	mov	r0, r3
 81024c2:	371c      	adds	r7, #28
 81024c4:	46bd      	mov	sp, r7
 81024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024ca:	4770      	bx	lr

081024cc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 81024cc:	b580      	push	{r7, lr}
 81024ce:	b08c      	sub	sp, #48	@ 0x30
 81024d0:	af00      	add	r7, sp, #0
 81024d2:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 81024d4:	687b      	ldr	r3, [r7, #4]
 81024d6:	681b      	ldr	r3, [r3, #0]
 81024d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81024da:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 81024de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	681b      	ldr	r3, [r3, #0]
 81024e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81024e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81024e8:	4013      	ands	r3, r2
 81024ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 81024ec:	687b      	ldr	r3, [r7, #4]
 81024ee:	681b      	ldr	r3, [r3, #0]
 81024f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81024f2:	f003 0307 	and.w	r3, r3, #7
 81024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 81024f8:	687b      	ldr	r3, [r7, #4]
 81024fa:	681b      	ldr	r3, [r3, #0]
 81024fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81024fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8102500:	4013      	ands	r3, r2
 8102502:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810250a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810250e:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	681b      	ldr	r3, [r3, #0]
 8102514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8102518:	4013      	ands	r3, r2
 810251a:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102522:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8102526:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8102528:	687b      	ldr	r3, [r7, #4]
 810252a:	681b      	ldr	r3, [r3, #0]
 810252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810252e:	6a3a      	ldr	r2, [r7, #32]
 8102530:	4013      	ands	r3, r2
 8102532:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8102534:	687b      	ldr	r3, [r7, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810253a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 810253e:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	681b      	ldr	r3, [r3, #0]
 8102544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102546:	69fa      	ldr	r2, [r7, #28]
 8102548:	4013      	ands	r3, r2
 810254a:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 810254c:	687b      	ldr	r3, [r7, #4]
 810254e:	681b      	ldr	r3, [r3, #0]
 8102550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102552:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8102554:	687b      	ldr	r3, [r7, #4]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810255a:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 810255c:	697b      	ldr	r3, [r7, #20]
 810255e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102562:	2b00      	cmp	r3, #0
 8102564:	d00b      	beq.n	810257e <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8102566:	69bb      	ldr	r3, [r7, #24]
 8102568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810256c:	2b00      	cmp	r3, #0
 810256e:	d006      	beq.n	810257e <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8102570:	687b      	ldr	r3, [r7, #4]
 8102572:	681b      	ldr	r3, [r3, #0]
 8102574:	2240      	movs	r2, #64	@ 0x40
 8102576:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8102578:	6878      	ldr	r0, [r7, #4]
 810257a:	f000 f90b 	bl	8102794 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 810257e:	697b      	ldr	r3, [r7, #20]
 8102580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102584:	2b00      	cmp	r3, #0
 8102586:	d019      	beq.n	81025bc <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8102588:	69bb      	ldr	r3, [r7, #24]
 810258a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810258e:	2b00      	cmp	r3, #0
 8102590:	d014      	beq.n	81025bc <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	681b      	ldr	r3, [r3, #0]
 8102596:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810259a:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	681b      	ldr	r3, [r3, #0]
 81025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025a4:	693a      	ldr	r2, [r7, #16]
 81025a6:	4013      	ands	r3, r2
 81025a8:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	681b      	ldr	r3, [r3, #0]
 81025ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81025b2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 81025b4:	6939      	ldr	r1, [r7, #16]
 81025b6:	6878      	ldr	r0, [r7, #4]
 81025b8:	f000 f8cd 	bl	8102756 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 81025bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 81025be:	2b00      	cmp	r3, #0
 81025c0:	d007      	beq.n	81025d2 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81025c8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 81025ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81025cc:	6878      	ldr	r0, [r7, #4]
 81025ce:	f000 f8a2 	bl	8102716 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 81025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81025d4:	2b00      	cmp	r3, #0
 81025d6:	d007      	beq.n	81025e8 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 81025d8:	687b      	ldr	r3, [r7, #4]
 81025da:	681b      	ldr	r3, [r3, #0]
 81025dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 81025de:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 81025e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81025e2:	6878      	ldr	r0, [r7, #4]
 81025e4:	f7fe f9f8 	bl	81009d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 81025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81025ea:	2b00      	cmp	r3, #0
 81025ec:	d007      	beq.n	81025fe <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 81025ee:	687b      	ldr	r3, [r7, #4]
 81025f0:	681b      	ldr	r3, [r3, #0]
 81025f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81025f4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 81025f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81025f8:	6878      	ldr	r0, [r7, #4]
 81025fa:	f7fe f8a1 	bl	8100740 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 81025fe:	697b      	ldr	r3, [r7, #20]
 8102600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102604:	2b00      	cmp	r3, #0
 8102606:	d00c      	beq.n	8102622 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8102608:	69bb      	ldr	r3, [r7, #24]
 810260a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810260e:	2b00      	cmp	r3, #0
 8102610:	d007      	beq.n	8102622 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	681b      	ldr	r3, [r3, #0]
 8102616:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810261a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 810261c:	6878      	ldr	r0, [r7, #4]
 810261e:	f000 f885 	bl	810272c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8102622:	697b      	ldr	r3, [r7, #20]
 8102624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102628:	2b00      	cmp	r3, #0
 810262a:	d018      	beq.n	810265e <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 810262c:	69bb      	ldr	r3, [r7, #24]
 810262e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102632:	2b00      	cmp	r3, #0
 8102634:	d013      	beq.n	810265e <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	681b      	ldr	r3, [r3, #0]
 810263a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810263e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	681b      	ldr	r3, [r3, #0]
 8102644:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8102648:	68fa      	ldr	r2, [r7, #12]
 810264a:	4013      	ands	r3, r2
 810264c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	681b      	ldr	r3, [r3, #0]
 8102652:	2280      	movs	r2, #128	@ 0x80
 8102654:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8102656:	68f9      	ldr	r1, [r7, #12]
 8102658:	6878      	ldr	r0, [r7, #4]
 810265a:	f000 f871 	bl	8102740 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 810265e:	697b      	ldr	r3, [r7, #20]
 8102660:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8102664:	2b00      	cmp	r3, #0
 8102666:	d00c      	beq.n	8102682 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8102668:	69bb      	ldr	r3, [r7, #24]
 810266a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810266e:	2b00      	cmp	r3, #0
 8102670:	d007      	beq.n	8102682 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 810267a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 810267c:	6878      	ldr	r0, [r7, #4]
 810267e:	f000 f875 	bl	810276c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8102682:	697b      	ldr	r3, [r7, #20]
 8102684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102688:	2b00      	cmp	r3, #0
 810268a:	d00c      	beq.n	81026a6 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 810268c:	69bb      	ldr	r3, [r7, #24]
 810268e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102692:	2b00      	cmp	r3, #0
 8102694:	d007      	beq.n	81026a6 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8102696:	687b      	ldr	r3, [r7, #4]
 8102698:	681b      	ldr	r3, [r3, #0]
 810269a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 810269e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 81026a0:	6878      	ldr	r0, [r7, #4]
 81026a2:	f000 f86d 	bl	8102780 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 81026a6:	697b      	ldr	r3, [r7, #20]
 81026a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81026ac:	2b00      	cmp	r3, #0
 81026ae:	d00f      	beq.n	81026d0 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 81026b0:	69bb      	ldr	r3, [r7, #24]
 81026b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81026b6:	2b00      	cmp	r3, #0
 81026b8:	d00a      	beq.n	81026d0 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 81026c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 81026c4:	687b      	ldr	r3, [r7, #4]
 81026c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81026c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81026cc:	687b      	ldr	r3, [r7, #4]
 81026ce:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 81026d0:	69fb      	ldr	r3, [r7, #28]
 81026d2:	2b00      	cmp	r3, #0
 81026d4:	d007      	beq.n	81026e6 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 81026d6:	687b      	ldr	r3, [r7, #4]
 81026d8:	681b      	ldr	r3, [r3, #0]
 81026da:	69fa      	ldr	r2, [r7, #28]
 81026dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 81026de:	69f9      	ldr	r1, [r7, #28]
 81026e0:	6878      	ldr	r0, [r7, #4]
 81026e2:	f000 f86b 	bl	81027bc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 81026e6:	6a3b      	ldr	r3, [r7, #32]
 81026e8:	2b00      	cmp	r3, #0
 81026ea:	d009      	beq.n	8102700 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 81026ec:	687b      	ldr	r3, [r7, #4]
 81026ee:	681b      	ldr	r3, [r3, #0]
 81026f0:	6a3a      	ldr	r2, [r7, #32]
 81026f2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 81026f4:	687b      	ldr	r3, [r7, #4]
 81026f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81026f8:	6a3b      	ldr	r3, [r7, #32]
 81026fa:	431a      	orrs	r2, r3
 81026fc:	687b      	ldr	r3, [r7, #4]
 81026fe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8102700:	687b      	ldr	r3, [r7, #4]
 8102702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102704:	2b00      	cmp	r3, #0
 8102706:	d002      	beq.n	810270e <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8102708:	6878      	ldr	r0, [r7, #4]
 810270a:	f000 f84d 	bl	81027a8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 810270e:	bf00      	nop
 8102710:	3730      	adds	r7, #48	@ 0x30
 8102712:	46bd      	mov	sp, r7
 8102714:	bd80      	pop	{r7, pc}

08102716 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8102716:	b480      	push	{r7}
 8102718:	b083      	sub	sp, #12
 810271a:	af00      	add	r7, sp, #0
 810271c:	6078      	str	r0, [r7, #4]
 810271e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8102720:	bf00      	nop
 8102722:	370c      	adds	r7, #12
 8102724:	46bd      	mov	sp, r7
 8102726:	f85d 7b04 	ldr.w	r7, [sp], #4
 810272a:	4770      	bx	lr

0810272c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810272c:	b480      	push	{r7}
 810272e:	b083      	sub	sp, #12
 8102730:	af00      	add	r7, sp, #0
 8102732:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8102734:	bf00      	nop
 8102736:	370c      	adds	r7, #12
 8102738:	46bd      	mov	sp, r7
 810273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810273e:	4770      	bx	lr

08102740 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8102740:	b480      	push	{r7}
 8102742:	b083      	sub	sp, #12
 8102744:	af00      	add	r7, sp, #0
 8102746:	6078      	str	r0, [r7, #4]
 8102748:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 810274a:	bf00      	nop
 810274c:	370c      	adds	r7, #12
 810274e:	46bd      	mov	sp, r7
 8102750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102754:	4770      	bx	lr

08102756 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8102756:	b480      	push	{r7}
 8102758:	b083      	sub	sp, #12
 810275a:	af00      	add	r7, sp, #0
 810275c:	6078      	str	r0, [r7, #4]
 810275e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8102760:	bf00      	nop
 8102762:	370c      	adds	r7, #12
 8102764:	46bd      	mov	sp, r7
 8102766:	f85d 7b04 	ldr.w	r7, [sp], #4
 810276a:	4770      	bx	lr

0810276c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 810276c:	b480      	push	{r7}
 810276e:	b083      	sub	sp, #12
 8102770:	af00      	add	r7, sp, #0
 8102772:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8102774:	bf00      	nop
 8102776:	370c      	adds	r7, #12
 8102778:	46bd      	mov	sp, r7
 810277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810277e:	4770      	bx	lr

08102780 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102780:	b480      	push	{r7}
 8102782:	b083      	sub	sp, #12
 8102784:	af00      	add	r7, sp, #0
 8102786:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8102788:	bf00      	nop
 810278a:	370c      	adds	r7, #12
 810278c:	46bd      	mov	sp, r7
 810278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102792:	4770      	bx	lr

08102794 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8102794:	b480      	push	{r7}
 8102796:	b083      	sub	sp, #12
 8102798:	af00      	add	r7, sp, #0
 810279a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 810279c:	bf00      	nop
 810279e:	370c      	adds	r7, #12
 81027a0:	46bd      	mov	sp, r7
 81027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a6:	4770      	bx	lr

081027a8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 81027a8:	b480      	push	{r7}
 81027aa:	b083      	sub	sp, #12
 81027ac:	af00      	add	r7, sp, #0
 81027ae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 81027b0:	bf00      	nop
 81027b2:	370c      	adds	r7, #12
 81027b4:	46bd      	mov	sp, r7
 81027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ba:	4770      	bx	lr

081027bc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 81027bc:	b480      	push	{r7}
 81027be:	b083      	sub	sp, #12
 81027c0:	af00      	add	r7, sp, #0
 81027c2:	6078      	str	r0, [r7, #4]
 81027c4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 81027c6:	bf00      	nop
 81027c8:	370c      	adds	r7, #12
 81027ca:	46bd      	mov	sp, r7
 81027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027d0:	4770      	bx	lr
	...

081027d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 81027d4:	b480      	push	{r7}
 81027d6:	b085      	sub	sp, #20
 81027d8:	af00      	add	r7, sp, #0
 81027da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 81027dc:	4b27      	ldr	r3, [pc, #156]	@ (810287c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 81027de:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	68ba      	ldr	r2, [r7, #8]
 81027e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	681b      	ldr	r3, [r3, #0]
 81027ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81027ee:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81027f6:	041a      	lsls	r2, r3, #16
 81027f8:	687b      	ldr	r3, [r7, #4]
 81027fa:	681b      	ldr	r3, [r3, #0]
 81027fc:	430a      	orrs	r2, r1
 81027fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8102802:	68bb      	ldr	r3, [r7, #8]
 8102804:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8102808:	687b      	ldr	r3, [r7, #4]
 810280a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 810280c:	687b      	ldr	r3, [r7, #4]
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102814:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8102818:	687b      	ldr	r3, [r7, #4]
 810281a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810281c:	061a      	lsls	r2, r3, #24
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	430a      	orrs	r2, r1
 8102824:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8102828:	68bb      	ldr	r3, [r7, #8]
 810282a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8102832:	68bb      	ldr	r3, [r7, #8]
 8102834:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8102838:	687b      	ldr	r3, [r7, #4]
 810283a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 810283c:	68bb      	ldr	r3, [r7, #8]
 810283e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8102846:	68bb      	ldr	r3, [r7, #8]
 8102848:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8102850:	68bb      	ldr	r3, [r7, #8]
 8102852:	60fb      	str	r3, [r7, #12]
 8102854:	e005      	b.n	8102862 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8102856:	68fb      	ldr	r3, [r7, #12]
 8102858:	2200      	movs	r2, #0
 810285a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 810285c:	68fb      	ldr	r3, [r7, #12]
 810285e:	3304      	adds	r3, #4
 8102860:	60fb      	str	r3, [r7, #12]
 8102862:	68bb      	ldr	r3, [r7, #8]
 8102864:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8102868:	68fa      	ldr	r2, [r7, #12]
 810286a:	429a      	cmp	r2, r3
 810286c:	d3f3      	bcc.n	8102856 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 810286e:	bf00      	nop
 8102870:	bf00      	nop
 8102872:	3714      	adds	r7, #20
 8102874:	46bd      	mov	sp, r7
 8102876:	f85d 7b04 	ldr.w	r7, [sp], #4
 810287a:	4770      	bx	lr
 810287c:	4000ac00 	.word	0x4000ac00

08102880 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8102880:	b480      	push	{r7}
 8102882:	b089      	sub	sp, #36	@ 0x24
 8102884:	af00      	add	r7, sp, #0
 8102886:	60f8      	str	r0, [r7, #12]
 8102888:	60b9      	str	r1, [r7, #8]
 810288a:	607a      	str	r2, [r7, #4]
 810288c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 810288e:	68bb      	ldr	r3, [r7, #8]
 8102890:	685b      	ldr	r3, [r3, #4]
 8102892:	2b00      	cmp	r3, #0
 8102894:	d10a      	bne.n	81028ac <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8102896:	68bb      	ldr	r3, [r7, #8]
 8102898:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 810289a:	68bb      	ldr	r3, [r7, #8]
 810289c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 810289e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 81028a0:	68bb      	ldr	r3, [r7, #8]
 81028a2:	681b      	ldr	r3, [r3, #0]
 81028a4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 81028a6:	4313      	orrs	r3, r2
 81028a8:	61fb      	str	r3, [r7, #28]
 81028aa:	e00a      	b.n	81028c2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 81028ac:	68bb      	ldr	r3, [r7, #8]
 81028ae:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 81028b0:	68bb      	ldr	r3, [r7, #8]
 81028b2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 81028b4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 81028b6:	68bb      	ldr	r3, [r7, #8]
 81028b8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 81028ba:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 81028bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 81028c0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 81028c2:	68bb      	ldr	r3, [r7, #8]
 81028c4:	6a1b      	ldr	r3, [r3, #32]
 81028c6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 81028c8:	68bb      	ldr	r3, [r7, #8]
 81028ca:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 81028cc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 81028ce:	68bb      	ldr	r3, [r7, #8]
 81028d0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 81028d2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 81028d4:	68bb      	ldr	r3, [r7, #8]
 81028d6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 81028d8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 81028da:	68bb      	ldr	r3, [r7, #8]
 81028dc:	68db      	ldr	r3, [r3, #12]
 81028de:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 81028e0:	4313      	orrs	r3, r2
 81028e2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81028e8:	683a      	ldr	r2, [r7, #0]
 81028ea:	4613      	mov	r3, r2
 81028ec:	00db      	lsls	r3, r3, #3
 81028ee:	4413      	add	r3, r2
 81028f0:	00db      	lsls	r3, r3, #3
 81028f2:	440b      	add	r3, r1
 81028f4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 81028f6:	69bb      	ldr	r3, [r7, #24]
 81028f8:	69fa      	ldr	r2, [r7, #28]
 81028fa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 81028fc:	69bb      	ldr	r3, [r7, #24]
 81028fe:	3304      	adds	r3, #4
 8102900:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8102902:	69bb      	ldr	r3, [r7, #24]
 8102904:	693a      	ldr	r2, [r7, #16]
 8102906:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8102908:	69bb      	ldr	r3, [r7, #24]
 810290a:	3304      	adds	r3, #4
 810290c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 810290e:	2300      	movs	r3, #0
 8102910:	617b      	str	r3, [r7, #20]
 8102912:	e020      	b.n	8102956 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8102914:	697b      	ldr	r3, [r7, #20]
 8102916:	3303      	adds	r3, #3
 8102918:	687a      	ldr	r2, [r7, #4]
 810291a:	4413      	add	r3, r2
 810291c:	781b      	ldrb	r3, [r3, #0]
 810291e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8102920:	697b      	ldr	r3, [r7, #20]
 8102922:	3302      	adds	r3, #2
 8102924:	6879      	ldr	r1, [r7, #4]
 8102926:	440b      	add	r3, r1
 8102928:	781b      	ldrb	r3, [r3, #0]
 810292a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 810292c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 810292e:	697b      	ldr	r3, [r7, #20]
 8102930:	3301      	adds	r3, #1
 8102932:	6879      	ldr	r1, [r7, #4]
 8102934:	440b      	add	r3, r1
 8102936:	781b      	ldrb	r3, [r3, #0]
 8102938:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 810293a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 810293c:	6879      	ldr	r1, [r7, #4]
 810293e:	697a      	ldr	r2, [r7, #20]
 8102940:	440a      	add	r2, r1
 8102942:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8102944:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8102946:	69bb      	ldr	r3, [r7, #24]
 8102948:	601a      	str	r2, [r3, #0]
    TxAddress++;
 810294a:	69bb      	ldr	r3, [r7, #24]
 810294c:	3304      	adds	r3, #4
 810294e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8102950:	697b      	ldr	r3, [r7, #20]
 8102952:	3304      	adds	r3, #4
 8102954:	617b      	str	r3, [r7, #20]
 8102956:	68bb      	ldr	r3, [r7, #8]
 8102958:	68db      	ldr	r3, [r3, #12]
 810295a:	4a06      	ldr	r2, [pc, #24]	@ (8102974 <FDCAN_CopyMessageToRAM+0xf4>)
 810295c:	5cd3      	ldrb	r3, [r2, r3]
 810295e:	461a      	mov	r2, r3
 8102960:	697b      	ldr	r3, [r7, #20]
 8102962:	4293      	cmp	r3, r2
 8102964:	d3d6      	bcc.n	8102914 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8102966:	bf00      	nop
 8102968:	bf00      	nop
 810296a:	3724      	adds	r7, #36	@ 0x24
 810296c:	46bd      	mov	sp, r7
 810296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102972:	4770      	bx	lr
 8102974:	0810934c 	.word	0x0810934c

08102978 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t DataAddress)
{
 8102978:	b580      	push	{r7, lr}
 810297a:	b086      	sub	sp, #24
 810297c:	af00      	add	r7, sp, #0
 810297e:	60f8      	str	r0, [r7, #12]
 8102980:	60b9      	str	r1, [r7, #8]
 8102982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8102984:	4b1f      	ldr	r3, [pc, #124]	@ (8102a04 <HAL_FLASH_Program+0x8c>)
 8102986:	781b      	ldrb	r3, [r3, #0]
 8102988:	2b01      	cmp	r3, #1
 810298a:	d101      	bne.n	8102990 <HAL_FLASH_Program+0x18>
 810298c:	2302      	movs	r3, #2
 810298e:	e034      	b.n	81029fa <HAL_FLASH_Program+0x82>
 8102990:	4b1c      	ldr	r3, [pc, #112]	@ (8102a04 <HAL_FLASH_Program+0x8c>)
 8102992:	2201      	movs	r2, #1
 8102994:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8102996:	4b1b      	ldr	r3, [pc, #108]	@ (8102a04 <HAL_FLASH_Program+0x8c>)
 8102998:	2200      	movs	r2, #0
 810299a:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 810299c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81029a0:	f000 f870 	bl	8102a84 <FLASH_WaitForLastOperation>
 81029a4:	4603      	mov	r3, r0
 81029a6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 81029a8:	7dfb      	ldrb	r3, [r7, #23]
 81029aa:	2b00      	cmp	r3, #0
 81029ac:	d121      	bne.n	81029f2 <HAL_FLASH_Program+0x7a>
  {
    /* Set current operation type */
    pFlash.ProcedureOnGoing = TypeProgram;
 81029ae:	4a15      	ldr	r2, [pc, #84]	@ (8102a04 <HAL_FLASH_Program+0x8c>)
 81029b0:	68fb      	ldr	r3, [r7, #12]
 81029b2:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 81029b4:	4b14      	ldr	r3, [pc, #80]	@ (8102a08 <HAL_FLASH_Program+0x90>)
 81029b6:	613b      	str	r3, [r7, #16]

    if ((TypeProgram & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEPROGRAM_QUADWORD)
 81029b8:	68fb      	ldr	r3, [r7, #12]
 81029ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81029be:	2b01      	cmp	r3, #1
 81029c0:	d104      	bne.n	81029cc <HAL_FLASH_Program+0x54>
    {
      /* Program a quad-word (128-bit) at a specified address */
      FLASH_Program_QuadWord(Address, DataAddress);
 81029c2:	6879      	ldr	r1, [r7, #4]
 81029c4:	68b8      	ldr	r0, [r7, #8]
 81029c6:	f000 f8a3 	bl	8102b10 <FLASH_Program_QuadWord>
 81029ca:	e003      	b.n	81029d4 <HAL_FLASH_Program+0x5c>
    }
    else
    {
      /* Program a burst of 8 quad-words at a specified address */
      FLASH_Program_Burst(Address, DataAddress);
 81029cc:	6879      	ldr	r1, [r7, #4]
 81029ce:	68b8      	ldr	r0, [r7, #8]
 81029d0:	f000 f8da 	bl	8102b88 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 81029d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 81029d8:	f000 f854 	bl	8102a84 <FLASH_WaitForLastOperation>
 81029dc:	4603      	mov	r3, r0
 81029de:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG (and BWR Bit in Burst programming mode) */
    CLEAR_BIT((*reg_cr), (TypeProgram & ~(FLASH_NON_SECURE_MASK)));
 81029e0:	693b      	ldr	r3, [r7, #16]
 81029e2:	681a      	ldr	r2, [r3, #0]
 81029e4:	68fb      	ldr	r3, [r7, #12]
 81029e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81029ea:	43db      	mvns	r3, r3
 81029ec:	401a      	ands	r2, r3
 81029ee:	693b      	ldr	r3, [r7, #16]
 81029f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 81029f2:	4b04      	ldr	r3, [pc, #16]	@ (8102a04 <HAL_FLASH_Program+0x8c>)
 81029f4:	2200      	movs	r2, #0
 81029f6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 81029f8:	7dfb      	ldrb	r3, [r7, #23]
}
 81029fa:	4618      	mov	r0, r3
 81029fc:	3718      	adds	r7, #24
 81029fe:	46bd      	mov	sp, r7
 8102a00:	bd80      	pop	{r7, pc}
 8102a02:	bf00      	nop
 8102a04:	20000028 	.word	0x20000028
 8102a08:	40022028 	.word	0x40022028

08102a0c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8102a0c:	b480      	push	{r7}
 8102a0e:	b083      	sub	sp, #12
 8102a10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8102a12:	2300      	movs	r3, #0
 8102a14:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8102a16:	4b0b      	ldr	r3, [pc, #44]	@ (8102a44 <HAL_FLASH_Unlock+0x38>)
 8102a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	da0b      	bge.n	8102a36 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY1);
 8102a1e:	4b09      	ldr	r3, [pc, #36]	@ (8102a44 <HAL_FLASH_Unlock+0x38>)
 8102a20:	4a09      	ldr	r2, [pc, #36]	@ (8102a48 <HAL_FLASH_Unlock+0x3c>)
 8102a22:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->NSKEYR, FLASH_KEY2);
 8102a24:	4b07      	ldr	r3, [pc, #28]	@ (8102a44 <HAL_FLASH_Unlock+0x38>)
 8102a26:	4a09      	ldr	r2, [pc, #36]	@ (8102a4c <HAL_FLASH_Unlock+0x40>)
 8102a28:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8102a2a:	4b06      	ldr	r3, [pc, #24]	@ (8102a44 <HAL_FLASH_Unlock+0x38>)
 8102a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a2e:	2b00      	cmp	r3, #0
 8102a30:	da01      	bge.n	8102a36 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8102a32:	2301      	movs	r3, #1
 8102a34:	71fb      	strb	r3, [r7, #7]
      }
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8102a36:	79fb      	ldrb	r3, [r7, #7]
}
 8102a38:	4618      	mov	r0, r3
 8102a3a:	370c      	adds	r7, #12
 8102a3c:	46bd      	mov	sp, r7
 8102a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a42:	4770      	bx	lr
 8102a44:	40022000 	.word	0x40022000
 8102a48:	45670123 	.word	0x45670123
 8102a4c:	cdef89ab 	.word	0xcdef89ab

08102a50 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8102a50:	b480      	push	{r7}
 8102a52:	b083      	sub	sp, #12
 8102a54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8102a56:	2301      	movs	r3, #1
 8102a58:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->NSCR, FLASH_NSCR_LOCK);
 8102a5a:	4b09      	ldr	r3, [pc, #36]	@ (8102a80 <HAL_FLASH_Lock+0x30>)
 8102a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a5e:	4a08      	ldr	r2, [pc, #32]	@ (8102a80 <HAL_FLASH_Lock+0x30>)
 8102a60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8102a64:	6293      	str	r3, [r2, #40]	@ 0x28

  /* verify Flash is locked */
  if (READ_BIT(FLASH->NSCR, FLASH_NSCR_LOCK) != 0U)
 8102a66:	4b06      	ldr	r3, [pc, #24]	@ (8102a80 <HAL_FLASH_Lock+0x30>)
 8102a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102a6a:	2b00      	cmp	r3, #0
 8102a6c:	da01      	bge.n	8102a72 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8102a6e:	2300      	movs	r3, #0
 8102a70:	71fb      	strb	r3, [r7, #7]
      status = HAL_OK;
    }
  }
#endif /* __ARM_FEATURE_CMSE */

  return status;
 8102a72:	79fb      	ldrb	r3, [r7, #7]
}
 8102a74:	4618      	mov	r0, r3
 8102a76:	370c      	adds	r7, #12
 8102a78:	46bd      	mov	sp, r7
 8102a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7e:	4770      	bx	lr
 8102a80:	40022000 	.word	0x40022000

08102a84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8102a84:	b580      	push	{r7, lr}
 8102a86:	b086      	sub	sp, #24
 8102a88:	af00      	add	r7, sp, #0
 8102a8a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY and WDW flags to be reset.
     Even if the FLASH operation fails, the BUSY & WDW flags will be reset, and an error flag will be set */

  uint32_t timeout = HAL_GetTick() + Timeout;
 8102a8c:	f7fe ff1a 	bl	81018c4 <HAL_GetTick>
 8102a90:	4602      	mov	r2, r0
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	4413      	add	r3, r2
 8102a96:	617b      	str	r3, [r7, #20]
  uint32_t error;
  __IO uint32_t *reg_sr;

  /* Access to SECSR or NSSR registers depends on operation type */
  reg_sr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECSR) : &(FLASH_NS->NSSR);
 8102a98:	4b1b      	ldr	r3, [pc, #108]	@ (8102b08 <FLASH_WaitForLastOperation+0x84>)
 8102a9a:	613b      	str	r3, [r7, #16]

  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8102a9c:	e00b      	b.n	8102ab6 <FLASH_WaitForLastOperation+0x32>
  {
    if (Timeout != HAL_MAX_DELAY)
 8102a9e:	687b      	ldr	r3, [r7, #4]
 8102aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102aa4:	d007      	beq.n	8102ab6 <FLASH_WaitForLastOperation+0x32>
    {
      if (HAL_GetTick() >= timeout)
 8102aa6:	f7fe ff0d 	bl	81018c4 <HAL_GetTick>
 8102aaa:	4602      	mov	r2, r0
 8102aac:	697b      	ldr	r3, [r7, #20]
 8102aae:	4293      	cmp	r3, r2
 8102ab0:	d801      	bhi.n	8102ab6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8102ab2:	2303      	movs	r3, #3
 8102ab4:	e023      	b.n	8102afe <FLASH_WaitForLastOperation+0x7a>
  while (((*reg_sr) & (FLASH_FLAG_BSY | FLASH_FLAG_WDW)) != 0U)
 8102ab6:	693b      	ldr	r3, [r7, #16]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	d1ed      	bne.n	8102a9e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH operation error flags */
  error = ((*reg_sr) & FLASH_FLAG_SR_ERRORS);
 8102ac2:	693b      	ldr	r3, [r7, #16]
 8102ac4:	681a      	ldr	r2, [r3, #0]
 8102ac6:	f242 03fa 	movw	r3, #8442	@ 0x20fa
 8102aca:	4013      	ands	r3, r2
 8102acc:	60fb      	str	r3, [r7, #12]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  error |= (FLASH->NSSR & FLASH_FLAG_OPTWERR);
#endif /* __ARM_FEATURE_CMSE */

  if (error != 0U)
 8102ace:	68fb      	ldr	r3, [r7, #12]
 8102ad0:	2b00      	cmp	r3, #0
 8102ad2:	d00a      	beq.n	8102aea <FLASH_WaitForLastOperation+0x66>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8102ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8102b0c <FLASH_WaitForLastOperation+0x88>)
 8102ad6:	685a      	ldr	r2, [r3, #4]
 8102ad8:	68fb      	ldr	r3, [r7, #12]
 8102ada:	4313      	orrs	r3, r2
 8102adc:	4a0b      	ldr	r2, [pc, #44]	@ (8102b0c <FLASH_WaitForLastOperation+0x88>)
 8102ade:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    (*reg_sr) = error;
 8102ae0:	693b      	ldr	r3, [r7, #16]
 8102ae2:	68fa      	ldr	r2, [r7, #12]
 8102ae4:	601a      	str	r2, [r3, #0]
    {
      FLASH->NSSR = FLASH_FLAG_OPTWERR;
    }
#endif /* __ARM_FEATURE_CMSE */

    return HAL_ERROR;
 8102ae6:	2301      	movs	r3, #1
 8102ae8:	e009      	b.n	8102afe <FLASH_WaitForLastOperation+0x7a>
  }

  /* Check FLASH End of Operation flag  */
  if (((*reg_sr) & FLASH_FLAG_EOP) != 0U)
 8102aea:	693b      	ldr	r3, [r7, #16]
 8102aec:	681b      	ldr	r3, [r3, #0]
 8102aee:	f003 0301 	and.w	r3, r3, #1
 8102af2:	2b00      	cmp	r3, #0
 8102af4:	d002      	beq.n	8102afc <FLASH_WaitForLastOperation+0x78>
  {
    /* Clear FLASH End of Operation pending bit */
    (*reg_sr) = FLASH_FLAG_EOP;
 8102af6:	693b      	ldr	r3, [r7, #16]
 8102af8:	2201      	movs	r2, #1
 8102afa:	601a      	str	r2, [r3, #0]
  }

  /* If there is no error flag set */
  return HAL_OK;
 8102afc:	2300      	movs	r3, #0
}
 8102afe:	4618      	mov	r0, r3
 8102b00:	3718      	adds	r7, #24
 8102b02:	46bd      	mov	sp, r7
 8102b04:	bd80      	pop	{r7, pc}
 8102b06:	bf00      	nop
 8102b08:	40022020 	.word	0x40022020
 8102b0c:	20000028 	.word	0x20000028

08102b10 <FLASH_Program_QuadWord>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address of data to be programmed.
  * @retval None
  */
static void FLASH_Program_QuadWord(uint32_t Address, uint32_t DataAddress)
{
 8102b10:	b480      	push	{r7}
 8102b12:	b08b      	sub	sp, #44	@ 0x2c
 8102b14:	af00      	add	r7, sp, #0
 8102b16:	6078      	str	r0, [r7, #4]
 8102b18:	6039      	str	r1, [r7, #0]
  uint8_t index = 4;
 8102b1a:	2304      	movs	r3, #4
 8102b1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8102b20:	687b      	ldr	r3, [r7, #4]
 8102b22:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
 8102b24:	683b      	ldr	r3, [r7, #0]
 8102b26:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8102b28:	4b16      	ldr	r3, [pc, #88]	@ (8102b84 <FLASH_Program_QuadWord+0x74>)
 8102b2a:	61bb      	str	r3, [r7, #24]

  /* Set PG bit */
  SET_BIT((*reg_cr), FLASH_NSCR_PG);
 8102b2c:	69bb      	ldr	r3, [r7, #24]
 8102b2e:	681b      	ldr	r3, [r3, #0]
 8102b30:	f043 0201 	orr.w	r2, r3, #1
 8102b34:	69bb      	ldr	r3, [r7, #24]
 8102b36:	601a      	str	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8102b38:	f3ef 8310 	mrs	r3, PRIMASK
 8102b3c:	613b      	str	r3, [r7, #16]
  return(result);
 8102b3e:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8102b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8102b42:	b672      	cpsid	i
}
 8102b44:	bf00      	nop
  __disable_irq();

  /* Program the quad-word */
  do
  {
    *dest_addr = *src_addr;
 8102b46:	69fb      	ldr	r3, [r7, #28]
 8102b48:	681a      	ldr	r2, [r3, #0]
 8102b4a:	6a3b      	ldr	r3, [r7, #32]
 8102b4c:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8102b4e:	6a3b      	ldr	r3, [r7, #32]
 8102b50:	3304      	adds	r3, #4
 8102b52:	623b      	str	r3, [r7, #32]
    src_addr++;
 8102b54:	69fb      	ldr	r3, [r7, #28]
 8102b56:	3304      	adds	r3, #4
 8102b58:	61fb      	str	r3, [r7, #28]
    index--;
 8102b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102b5e:	3b01      	subs	r3, #1
 8102b60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (index != 0U);
 8102b64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102b68:	2b00      	cmp	r3, #0
 8102b6a:	d1ec      	bne.n	8102b46 <FLASH_Program_QuadWord+0x36>
 8102b6c:	697b      	ldr	r3, [r7, #20]
 8102b6e:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8102b70:	68fb      	ldr	r3, [r7, #12]
 8102b72:	f383 8810 	msr	PRIMASK, r3
}
 8102b76:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8102b78:	bf00      	nop
 8102b7a:	372c      	adds	r7, #44	@ 0x2c
 8102b7c:	46bd      	mov	sp, r7
 8102b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b82:	4770      	bx	lr
 8102b84:	40022028 	.word	0x40022028

08102b88 <FLASH_Program_Burst>:
  * @param  Address: specifies the address to be programmed.
  * @param  DataAddress: specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
 8102b88:	b480      	push	{r7}
 8102b8a:	b08b      	sub	sp, #44	@ 0x2c
 8102b8c:	af00      	add	r7, sp, #0
 8102b8e:	6078      	str	r0, [r7, #4]
 8102b90:	6039      	str	r1, [r7, #0]
  uint8_t burst_index = FLASH_NB_WORDS_IN_BURST;
 8102b92:	2320      	movs	r3, #32
 8102b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t *dest_addr = (uint32_t *)Address;
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	623b      	str	r3, [r7, #32]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8102b9c:	683b      	ldr	r3, [r7, #0]
 8102b9e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8102ba0:	4b17      	ldr	r3, [pc, #92]	@ (8102c00 <FLASH_Program_Burst+0x78>)
 8102ba2:	61bb      	str	r3, [r7, #24]

  /* Set PG and BWR bits */
  SET_BIT((*reg_cr), (FLASH_NSCR_PG | FLASH_NSCR_BWR));
 8102ba4:	69bb      	ldr	r3, [r7, #24]
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102bac:	f043 0301 	orr.w	r3, r3, #1
 8102bb0:	69ba      	ldr	r2, [r7, #24]
 8102bb2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8102bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8102bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8102bba:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8102bbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8102bbe:	b672      	cpsid	i
}
 8102bc0:	bf00      	nop
  __disable_irq();

  /* Program the burst */
  do
  {
    *dest_addr = *src_addr;
 8102bc2:	69fb      	ldr	r3, [r7, #28]
 8102bc4:	681a      	ldr	r2, [r3, #0]
 8102bc6:	6a3b      	ldr	r3, [r7, #32]
 8102bc8:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8102bca:	6a3b      	ldr	r3, [r7, #32]
 8102bcc:	3304      	adds	r3, #4
 8102bce:	623b      	str	r3, [r7, #32]
    src_addr++;
 8102bd0:	69fb      	ldr	r3, [r7, #28]
 8102bd2:	3304      	adds	r3, #4
 8102bd4:	61fb      	str	r3, [r7, #28]
    burst_index--;
 8102bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102bda:	3b01      	subs	r3, #1
 8102bdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  } while (burst_index != 0U);
 8102be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8102be4:	2b00      	cmp	r3, #0
 8102be6:	d1ec      	bne.n	8102bc2 <FLASH_Program_Burst+0x3a>
 8102be8:	697b      	ldr	r3, [r7, #20]
 8102bea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8102bec:	68fb      	ldr	r3, [r7, #12]
 8102bee:	f383 8810 	msr	PRIMASK, r3
}
 8102bf2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8102bf4:	bf00      	nop
 8102bf6:	372c      	adds	r7, #44	@ 0x2c
 8102bf8:	46bd      	mov	sp, r7
 8102bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfe:	4770      	bx	lr
 8102c00:	40022028 	.word	0x40022028

08102c04 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased).
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8102c04:	b580      	push	{r7, lr}
 8102c06:	b086      	sub	sp, #24
 8102c08:	af00      	add	r7, sp, #0
 8102c0a:	6078      	str	r0, [r7, #4]
 8102c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8102c0e:	4b33      	ldr	r3, [pc, #204]	@ (8102cdc <HAL_FLASHEx_Erase+0xd8>)
 8102c10:	781b      	ldrb	r3, [r3, #0]
 8102c12:	2b01      	cmp	r3, #1
 8102c14:	d101      	bne.n	8102c1a <HAL_FLASHEx_Erase+0x16>
 8102c16:	2302      	movs	r3, #2
 8102c18:	e05c      	b.n	8102cd4 <HAL_FLASHEx_Erase+0xd0>
 8102c1a:	4b30      	ldr	r3, [pc, #192]	@ (8102cdc <HAL_FLASHEx_Erase+0xd8>)
 8102c1c:	2201      	movs	r2, #1
 8102c1e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8102c20:	4b2e      	ldr	r3, [pc, #184]	@ (8102cdc <HAL_FLASHEx_Erase+0xd8>)
 8102c22:	2200      	movs	r2, #0
 8102c24:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8102c26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8102c2a:	f7ff ff2b 	bl	8102a84 <FLASH_WaitForLastOperation>
 8102c2e:	4603      	mov	r3, r0
 8102c30:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8102c32:	7dfb      	ldrb	r3, [r7, #23]
 8102c34:	2b00      	cmp	r3, #0
 8102c36:	d149      	bne.n	8102ccc <HAL_FLASHEx_Erase+0xc8>
  {
    /* Current operation type */
    pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8102c38:	687b      	ldr	r3, [r7, #4]
 8102c3a:	681b      	ldr	r3, [r3, #0]
 8102c3c:	4a27      	ldr	r2, [pc, #156]	@ (8102cdc <HAL_FLASHEx_Erase+0xd8>)
 8102c3e:	6093      	str	r3, [r2, #8]

    /* Access to SECCR or NSCR depends on operation type */
    reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH->NSCR);
 8102c40:	4b27      	ldr	r3, [pc, #156]	@ (8102ce0 <HAL_FLASHEx_Erase+0xdc>)
 8102c42:	60fb      	str	r3, [r7, #12]

    if ((pEraseInit->TypeErase & (~FLASH_NON_SECURE_MASK)) == FLASH_TYPEERASE_MASSERASE)
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	681b      	ldr	r3, [r3, #0]
 8102c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102c4c:	f248 0204 	movw	r2, #32772	@ 0x8004
 8102c50:	4293      	cmp	r3, r2
 8102c52:	d10b      	bne.n	8102c6c <HAL_FLASHEx_Erase+0x68>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	685b      	ldr	r3, [r3, #4]
 8102c58:	4618      	mov	r0, r3
 8102c5a:	f000 f843 	bl	8102ce4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8102c5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8102c62:	f7ff ff0f 	bl	8102a84 <FLASH_WaitForLastOperation>
 8102c66:	4603      	mov	r3, r0
 8102c68:	75fb      	strb	r3, [r7, #23]
 8102c6a:	e025      	b.n	8102cb8 <HAL_FLASHEx_Erase+0xb4>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8102c6c:	683b      	ldr	r3, [r7, #0]
 8102c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8102c72:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	689b      	ldr	r3, [r3, #8]
 8102c78:	613b      	str	r3, [r7, #16]
 8102c7a:	e015      	b.n	8102ca8 <HAL_FLASHEx_Erase+0xa4>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	685b      	ldr	r3, [r3, #4]
 8102c80:	4619      	mov	r1, r3
 8102c82:	6938      	ldr	r0, [r7, #16]
 8102c84:	f000 f854 	bl	8102d30 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8102c88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8102c8c:	f7ff fefa 	bl	8102a84 <FLASH_WaitForLastOperation>
 8102c90:	4603      	mov	r3, r0
 8102c92:	75fb      	strb	r3, [r7, #23]

        if (status != HAL_OK)
 8102c94:	7dfb      	ldrb	r3, [r7, #23]
 8102c96:	2b00      	cmp	r3, #0
 8102c98:	d003      	beq.n	8102ca2 <HAL_FLASHEx_Erase+0x9e>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8102c9a:	683b      	ldr	r3, [r7, #0]
 8102c9c:	693a      	ldr	r2, [r7, #16]
 8102c9e:	601a      	str	r2, [r3, #0]
          break;
 8102ca0:	e00a      	b.n	8102cb8 <HAL_FLASHEx_Erase+0xb4>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8102ca2:	693b      	ldr	r3, [r7, #16]
 8102ca4:	3301      	adds	r3, #1
 8102ca6:	613b      	str	r3, [r7, #16]
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	689a      	ldr	r2, [r3, #8]
 8102cac:	687b      	ldr	r3, [r7, #4]
 8102cae:	68db      	ldr	r3, [r3, #12]
 8102cb0:	4413      	add	r3, r2
 8102cb2:	693a      	ldr	r2, [r7, #16]
 8102cb4:	429a      	cmp	r2, r3
 8102cb6:	d3e1      	bcc.n	8102c7c <HAL_FLASHEx_Erase+0x78>
        }
      }
    }

    /* If the erase operation is completed, disable the associated bits */
    CLEAR_BIT((*reg_cr), (pEraseInit->TypeErase) & (~(FLASH_NON_SECURE_MASK)));
 8102cb8:	68fb      	ldr	r3, [r7, #12]
 8102cba:	681a      	ldr	r2, [r3, #0]
 8102cbc:	687b      	ldr	r3, [r7, #4]
 8102cbe:	681b      	ldr	r3, [r3, #0]
 8102cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8102cc4:	43db      	mvns	r3, r3
 8102cc6:	401a      	ands	r2, r3
 8102cc8:	68fb      	ldr	r3, [r7, #12]
 8102cca:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8102ccc:	4b03      	ldr	r3, [pc, #12]	@ (8102cdc <HAL_FLASHEx_Erase+0xd8>)
 8102cce:	2200      	movs	r2, #0
 8102cd0:	701a      	strb	r2, [r3, #0]

  return status;
 8102cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8102cd4:	4618      	mov	r0, r3
 8102cd6:	3718      	adds	r7, #24
 8102cd8:	46bd      	mov	sp, r7
 8102cda:	bd80      	pop	{r7, pc}
 8102cdc:	20000028 	.word	0x20000028
 8102ce0:	40022028 	.word	0x40022028

08102ce4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8102ce4:	b480      	push	{r7}
 8102ce6:	b085      	sub	sp, #20
 8102ce8:	af00      	add	r7, sp, #0
 8102cea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8102cec:	4b0f      	ldr	r3, [pc, #60]	@ (8102d2c <FLASH_MassErase+0x48>)
 8102cee:	60fb      	str	r3, [r7, #12]

  /* Set the Mass Erase Bit for the bank 1 and proceed to erase */
  if ((Banks & FLASH_BANK_1) != 0U)
 8102cf0:	687b      	ldr	r3, [r7, #4]
 8102cf2:	f003 0301 	and.w	r3, r3, #1
 8102cf6:	2b00      	cmp	r3, #0
 8102cf8:	d007      	beq.n	8102d0a <FLASH_MassErase+0x26>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER1 | FLASH_NSCR_STRT);
 8102cfa:	68fb      	ldr	r3, [r7, #12]
 8102cfc:	681b      	ldr	r3, [r3, #0]
 8102cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102d02:	f043 0304 	orr.w	r3, r3, #4
 8102d06:	68fa      	ldr	r2, [r7, #12]
 8102d08:	6013      	str	r3, [r2, #0]
  }

  /* Set the Mass Erase Bit for the bank 2 and proceed to erase */
  if ((Banks & FLASH_BANK_2) != 0U)
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	f003 0302 	and.w	r3, r3, #2
 8102d10:	2b00      	cmp	r3, #0
 8102d12:	d005      	beq.n	8102d20 <FLASH_MassErase+0x3c>
  {
    SET_BIT((*reg_cr), FLASH_NSCR_MER2 | FLASH_NSCR_STRT);
 8102d14:	68fb      	ldr	r3, [r7, #12]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	f443 32c0 	orr.w	r2, r3, #98304	@ 0x18000
 8102d1c:	68fb      	ldr	r3, [r7, #12]
 8102d1e:	601a      	str	r2, [r3, #0]
  }
}
 8102d20:	bf00      	nop
 8102d22:	3714      	adds	r7, #20
 8102d24:	46bd      	mov	sp, r7
 8102d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d2a:	4770      	bx	lr
 8102d2c:	40022028 	.word	0x40022028

08102d30 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8102d30:	b480      	push	{r7}
 8102d32:	b085      	sub	sp, #20
 8102d34:	af00      	add	r7, sp, #0
 8102d36:	6078      	str	r0, [r7, #4]
 8102d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
  assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

  /* Access to SECCR or NSCR registers depends on operation type */
  reg_cr = IS_FLASH_SECURE_OPERATION() ? &(FLASH->SECCR) : &(FLASH_NS->NSCR);
 8102d3a:	4b14      	ldr	r3, [pc, #80]	@ (8102d8c <FLASH_PageErase+0x5c>)
 8102d3c:	60fb      	str	r3, [r7, #12]

  if ((Banks & FLASH_BANK_1) != 0U)
 8102d3e:	683b      	ldr	r3, [r7, #0]
 8102d40:	f003 0301 	and.w	r3, r3, #1
 8102d44:	2b00      	cmp	r3, #0
 8102d46:	d006      	beq.n	8102d56 <FLASH_PageErase+0x26>
  {
    CLEAR_BIT((*reg_cr), FLASH_NSCR_BKER);
 8102d48:	68fb      	ldr	r3, [r7, #12]
 8102d4a:	681b      	ldr	r3, [r3, #0]
 8102d4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8102d50:	68fb      	ldr	r3, [r7, #12]
 8102d52:	601a      	str	r2, [r3, #0]
 8102d54:	e005      	b.n	8102d62 <FLASH_PageErase+0x32>
  }
  else
  {
    SET_BIT((*reg_cr), FLASH_NSCR_BKER);
 8102d56:	68fb      	ldr	r3, [r7, #12]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8102d5e:	68fb      	ldr	r3, [r7, #12]
 8102d60:	601a      	str	r2, [r3, #0]
  }

  /* Proceed to erase the page */
  MODIFY_REG((*reg_cr), (FLASH_NSCR_PNB | FLASH_NSCR_PER | FLASH_NSCR_STRT), \
 8102d62:	68fb      	ldr	r3, [r7, #12]
 8102d64:	681b      	ldr	r3, [r3, #0]
 8102d66:	f423 3381 	bic.w	r3, r3, #66048	@ 0x10200
 8102d6a:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8102d6e:	687a      	ldr	r2, [r7, #4]
 8102d70:	00d2      	lsls	r2, r2, #3
 8102d72:	4313      	orrs	r3, r2
 8102d74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102d78:	f043 0302 	orr.w	r3, r3, #2
 8102d7c:	68fa      	ldr	r2, [r7, #12]
 8102d7e:	6013      	str	r3, [r2, #0]
             ((Page << FLASH_NSCR_PNB_Pos) | FLASH_NSCR_PER | FLASH_NSCR_STRT));
}
 8102d80:	bf00      	nop
 8102d82:	3714      	adds	r7, #20
 8102d84:	46bd      	mov	sp, r7
 8102d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d8a:	4770      	bx	lr
 8102d8c:	40022028 	.word	0x40022028

08102d90 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8102d90:	b480      	push	{r7}
 8102d92:	b089      	sub	sp, #36	@ 0x24
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	6078      	str	r0, [r7, #4]
 8102d98:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8102d9a:	2300      	movs	r3, #0
 8102d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8102d9e:	687b      	ldr	r3, [r7, #4]
 8102da0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8102da2:	e1ba      	b.n	810311a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8102da4:	683b      	ldr	r3, [r7, #0]
 8102da6:	681a      	ldr	r2, [r3, #0]
 8102da8:	2101      	movs	r1, #1
 8102daa:	697b      	ldr	r3, [r7, #20]
 8102dac:	fa01 f303 	lsl.w	r3, r1, r3
 8102db0:	4013      	ands	r3, r2
 8102db2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8102db4:	697b      	ldr	r3, [r7, #20]
 8102db6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8102db8:	68fb      	ldr	r3, [r7, #12]
 8102dba:	2b00      	cmp	r3, #0
 8102dbc:	f000 81aa 	beq.w	8103114 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	4a55      	ldr	r2, [pc, #340]	@ (8102f18 <HAL_GPIO_Init+0x188>)
 8102dc4:	4293      	cmp	r3, r2
 8102dc6:	d15d      	bne.n	8102e84 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	681b      	ldr	r3, [r3, #0]
 8102dcc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8102dce:	2201      	movs	r2, #1
 8102dd0:	697b      	ldr	r3, [r7, #20]
 8102dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8102dd6:	43db      	mvns	r3, r3
 8102dd8:	69fa      	ldr	r2, [r7, #28]
 8102dda:	4013      	ands	r3, r2
 8102ddc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8102dde:	683b      	ldr	r3, [r7, #0]
 8102de0:	685b      	ldr	r3, [r3, #4]
 8102de2:	f003 0201 	and.w	r2, r3, #1
 8102de6:	697b      	ldr	r3, [r7, #20]
 8102de8:	fa02 f303 	lsl.w	r3, r2, r3
 8102dec:	69fa      	ldr	r2, [r7, #28]
 8102dee:	4313      	orrs	r3, r2
 8102df0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	69fa      	ldr	r2, [r7, #28]
 8102df6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8102df8:	4a48      	ldr	r2, [pc, #288]	@ (8102f1c <HAL_GPIO_Init+0x18c>)
 8102dfa:	697b      	ldr	r3, [r7, #20]
 8102dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8102e00:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8102e02:	4a46      	ldr	r2, [pc, #280]	@ (8102f1c <HAL_GPIO_Init+0x18c>)
 8102e04:	697b      	ldr	r3, [r7, #20]
 8102e06:	00db      	lsls	r3, r3, #3
 8102e08:	4413      	add	r3, r2
 8102e0a:	685b      	ldr	r3, [r3, #4]
 8102e0c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8102e0e:	69bb      	ldr	r3, [r7, #24]
 8102e10:	08da      	lsrs	r2, r3, #3
 8102e12:	693b      	ldr	r3, [r7, #16]
 8102e14:	3208      	adds	r2, #8
 8102e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102e1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8102e1c:	69bb      	ldr	r3, [r7, #24]
 8102e1e:	f003 0307 	and.w	r3, r3, #7
 8102e22:	009b      	lsls	r3, r3, #2
 8102e24:	220f      	movs	r2, #15
 8102e26:	fa02 f303 	lsl.w	r3, r2, r3
 8102e2a:	43db      	mvns	r3, r3
 8102e2c:	69fa      	ldr	r2, [r7, #28]
 8102e2e:	4013      	ands	r3, r2
 8102e30:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8102e32:	69bb      	ldr	r3, [r7, #24]
 8102e34:	f003 0307 	and.w	r3, r3, #7
 8102e38:	009b      	lsls	r3, r3, #2
 8102e3a:	220b      	movs	r2, #11
 8102e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8102e40:	69fa      	ldr	r2, [r7, #28]
 8102e42:	4313      	orrs	r3, r2
 8102e44:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8102e46:	69bb      	ldr	r3, [r7, #24]
 8102e48:	08da      	lsrs	r2, r3, #3
 8102e4a:	693b      	ldr	r3, [r7, #16]
 8102e4c:	3208      	adds	r2, #8
 8102e4e:	69f9      	ldr	r1, [r7, #28]
 8102e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8102e54:	693b      	ldr	r3, [r7, #16]
 8102e56:	681b      	ldr	r3, [r3, #0]
 8102e58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8102e5a:	69bb      	ldr	r3, [r7, #24]
 8102e5c:	005b      	lsls	r3, r3, #1
 8102e5e:	2203      	movs	r2, #3
 8102e60:	fa02 f303 	lsl.w	r3, r2, r3
 8102e64:	43db      	mvns	r3, r3
 8102e66:	69fa      	ldr	r2, [r7, #28]
 8102e68:	4013      	ands	r3, r2
 8102e6a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8102e6c:	69bb      	ldr	r3, [r7, #24]
 8102e6e:	005b      	lsls	r3, r3, #1
 8102e70:	2202      	movs	r2, #2
 8102e72:	fa02 f303 	lsl.w	r3, r2, r3
 8102e76:	69fa      	ldr	r2, [r7, #28]
 8102e78:	4313      	orrs	r3, r2
 8102e7a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8102e7c:	693b      	ldr	r3, [r7, #16]
 8102e7e:	69fa      	ldr	r2, [r7, #28]
 8102e80:	601a      	str	r2, [r3, #0]
 8102e82:	e067      	b.n	8102f54 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102e84:	683b      	ldr	r3, [r7, #0]
 8102e86:	685b      	ldr	r3, [r3, #4]
 8102e88:	2b02      	cmp	r3, #2
 8102e8a:	d003      	beq.n	8102e94 <HAL_GPIO_Init+0x104>
 8102e8c:	683b      	ldr	r3, [r7, #0]
 8102e8e:	685b      	ldr	r3, [r3, #4]
 8102e90:	2b12      	cmp	r3, #18
 8102e92:	d145      	bne.n	8102f20 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8102e94:	697b      	ldr	r3, [r7, #20]
 8102e96:	08da      	lsrs	r2, r3, #3
 8102e98:	687b      	ldr	r3, [r7, #4]
 8102e9a:	3208      	adds	r2, #8
 8102e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102ea0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8102ea2:	697b      	ldr	r3, [r7, #20]
 8102ea4:	f003 0307 	and.w	r3, r3, #7
 8102ea8:	009b      	lsls	r3, r3, #2
 8102eaa:	220f      	movs	r2, #15
 8102eac:	fa02 f303 	lsl.w	r3, r2, r3
 8102eb0:	43db      	mvns	r3, r3
 8102eb2:	69fa      	ldr	r2, [r7, #28]
 8102eb4:	4013      	ands	r3, r2
 8102eb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8102eb8:	683b      	ldr	r3, [r7, #0]
 8102eba:	691b      	ldr	r3, [r3, #16]
 8102ebc:	f003 020f 	and.w	r2, r3, #15
 8102ec0:	697b      	ldr	r3, [r7, #20]
 8102ec2:	f003 0307 	and.w	r3, r3, #7
 8102ec6:	009b      	lsls	r3, r3, #2
 8102ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8102ecc:	69fa      	ldr	r2, [r7, #28]
 8102ece:	4313      	orrs	r3, r2
 8102ed0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8102ed2:	697b      	ldr	r3, [r7, #20]
 8102ed4:	08da      	lsrs	r2, r3, #3
 8102ed6:	687b      	ldr	r3, [r7, #4]
 8102ed8:	3208      	adds	r2, #8
 8102eda:	69f9      	ldr	r1, [r7, #28]
 8102edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8102ee0:	693b      	ldr	r3, [r7, #16]
 8102ee2:	681b      	ldr	r3, [r3, #0]
 8102ee4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8102ee6:	69bb      	ldr	r3, [r7, #24]
 8102ee8:	005b      	lsls	r3, r3, #1
 8102eea:	2203      	movs	r2, #3
 8102eec:	fa02 f303 	lsl.w	r3, r2, r3
 8102ef0:	43db      	mvns	r3, r3
 8102ef2:	69fa      	ldr	r2, [r7, #28]
 8102ef4:	4013      	ands	r3, r2
 8102ef6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8102ef8:	683b      	ldr	r3, [r7, #0]
 8102efa:	685b      	ldr	r3, [r3, #4]
 8102efc:	f003 0203 	and.w	r2, r3, #3
 8102f00:	69bb      	ldr	r3, [r7, #24]
 8102f02:	005b      	lsls	r3, r3, #1
 8102f04:	fa02 f303 	lsl.w	r3, r2, r3
 8102f08:	69fa      	ldr	r2, [r7, #28]
 8102f0a:	4313      	orrs	r3, r2
 8102f0c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8102f0e:	693b      	ldr	r3, [r7, #16]
 8102f10:	69fa      	ldr	r2, [r7, #28]
 8102f12:	601a      	str	r2, [r3, #0]
 8102f14:	e01e      	b.n	8102f54 <HAL_GPIO_Init+0x1c4>
 8102f16:	bf00      	nop
 8102f18:	46020000 	.word	0x46020000
 8102f1c:	0810935c 	.word	0x0810935c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8102f20:	693b      	ldr	r3, [r7, #16]
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8102f26:	69bb      	ldr	r3, [r7, #24]
 8102f28:	005b      	lsls	r3, r3, #1
 8102f2a:	2203      	movs	r2, #3
 8102f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8102f30:	43db      	mvns	r3, r3
 8102f32:	69fa      	ldr	r2, [r7, #28]
 8102f34:	4013      	ands	r3, r2
 8102f36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8102f38:	683b      	ldr	r3, [r7, #0]
 8102f3a:	685b      	ldr	r3, [r3, #4]
 8102f3c:	f003 0203 	and.w	r2, r3, #3
 8102f40:	69bb      	ldr	r3, [r7, #24]
 8102f42:	005b      	lsls	r3, r3, #1
 8102f44:	fa02 f303 	lsl.w	r3, r2, r3
 8102f48:	69fa      	ldr	r2, [r7, #28]
 8102f4a:	4313      	orrs	r3, r2
 8102f4c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8102f4e:	693b      	ldr	r3, [r7, #16]
 8102f50:	69fa      	ldr	r2, [r7, #28]
 8102f52:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102f54:	683b      	ldr	r3, [r7, #0]
 8102f56:	685b      	ldr	r3, [r3, #4]
 8102f58:	2b01      	cmp	r3, #1
 8102f5a:	d00b      	beq.n	8102f74 <HAL_GPIO_Init+0x1e4>
 8102f5c:	683b      	ldr	r3, [r7, #0]
 8102f5e:	685b      	ldr	r3, [r3, #4]
 8102f60:	2b02      	cmp	r3, #2
 8102f62:	d007      	beq.n	8102f74 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102f64:	683b      	ldr	r3, [r7, #0]
 8102f66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102f68:	2b11      	cmp	r3, #17
 8102f6a:	d003      	beq.n	8102f74 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102f6c:	683b      	ldr	r3, [r7, #0]
 8102f6e:	685b      	ldr	r3, [r3, #4]
 8102f70:	2b12      	cmp	r3, #18
 8102f72:	d130      	bne.n	8102fd6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8102f74:	693b      	ldr	r3, [r7, #16]
 8102f76:	689b      	ldr	r3, [r3, #8]
 8102f78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8102f7a:	69bb      	ldr	r3, [r7, #24]
 8102f7c:	005b      	lsls	r3, r3, #1
 8102f7e:	2203      	movs	r2, #3
 8102f80:	fa02 f303 	lsl.w	r3, r2, r3
 8102f84:	43db      	mvns	r3, r3
 8102f86:	69fa      	ldr	r2, [r7, #28]
 8102f88:	4013      	ands	r3, r2
 8102f8a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8102f8c:	683b      	ldr	r3, [r7, #0]
 8102f8e:	68da      	ldr	r2, [r3, #12]
 8102f90:	69bb      	ldr	r3, [r7, #24]
 8102f92:	005b      	lsls	r3, r3, #1
 8102f94:	fa02 f303 	lsl.w	r3, r2, r3
 8102f98:	69fa      	ldr	r2, [r7, #28]
 8102f9a:	4313      	orrs	r3, r2
 8102f9c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8102f9e:	693b      	ldr	r3, [r7, #16]
 8102fa0:	69fa      	ldr	r2, [r7, #28]
 8102fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8102fa4:	693b      	ldr	r3, [r7, #16]
 8102fa6:	685b      	ldr	r3, [r3, #4]
 8102fa8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8102faa:	2201      	movs	r2, #1
 8102fac:	69bb      	ldr	r3, [r7, #24]
 8102fae:	fa02 f303 	lsl.w	r3, r2, r3
 8102fb2:	43db      	mvns	r3, r3
 8102fb4:	69fa      	ldr	r2, [r7, #28]
 8102fb6:	4013      	ands	r3, r2
 8102fb8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8102fba:	683b      	ldr	r3, [r7, #0]
 8102fbc:	685b      	ldr	r3, [r3, #4]
 8102fbe:	091b      	lsrs	r3, r3, #4
 8102fc0:	f003 0201 	and.w	r2, r3, #1
 8102fc4:	69bb      	ldr	r3, [r7, #24]
 8102fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8102fca:	69fa      	ldr	r2, [r7, #28]
 8102fcc:	4313      	orrs	r3, r2
 8102fce:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8102fd0:	693b      	ldr	r3, [r7, #16]
 8102fd2:	69fa      	ldr	r2, [r7, #28]
 8102fd4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8102fd6:	683b      	ldr	r3, [r7, #0]
 8102fd8:	685b      	ldr	r3, [r3, #4]
 8102fda:	2b03      	cmp	r3, #3
 8102fdc:	d017      	beq.n	810300e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8102fde:	693b      	ldr	r3, [r7, #16]
 8102fe0:	68db      	ldr	r3, [r3, #12]
 8102fe2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8102fe4:	69bb      	ldr	r3, [r7, #24]
 8102fe6:	005b      	lsls	r3, r3, #1
 8102fe8:	2203      	movs	r2, #3
 8102fea:	fa02 f303 	lsl.w	r3, r2, r3
 8102fee:	43db      	mvns	r3, r3
 8102ff0:	69fa      	ldr	r2, [r7, #28]
 8102ff2:	4013      	ands	r3, r2
 8102ff4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8102ff6:	683b      	ldr	r3, [r7, #0]
 8102ff8:	689a      	ldr	r2, [r3, #8]
 8102ffa:	69bb      	ldr	r3, [r7, #24]
 8102ffc:	005b      	lsls	r3, r3, #1
 8102ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8103002:	69fa      	ldr	r2, [r7, #28]
 8103004:	4313      	orrs	r3, r2
 8103006:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8103008:	693b      	ldr	r3, [r7, #16]
 810300a:	69fa      	ldr	r2, [r7, #28]
 810300c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810300e:	683b      	ldr	r3, [r7, #0]
 8103010:	685b      	ldr	r3, [r3, #4]
 8103012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8103016:	2b00      	cmp	r3, #0
 8103018:	d07c      	beq.n	8103114 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 810301a:	4a47      	ldr	r2, [pc, #284]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 810301c:	697b      	ldr	r3, [r7, #20]
 810301e:	089b      	lsrs	r3, r3, #2
 8103020:	3318      	adds	r3, #24
 8103022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103026:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8103028:	697b      	ldr	r3, [r7, #20]
 810302a:	f003 0303 	and.w	r3, r3, #3
 810302e:	00db      	lsls	r3, r3, #3
 8103030:	220f      	movs	r2, #15
 8103032:	fa02 f303 	lsl.w	r3, r2, r3
 8103036:	43db      	mvns	r3, r3
 8103038:	69fa      	ldr	r2, [r7, #28]
 810303a:	4013      	ands	r3, r2
 810303c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 810303e:	687b      	ldr	r3, [r7, #4]
 8103040:	0a9a      	lsrs	r2, r3, #10
 8103042:	4b3e      	ldr	r3, [pc, #248]	@ (810313c <HAL_GPIO_Init+0x3ac>)
 8103044:	4013      	ands	r3, r2
 8103046:	697a      	ldr	r2, [r7, #20]
 8103048:	f002 0203 	and.w	r2, r2, #3
 810304c:	00d2      	lsls	r2, r2, #3
 810304e:	4093      	lsls	r3, r2
 8103050:	69fa      	ldr	r2, [r7, #28]
 8103052:	4313      	orrs	r3, r2
 8103054:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8103056:	4938      	ldr	r1, [pc, #224]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 8103058:	697b      	ldr	r3, [r7, #20]
 810305a:	089b      	lsrs	r3, r3, #2
 810305c:	3318      	adds	r3, #24
 810305e:	69fa      	ldr	r2, [r7, #28]
 8103060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8103064:	4b34      	ldr	r3, [pc, #208]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 810306a:	68fb      	ldr	r3, [r7, #12]
 810306c:	43db      	mvns	r3, r3
 810306e:	69fa      	ldr	r2, [r7, #28]
 8103070:	4013      	ands	r3, r2
 8103072:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8103074:	683b      	ldr	r3, [r7, #0]
 8103076:	685b      	ldr	r3, [r3, #4]
 8103078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810307c:	2b00      	cmp	r3, #0
 810307e:	d003      	beq.n	8103088 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8103080:	69fa      	ldr	r2, [r7, #28]
 8103082:	68fb      	ldr	r3, [r7, #12]
 8103084:	4313      	orrs	r3, r2
 8103086:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8103088:	4a2b      	ldr	r2, [pc, #172]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 810308a:	69fb      	ldr	r3, [r7, #28]
 810308c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 810308e:	4b2a      	ldr	r3, [pc, #168]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 8103090:	685b      	ldr	r3, [r3, #4]
 8103092:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8103094:	68fb      	ldr	r3, [r7, #12]
 8103096:	43db      	mvns	r3, r3
 8103098:	69fa      	ldr	r2, [r7, #28]
 810309a:	4013      	ands	r3, r2
 810309c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810309e:	683b      	ldr	r3, [r7, #0]
 81030a0:	685b      	ldr	r3, [r3, #4]
 81030a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81030a6:	2b00      	cmp	r3, #0
 81030a8:	d003      	beq.n	81030b2 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 81030aa:	69fa      	ldr	r2, [r7, #28]
 81030ac:	68fb      	ldr	r3, [r7, #12]
 81030ae:	4313      	orrs	r3, r2
 81030b0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 81030b2:	4a21      	ldr	r2, [pc, #132]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 81030b4:	69fb      	ldr	r3, [r7, #28]
 81030b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 81030b8:	4b1f      	ldr	r3, [pc, #124]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 81030ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81030be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 81030c0:	68fb      	ldr	r3, [r7, #12]
 81030c2:	43db      	mvns	r3, r3
 81030c4:	69fa      	ldr	r2, [r7, #28]
 81030c6:	4013      	ands	r3, r2
 81030c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81030ca:	683b      	ldr	r3, [r7, #0]
 81030cc:	685b      	ldr	r3, [r3, #4]
 81030ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81030d2:	2b00      	cmp	r3, #0
 81030d4:	d003      	beq.n	81030de <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 81030d6:	69fa      	ldr	r2, [r7, #28]
 81030d8:	68fb      	ldr	r3, [r7, #12]
 81030da:	4313      	orrs	r3, r2
 81030dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 81030de:	4a16      	ldr	r2, [pc, #88]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 81030e0:	69fb      	ldr	r3, [r7, #28]
 81030e2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 81030e6:	4b14      	ldr	r3, [pc, #80]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 81030e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81030ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 81030ee:	68fb      	ldr	r3, [r7, #12]
 81030f0:	43db      	mvns	r3, r3
 81030f2:	69fa      	ldr	r2, [r7, #28]
 81030f4:	4013      	ands	r3, r2
 81030f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 81030f8:	683b      	ldr	r3, [r7, #0]
 81030fa:	685b      	ldr	r3, [r3, #4]
 81030fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103100:	2b00      	cmp	r3, #0
 8103102:	d003      	beq.n	810310c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8103104:	69fa      	ldr	r2, [r7, #28]
 8103106:	68fb      	ldr	r3, [r7, #12]
 8103108:	4313      	orrs	r3, r2
 810310a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 810310c:	4a0a      	ldr	r2, [pc, #40]	@ (8103138 <HAL_GPIO_Init+0x3a8>)
 810310e:	69fb      	ldr	r3, [r7, #28]
 8103110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8103114:	697b      	ldr	r3, [r7, #20]
 8103116:	3301      	adds	r3, #1
 8103118:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 810311a:	683b      	ldr	r3, [r7, #0]
 810311c:	681a      	ldr	r2, [r3, #0]
 810311e:	697b      	ldr	r3, [r7, #20]
 8103120:	fa22 f303 	lsr.w	r3, r2, r3
 8103124:	2b00      	cmp	r3, #0
 8103126:	f47f ae3d 	bne.w	8102da4 <HAL_GPIO_Init+0x14>
  }
}
 810312a:	bf00      	nop
 810312c:	bf00      	nop
 810312e:	3724      	adds	r7, #36	@ 0x24
 8103130:	46bd      	mov	sp, r7
 8103132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103136:	4770      	bx	lr
 8103138:	46022000 	.word	0x46022000
 810313c:	002f7f7f 	.word	0x002f7f7f

08103140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103140:	b480      	push	{r7}
 8103142:	b083      	sub	sp, #12
 8103144:	af00      	add	r7, sp, #0
 8103146:	6078      	str	r0, [r7, #4]
 8103148:	460b      	mov	r3, r1
 810314a:	807b      	strh	r3, [r7, #2]
 810314c:	4613      	mov	r3, r2
 810314e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103150:	787b      	ldrb	r3, [r7, #1]
 8103152:	2b00      	cmp	r3, #0
 8103154:	d003      	beq.n	810315e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8103156:	887a      	ldrh	r2, [r7, #2]
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 810315c:	e002      	b.n	8103164 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 810315e:	887a      	ldrh	r2, [r7, #2]
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8103164:	bf00      	nop
 8103166:	370c      	adds	r7, #12
 8103168:	46bd      	mov	sp, r7
 810316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810316e:	4770      	bx	lr

08103170 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103170:	b480      	push	{r7}
 8103172:	b085      	sub	sp, #20
 8103174:	af00      	add	r7, sp, #0
 8103176:	6078      	str	r0, [r7, #4]
 8103178:	460b      	mov	r3, r1
 810317a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 810317c:	687b      	ldr	r3, [r7, #4]
 810317e:	695b      	ldr	r3, [r3, #20]
 8103180:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8103182:	887a      	ldrh	r2, [r7, #2]
 8103184:	68fb      	ldr	r3, [r7, #12]
 8103186:	4013      	ands	r3, r2
 8103188:	041a      	lsls	r2, r3, #16
 810318a:	68fb      	ldr	r3, [r7, #12]
 810318c:	43d9      	mvns	r1, r3
 810318e:	887b      	ldrh	r3, [r7, #2]
 8103190:	400b      	ands	r3, r1
 8103192:	431a      	orrs	r2, r3
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	619a      	str	r2, [r3, #24]
}
 8103198:	bf00      	nop
 810319a:	3714      	adds	r7, #20
 810319c:	46bd      	mov	sp, r7
 810319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031a2:	4770      	bx	lr

081031a4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 81031a4:	b480      	push	{r7}
 81031a6:	b085      	sub	sp, #20
 81031a8:	af00      	add	r7, sp, #0
 81031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81031ac:	2300      	movs	r3, #0
 81031ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 81031b0:	4b0b      	ldr	r3, [pc, #44]	@ (81031e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	f003 0301 	and.w	r3, r3, #1
 81031b8:	2b00      	cmp	r3, #0
 81031ba:	d002      	beq.n	81031c2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 81031bc:	2301      	movs	r3, #1
 81031be:	73fb      	strb	r3, [r7, #15]
 81031c0:	e007      	b.n	81031d2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 81031c2:	4b07      	ldr	r3, [pc, #28]	@ (81031e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 81031c4:	681b      	ldr	r3, [r3, #0]
 81031c6:	f023 0204 	bic.w	r2, r3, #4
 81031ca:	4905      	ldr	r1, [pc, #20]	@ (81031e0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 81031cc:	687b      	ldr	r3, [r7, #4]
 81031ce:	4313      	orrs	r3, r2
 81031d0:	600b      	str	r3, [r1, #0]
  }

  return status;
 81031d2:	7bfb      	ldrb	r3, [r7, #15]
}
 81031d4:	4618      	mov	r0, r3
 81031d6:	3714      	adds	r7, #20
 81031d8:	46bd      	mov	sp, r7
 81031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031de:	4770      	bx	lr
 81031e0:	40030400 	.word	0x40030400

081031e4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 81031e4:	b480      	push	{r7}
 81031e6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 81031e8:	4b05      	ldr	r3, [pc, #20]	@ (8103200 <HAL_ICACHE_Enable+0x1c>)
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	4a04      	ldr	r2, [pc, #16]	@ (8103200 <HAL_ICACHE_Enable+0x1c>)
 81031ee:	f043 0301 	orr.w	r3, r3, #1
 81031f2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 81031f4:	2300      	movs	r3, #0
}
 81031f6:	4618      	mov	r0, r3
 81031f8:	46bd      	mov	sp, r7
 81031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031fe:	4770      	bx	lr
 8103200:	40030400 	.word	0x40030400

08103204 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8103204:	b480      	push	{r7}
 8103206:	b085      	sub	sp, #20
 8103208:	af00      	add	r7, sp, #0
 810320a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 810320c:	4b39      	ldr	r3, [pc, #228]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103214:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8103216:	68ba      	ldr	r2, [r7, #8]
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	429a      	cmp	r2, r3
 810321c:	d10b      	bne.n	8103236 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103224:	d905      	bls.n	8103232 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8103226:	4b33      	ldr	r3, [pc, #204]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8103228:	68db      	ldr	r3, [r3, #12]
 810322a:	4a32      	ldr	r2, [pc, #200]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810322c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8103230:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8103232:	2300      	movs	r3, #0
 8103234:	e057      	b.n	81032e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810323c:	d90a      	bls.n	8103254 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 810323e:	4b2d      	ldr	r3, [pc, #180]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8103240:	68db      	ldr	r3, [r3, #12]
 8103242:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8103246:	687b      	ldr	r3, [r7, #4]
 8103248:	4313      	orrs	r3, r2
 810324a:	4a2a      	ldr	r2, [pc, #168]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810324c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8103250:	60d3      	str	r3, [r2, #12]
 8103252:	e007      	b.n	8103264 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8103254:	4b27      	ldr	r3, [pc, #156]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8103256:	68db      	ldr	r3, [r3, #12]
 8103258:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 810325c:	4925      	ldr	r1, [pc, #148]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	4313      	orrs	r3, r2
 8103262:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8103264:	4b24      	ldr	r3, [pc, #144]	@ (81032f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8103266:	681b      	ldr	r3, [r3, #0]
 8103268:	4a24      	ldr	r2, [pc, #144]	@ (81032fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 810326a:	fba2 2303 	umull	r2, r3, r2, r3
 810326e:	099b      	lsrs	r3, r3, #6
 8103270:	2232      	movs	r2, #50	@ 0x32
 8103272:	fb02 f303 	mul.w	r3, r2, r3
 8103276:	4a21      	ldr	r2, [pc, #132]	@ (81032fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8103278:	fba2 2303 	umull	r2, r3, r2, r3
 810327c:	099b      	lsrs	r3, r3, #6
 810327e:	3301      	adds	r3, #1
 8103280:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8103282:	e002      	b.n	810328a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8103284:	68fb      	ldr	r3, [r7, #12]
 8103286:	3b01      	subs	r3, #1
 8103288:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 810328a:	4b1a      	ldr	r3, [pc, #104]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 810328c:	68db      	ldr	r3, [r3, #12]
 810328e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103292:	2b00      	cmp	r3, #0
 8103294:	d102      	bne.n	810329c <HAL_PWREx_ControlVoltageScaling+0x98>
 8103296:	68fb      	ldr	r3, [r7, #12]
 8103298:	2b00      	cmp	r3, #0
 810329a:	d1f3      	bne.n	8103284 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 810329c:	68fb      	ldr	r3, [r7, #12]
 810329e:	2b00      	cmp	r3, #0
 81032a0:	d01b      	beq.n	81032da <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 81032a2:	4b15      	ldr	r3, [pc, #84]	@ (81032f8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 81032a4:	681b      	ldr	r3, [r3, #0]
 81032a6:	4a15      	ldr	r2, [pc, #84]	@ (81032fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 81032a8:	fba2 2303 	umull	r2, r3, r2, r3
 81032ac:	099b      	lsrs	r3, r3, #6
 81032ae:	2232      	movs	r2, #50	@ 0x32
 81032b0:	fb02 f303 	mul.w	r3, r2, r3
 81032b4:	4a11      	ldr	r2, [pc, #68]	@ (81032fc <HAL_PWREx_ControlVoltageScaling+0xf8>)
 81032b6:	fba2 2303 	umull	r2, r3, r2, r3
 81032ba:	099b      	lsrs	r3, r3, #6
 81032bc:	3301      	adds	r3, #1
 81032be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 81032c0:	e002      	b.n	81032c8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 81032c2:	68fb      	ldr	r3, [r7, #12]
 81032c4:	3b01      	subs	r3, #1
 81032c6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 81032c8:	4b0a      	ldr	r3, [pc, #40]	@ (81032f4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 81032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81032cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81032d0:	2b00      	cmp	r3, #0
 81032d2:	d102      	bne.n	81032da <HAL_PWREx_ControlVoltageScaling+0xd6>
 81032d4:	68fb      	ldr	r3, [r7, #12]
 81032d6:	2b00      	cmp	r3, #0
 81032d8:	d1f3      	bne.n	81032c2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 81032da:	68fb      	ldr	r3, [r7, #12]
 81032dc:	2b00      	cmp	r3, #0
 81032de:	d101      	bne.n	81032e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 81032e0:	2303      	movs	r3, #3
 81032e2:	e000      	b.n	81032e6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 81032e4:	2300      	movs	r3, #0
}
 81032e6:	4618      	mov	r0, r3
 81032e8:	3714      	adds	r7, #20
 81032ea:	46bd      	mov	sp, r7
 81032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032f0:	4770      	bx	lr
 81032f2:	bf00      	nop
 81032f4:	46020800 	.word	0x46020800
 81032f8:	20000000 	.word	0x20000000
 81032fc:	10624dd3 	.word	0x10624dd3

08103300 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8103300:	b480      	push	{r7}
 8103302:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8103304:	4b04      	ldr	r3, [pc, #16]	@ (8103318 <HAL_PWREx_GetVoltageRange+0x18>)
 8103306:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 810330c:	4618      	mov	r0, r3
 810330e:	46bd      	mov	sp, r7
 8103310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103314:	4770      	bx	lr
 8103316:	bf00      	nop
 8103318:	46020800 	.word	0x46020800

0810331c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 810331c:	b480      	push	{r7}
 810331e:	b085      	sub	sp, #20
 8103320:	af00      	add	r7, sp, #0
 8103322:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8103324:	4b22      	ldr	r3, [pc, #136]	@ (81033b0 <HAL_PWREx_ConfigSupply+0x94>)
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	4a22      	ldr	r2, [pc, #136]	@ (81033b4 <HAL_PWREx_ConfigSupply+0x98>)
 810332a:	fba2 2303 	umull	r2, r3, r2, r3
 810332e:	099b      	lsrs	r3, r3, #6
 8103330:	2232      	movs	r2, #50	@ 0x32
 8103332:	fb02 f303 	mul.w	r3, r2, r3
 8103336:	4a1f      	ldr	r2, [pc, #124]	@ (81033b4 <HAL_PWREx_ConfigSupply+0x98>)
 8103338:	fba2 2303 	umull	r2, r3, r2, r3
 810333c:	099b      	lsrs	r3, r3, #6
 810333e:	3301      	adds	r3, #1
 8103340:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8103342:	687b      	ldr	r3, [r7, #4]
 8103344:	2b00      	cmp	r3, #0
 8103346:	d113      	bne.n	8103370 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8103348:	4b1b      	ldr	r3, [pc, #108]	@ (81033b8 <HAL_PWREx_ConfigSupply+0x9c>)
 810334a:	689b      	ldr	r3, [r3, #8]
 810334c:	4a1a      	ldr	r2, [pc, #104]	@ (81033b8 <HAL_PWREx_ConfigSupply+0x9c>)
 810334e:	f023 0302 	bic.w	r3, r3, #2
 8103352:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8103354:	e002      	b.n	810335c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8103356:	68fb      	ldr	r3, [r7, #12]
 8103358:	3b01      	subs	r3, #1
 810335a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 810335c:	4b16      	ldr	r3, [pc, #88]	@ (81033b8 <HAL_PWREx_ConfigSupply+0x9c>)
 810335e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103360:	f003 0302 	and.w	r3, r3, #2
 8103364:	2b02      	cmp	r3, #2
 8103366:	d116      	bne.n	8103396 <HAL_PWREx_ConfigSupply+0x7a>
 8103368:	68fb      	ldr	r3, [r7, #12]
 810336a:	2b00      	cmp	r3, #0
 810336c:	d1f3      	bne.n	8103356 <HAL_PWREx_ConfigSupply+0x3a>
 810336e:	e012      	b.n	8103396 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8103370:	4b11      	ldr	r3, [pc, #68]	@ (81033b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8103372:	689b      	ldr	r3, [r3, #8]
 8103374:	4a10      	ldr	r2, [pc, #64]	@ (81033b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8103376:	f043 0302 	orr.w	r3, r3, #2
 810337a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 810337c:	e002      	b.n	8103384 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 810337e:	68fb      	ldr	r3, [r7, #12]
 8103380:	3b01      	subs	r3, #1
 8103382:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8103384:	4b0c      	ldr	r3, [pc, #48]	@ (81033b8 <HAL_PWREx_ConfigSupply+0x9c>)
 8103386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103388:	f003 0302 	and.w	r3, r3, #2
 810338c:	2b00      	cmp	r3, #0
 810338e:	d102      	bne.n	8103396 <HAL_PWREx_ConfigSupply+0x7a>
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	2b00      	cmp	r3, #0
 8103394:	d1f3      	bne.n	810337e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8103396:	68fb      	ldr	r3, [r7, #12]
 8103398:	2b00      	cmp	r3, #0
 810339a:	d101      	bne.n	81033a0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 810339c:	2303      	movs	r3, #3
 810339e:	e000      	b.n	81033a2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 81033a0:	2300      	movs	r3, #0
}
 81033a2:	4618      	mov	r0, r3
 81033a4:	3714      	adds	r7, #20
 81033a6:	46bd      	mov	sp, r7
 81033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033ac:	4770      	bx	lr
 81033ae:	bf00      	nop
 81033b0:	20000000 	.word	0x20000000
 81033b4:	10624dd3 	.word	0x10624dd3
 81033b8:	46020800 	.word	0x46020800

081033bc <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 81033bc:	b480      	push	{r7}
 81033be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 81033c0:	4b05      	ldr	r3, [pc, #20]	@ (81033d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 81033c2:	691b      	ldr	r3, [r3, #16]
 81033c4:	4a04      	ldr	r2, [pc, #16]	@ (81033d8 <HAL_PWREx_EnableVddIO2+0x1c>)
 81033c6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 81033ca:	6113      	str	r3, [r2, #16]
}
 81033cc:	bf00      	nop
 81033ce:	46bd      	mov	sp, r7
 81033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d4:	4770      	bx	lr
 81033d6:	bf00      	nop
 81033d8:	46020800 	.word	0x46020800

081033dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 81033dc:	b480      	push	{r7}
 81033de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 81033e0:	4b05      	ldr	r3, [pc, #20]	@ (81033f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 81033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81033e4:	4a04      	ldr	r2, [pc, #16]	@ (81033f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 81033e6:	f043 0301 	orr.w	r3, r3, #1
 81033ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 81033ec:	bf00      	nop
 81033ee:	46bd      	mov	sp, r7
 81033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033f4:	4770      	bx	lr
 81033f6:	bf00      	nop
 81033f8:	46020800 	.word	0x46020800

081033fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 81033fc:	b580      	push	{r7, lr}
 81033fe:	b08e      	sub	sp, #56	@ 0x38
 8103400:	af00      	add	r7, sp, #0
 8103402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8103404:	2300      	movs	r3, #0
 8103406:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 810340a:	687b      	ldr	r3, [r7, #4]
 810340c:	2b00      	cmp	r3, #0
 810340e:	d102      	bne.n	8103416 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8103410:	2301      	movs	r3, #1
 8103412:	f000 bec8 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8103416:	4b99      	ldr	r3, [pc, #612]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103418:	69db      	ldr	r3, [r3, #28]
 810341a:	f003 030c 	and.w	r3, r3, #12
 810341e:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8103420:	4b96      	ldr	r3, [pc, #600]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103424:	f003 0303 	and.w	r3, r3, #3
 8103428:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 810342a:	687b      	ldr	r3, [r7, #4]
 810342c:	681b      	ldr	r3, [r3, #0]
 810342e:	f003 0310 	and.w	r3, r3, #16
 8103432:	2b00      	cmp	r3, #0
 8103434:	f000 816c 	beq.w	8103710 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8103438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810343a:	2b00      	cmp	r3, #0
 810343c:	d007      	beq.n	810344e <HAL_RCC_OscConfig+0x52>
 810343e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103440:	2b0c      	cmp	r3, #12
 8103442:	f040 80de 	bne.w	8103602 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8103446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103448:	2b01      	cmp	r3, #1
 810344a:	f040 80da 	bne.w	8103602 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 810344e:	687b      	ldr	r3, [r7, #4]
 8103450:	69db      	ldr	r3, [r3, #28]
 8103452:	2b00      	cmp	r3, #0
 8103454:	d102      	bne.n	810345c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8103456:	2301      	movs	r3, #1
 8103458:	f000 bea5 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 810345c:	687b      	ldr	r3, [r7, #4]
 810345e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8103460:	4b86      	ldr	r3, [pc, #536]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103462:	689b      	ldr	r3, [r3, #8]
 8103464:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8103468:	2b00      	cmp	r3, #0
 810346a:	d004      	beq.n	8103476 <HAL_RCC_OscConfig+0x7a>
 810346c:	4b83      	ldr	r3, [pc, #524]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810346e:	689b      	ldr	r3, [r3, #8]
 8103470:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8103474:	e005      	b.n	8103482 <HAL_RCC_OscConfig+0x86>
 8103476:	4b81      	ldr	r3, [pc, #516]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810347c:	041b      	lsls	r3, r3, #16
 810347e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8103482:	4293      	cmp	r3, r2
 8103484:	d255      	bcs.n	8103532 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8103486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103488:	2b00      	cmp	r3, #0
 810348a:	d10a      	bne.n	81034a2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103490:	4618      	mov	r0, r3
 8103492:	f001 fa11 	bl	81048b8 <RCC_SetFlashLatencyFromMSIRange>
 8103496:	4603      	mov	r3, r0
 8103498:	2b00      	cmp	r3, #0
 810349a:	d002      	beq.n	81034a2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 810349c:	2301      	movs	r3, #1
 810349e:	f000 be82 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 81034a2:	4b76      	ldr	r3, [pc, #472]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034a4:	689b      	ldr	r3, [r3, #8]
 81034a6:	4a75      	ldr	r2, [pc, #468]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81034ac:	6093      	str	r3, [r2, #8]
 81034ae:	4b73      	ldr	r3, [pc, #460]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034b0:	689b      	ldr	r3, [r3, #8]
 81034b2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 81034b6:	687b      	ldr	r3, [r7, #4]
 81034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81034ba:	4970      	ldr	r1, [pc, #448]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034bc:	4313      	orrs	r3, r2
 81034be:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 81034c0:	687b      	ldr	r3, [r7, #4]
 81034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81034c4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 81034c8:	d309      	bcc.n	81034de <HAL_RCC_OscConfig+0xe2>
 81034ca:	4b6c      	ldr	r3, [pc, #432]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034cc:	68db      	ldr	r3, [r3, #12]
 81034ce:	f023 021f 	bic.w	r2, r3, #31
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	6a1b      	ldr	r3, [r3, #32]
 81034d6:	4969      	ldr	r1, [pc, #420]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034d8:	4313      	orrs	r3, r2
 81034da:	60cb      	str	r3, [r1, #12]
 81034dc:	e07e      	b.n	81035dc <HAL_RCC_OscConfig+0x1e0>
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	da0a      	bge.n	81034fc <HAL_RCC_OscConfig+0x100>
 81034e6:	4b65      	ldr	r3, [pc, #404]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034e8:	68db      	ldr	r3, [r3, #12]
 81034ea:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	6a1b      	ldr	r3, [r3, #32]
 81034f2:	015b      	lsls	r3, r3, #5
 81034f4:	4961      	ldr	r1, [pc, #388]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81034f6:	4313      	orrs	r3, r2
 81034f8:	60cb      	str	r3, [r1, #12]
 81034fa:	e06f      	b.n	81035dc <HAL_RCC_OscConfig+0x1e0>
 81034fc:	687b      	ldr	r3, [r7, #4]
 81034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103504:	d30a      	bcc.n	810351c <HAL_RCC_OscConfig+0x120>
 8103506:	4b5d      	ldr	r3, [pc, #372]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103508:	68db      	ldr	r3, [r3, #12]
 810350a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810350e:	687b      	ldr	r3, [r7, #4]
 8103510:	6a1b      	ldr	r3, [r3, #32]
 8103512:	029b      	lsls	r3, r3, #10
 8103514:	4959      	ldr	r1, [pc, #356]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103516:	4313      	orrs	r3, r2
 8103518:	60cb      	str	r3, [r1, #12]
 810351a:	e05f      	b.n	81035dc <HAL_RCC_OscConfig+0x1e0>
 810351c:	4b57      	ldr	r3, [pc, #348]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810351e:	68db      	ldr	r3, [r3, #12]
 8103520:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8103524:	687b      	ldr	r3, [r7, #4]
 8103526:	6a1b      	ldr	r3, [r3, #32]
 8103528:	03db      	lsls	r3, r3, #15
 810352a:	4954      	ldr	r1, [pc, #336]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810352c:	4313      	orrs	r3, r2
 810352e:	60cb      	str	r3, [r1, #12]
 8103530:	e054      	b.n	81035dc <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8103532:	4b52      	ldr	r3, [pc, #328]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103534:	689b      	ldr	r3, [r3, #8]
 8103536:	4a51      	ldr	r2, [pc, #324]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103538:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810353c:	6093      	str	r3, [r2, #8]
 810353e:	4b4f      	ldr	r3, [pc, #316]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103540:	689b      	ldr	r3, [r3, #8]
 8103542:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810354a:	494c      	ldr	r1, [pc, #304]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810354c:	4313      	orrs	r3, r2
 810354e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103554:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8103558:	d309      	bcc.n	810356e <HAL_RCC_OscConfig+0x172>
 810355a:	4b48      	ldr	r3, [pc, #288]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810355c:	68db      	ldr	r3, [r3, #12]
 810355e:	f023 021f 	bic.w	r2, r3, #31
 8103562:	687b      	ldr	r3, [r7, #4]
 8103564:	6a1b      	ldr	r3, [r3, #32]
 8103566:	4945      	ldr	r1, [pc, #276]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103568:	4313      	orrs	r3, r2
 810356a:	60cb      	str	r3, [r1, #12]
 810356c:	e028      	b.n	81035c0 <HAL_RCC_OscConfig+0x1c4>
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103572:	2b00      	cmp	r3, #0
 8103574:	da0a      	bge.n	810358c <HAL_RCC_OscConfig+0x190>
 8103576:	4b41      	ldr	r3, [pc, #260]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103578:	68db      	ldr	r3, [r3, #12]
 810357a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	6a1b      	ldr	r3, [r3, #32]
 8103582:	015b      	lsls	r3, r3, #5
 8103584:	493d      	ldr	r1, [pc, #244]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103586:	4313      	orrs	r3, r2
 8103588:	60cb      	str	r3, [r1, #12]
 810358a:	e019      	b.n	81035c0 <HAL_RCC_OscConfig+0x1c4>
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103594:	d30a      	bcc.n	81035ac <HAL_RCC_OscConfig+0x1b0>
 8103596:	4b39      	ldr	r3, [pc, #228]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103598:	68db      	ldr	r3, [r3, #12]
 810359a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	6a1b      	ldr	r3, [r3, #32]
 81035a2:	029b      	lsls	r3, r3, #10
 81035a4:	4935      	ldr	r1, [pc, #212]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81035a6:	4313      	orrs	r3, r2
 81035a8:	60cb      	str	r3, [r1, #12]
 81035aa:	e009      	b.n	81035c0 <HAL_RCC_OscConfig+0x1c4>
 81035ac:	4b33      	ldr	r3, [pc, #204]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81035ae:	68db      	ldr	r3, [r3, #12]
 81035b0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	6a1b      	ldr	r3, [r3, #32]
 81035b8:	03db      	lsls	r3, r3, #15
 81035ba:	4930      	ldr	r1, [pc, #192]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 81035bc:	4313      	orrs	r3, r2
 81035be:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 81035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d10a      	bne.n	81035dc <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81035ca:	4618      	mov	r0, r3
 81035cc:	f001 f974 	bl	81048b8 <RCC_SetFlashLatencyFromMSIRange>
 81035d0:	4603      	mov	r3, r0
 81035d2:	2b00      	cmp	r3, #0
 81035d4:	d002      	beq.n	81035dc <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 81035d6:	2301      	movs	r3, #1
 81035d8:	f000 bde5 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 81035dc:	f001 f8de 	bl	810479c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 81035e0:	4b27      	ldr	r3, [pc, #156]	@ (8103680 <HAL_RCC_OscConfig+0x284>)
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	4618      	mov	r0, r3
 81035e6:	f7fd fd15 	bl	8101014 <HAL_InitTick>
 81035ea:	4603      	mov	r3, r0
 81035ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 81035f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81035f4:	2b00      	cmp	r3, #0
 81035f6:	f000 808a 	beq.w	810370e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 81035fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 81035fe:	f000 bdd2 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8103602:	687b      	ldr	r3, [r7, #4]
 8103604:	69db      	ldr	r3, [r3, #28]
 8103606:	2b00      	cmp	r3, #0
 8103608:	d066      	beq.n	81036d8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 810360a:	4b1c      	ldr	r3, [pc, #112]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	4a1b      	ldr	r2, [pc, #108]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103610:	f043 0301 	orr.w	r3, r3, #1
 8103614:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8103616:	f7fe f955 	bl	81018c4 <HAL_GetTick>
 810361a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 810361c:	e009      	b.n	8103632 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 810361e:	f7fe f951 	bl	81018c4 <HAL_GetTick>
 8103622:	4602      	mov	r2, r0
 8103624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103626:	1ad3      	subs	r3, r2, r3
 8103628:	2b02      	cmp	r3, #2
 810362a:	d902      	bls.n	8103632 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 810362c:	2303      	movs	r3, #3
 810362e:	f000 bdba 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8103632:	4b12      	ldr	r3, [pc, #72]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103634:	681b      	ldr	r3, [r3, #0]
 8103636:	f003 0304 	and.w	r3, r3, #4
 810363a:	2b00      	cmp	r3, #0
 810363c:	d0ef      	beq.n	810361e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 810363e:	4b0f      	ldr	r3, [pc, #60]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103640:	689b      	ldr	r3, [r3, #8]
 8103642:	4a0e      	ldr	r2, [pc, #56]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103644:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103648:	6093      	str	r3, [r2, #8]
 810364a:	4b0c      	ldr	r3, [pc, #48]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 810364c:	689b      	ldr	r3, [r3, #8]
 810364e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8103652:	687b      	ldr	r3, [r7, #4]
 8103654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103656:	4909      	ldr	r1, [pc, #36]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103658:	4313      	orrs	r3, r2
 810365a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 810365c:	687b      	ldr	r3, [r7, #4]
 810365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103660:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8103664:	d30e      	bcc.n	8103684 <HAL_RCC_OscConfig+0x288>
 8103666:	4b05      	ldr	r3, [pc, #20]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103668:	68db      	ldr	r3, [r3, #12]
 810366a:	f023 021f 	bic.w	r2, r3, #31
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	6a1b      	ldr	r3, [r3, #32]
 8103672:	4902      	ldr	r1, [pc, #8]	@ (810367c <HAL_RCC_OscConfig+0x280>)
 8103674:	4313      	orrs	r3, r2
 8103676:	60cb      	str	r3, [r1, #12]
 8103678:	e04a      	b.n	8103710 <HAL_RCC_OscConfig+0x314>
 810367a:	bf00      	nop
 810367c:	46020c00 	.word	0x46020c00
 8103680:	20000020 	.word	0x20000020
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103688:	2b00      	cmp	r3, #0
 810368a:	da0a      	bge.n	81036a2 <HAL_RCC_OscConfig+0x2a6>
 810368c:	4b98      	ldr	r3, [pc, #608]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810368e:	68db      	ldr	r3, [r3, #12]
 8103690:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8103694:	687b      	ldr	r3, [r7, #4]
 8103696:	6a1b      	ldr	r3, [r3, #32]
 8103698:	015b      	lsls	r3, r3, #5
 810369a:	4995      	ldr	r1, [pc, #596]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810369c:	4313      	orrs	r3, r2
 810369e:	60cb      	str	r3, [r1, #12]
 81036a0:	e036      	b.n	8103710 <HAL_RCC_OscConfig+0x314>
 81036a2:	687b      	ldr	r3, [r7, #4]
 81036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81036aa:	d30a      	bcc.n	81036c2 <HAL_RCC_OscConfig+0x2c6>
 81036ac:	4b90      	ldr	r3, [pc, #576]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81036ae:	68db      	ldr	r3, [r3, #12]
 81036b0:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	6a1b      	ldr	r3, [r3, #32]
 81036b8:	029b      	lsls	r3, r3, #10
 81036ba:	498d      	ldr	r1, [pc, #564]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81036bc:	4313      	orrs	r3, r2
 81036be:	60cb      	str	r3, [r1, #12]
 81036c0:	e026      	b.n	8103710 <HAL_RCC_OscConfig+0x314>
 81036c2:	4b8b      	ldr	r3, [pc, #556]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81036c4:	68db      	ldr	r3, [r3, #12]
 81036c6:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	6a1b      	ldr	r3, [r3, #32]
 81036ce:	03db      	lsls	r3, r3, #15
 81036d0:	4987      	ldr	r1, [pc, #540]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81036d2:	4313      	orrs	r3, r2
 81036d4:	60cb      	str	r3, [r1, #12]
 81036d6:	e01b      	b.n	8103710 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 81036d8:	4b85      	ldr	r3, [pc, #532]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	4a84      	ldr	r2, [pc, #528]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81036de:	f023 0301 	bic.w	r3, r3, #1
 81036e2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 81036e4:	f7fe f8ee 	bl	81018c4 <HAL_GetTick>
 81036e8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 81036ea:	e009      	b.n	8103700 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 81036ec:	f7fe f8ea 	bl	81018c4 <HAL_GetTick>
 81036f0:	4602      	mov	r2, r0
 81036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81036f4:	1ad3      	subs	r3, r2, r3
 81036f6:	2b02      	cmp	r3, #2
 81036f8:	d902      	bls.n	8103700 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 81036fa:	2303      	movs	r3, #3
 81036fc:	f000 bd53 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8103700:	4b7b      	ldr	r3, [pc, #492]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103702:	681b      	ldr	r3, [r3, #0]
 8103704:	f003 0304 	and.w	r3, r3, #4
 8103708:	2b00      	cmp	r3, #0
 810370a:	d1ef      	bne.n	81036ec <HAL_RCC_OscConfig+0x2f0>
 810370c:	e000      	b.n	8103710 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 810370e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8103710:	687b      	ldr	r3, [r7, #4]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	f003 0301 	and.w	r3, r3, #1
 8103718:	2b00      	cmp	r3, #0
 810371a:	f000 808b 	beq.w	8103834 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 810371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103720:	2b08      	cmp	r3, #8
 8103722:	d005      	beq.n	8103730 <HAL_RCC_OscConfig+0x334>
 8103724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103726:	2b0c      	cmp	r3, #12
 8103728:	d109      	bne.n	810373e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 810372a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810372c:	2b03      	cmp	r3, #3
 810372e:	d106      	bne.n	810373e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	685b      	ldr	r3, [r3, #4]
 8103734:	2b00      	cmp	r3, #0
 8103736:	d17d      	bne.n	8103834 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8103738:	2301      	movs	r3, #1
 810373a:	f000 bd34 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	685b      	ldr	r3, [r3, #4]
 8103742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103746:	d106      	bne.n	8103756 <HAL_RCC_OscConfig+0x35a>
 8103748:	4b69      	ldr	r3, [pc, #420]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810374a:	681b      	ldr	r3, [r3, #0]
 810374c:	4a68      	ldr	r2, [pc, #416]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810374e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103752:	6013      	str	r3, [r2, #0]
 8103754:	e041      	b.n	81037da <HAL_RCC_OscConfig+0x3de>
 8103756:	687b      	ldr	r3, [r7, #4]
 8103758:	685b      	ldr	r3, [r3, #4]
 810375a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810375e:	d112      	bne.n	8103786 <HAL_RCC_OscConfig+0x38a>
 8103760:	4b63      	ldr	r3, [pc, #396]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4a62      	ldr	r2, [pc, #392]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103766:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810376a:	6013      	str	r3, [r2, #0]
 810376c:	4b60      	ldr	r3, [pc, #384]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	4a5f      	ldr	r2, [pc, #380]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103772:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8103776:	6013      	str	r3, [r2, #0]
 8103778:	4b5d      	ldr	r3, [pc, #372]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	4a5c      	ldr	r2, [pc, #368]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810377e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103782:	6013      	str	r3, [r2, #0]
 8103784:	e029      	b.n	81037da <HAL_RCC_OscConfig+0x3de>
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	685b      	ldr	r3, [r3, #4]
 810378a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 810378e:	d112      	bne.n	81037b6 <HAL_RCC_OscConfig+0x3ba>
 8103790:	4b57      	ldr	r3, [pc, #348]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	4a56      	ldr	r2, [pc, #344]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103796:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810379a:	6013      	str	r3, [r2, #0]
 810379c:	4b54      	ldr	r3, [pc, #336]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	4a53      	ldr	r2, [pc, #332]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81037a6:	6013      	str	r3, [r2, #0]
 81037a8:	4b51      	ldr	r3, [pc, #324]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037aa:	681b      	ldr	r3, [r3, #0]
 81037ac:	4a50      	ldr	r2, [pc, #320]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81037b2:	6013      	str	r3, [r2, #0]
 81037b4:	e011      	b.n	81037da <HAL_RCC_OscConfig+0x3de>
 81037b6:	4b4e      	ldr	r3, [pc, #312]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037b8:	681b      	ldr	r3, [r3, #0]
 81037ba:	4a4d      	ldr	r2, [pc, #308]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81037c0:	6013      	str	r3, [r2, #0]
 81037c2:	4b4b      	ldr	r3, [pc, #300]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a4a      	ldr	r2, [pc, #296]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 81037cc:	6013      	str	r3, [r2, #0]
 81037ce:	4b48      	ldr	r3, [pc, #288]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	4a47      	ldr	r2, [pc, #284]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81037d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 81037d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	685b      	ldr	r3, [r3, #4]
 81037de:	2b00      	cmp	r3, #0
 81037e0:	d014      	beq.n	810380c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 81037e2:	f7fe f86f 	bl	81018c4 <HAL_GetTick>
 81037e6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81037e8:	e009      	b.n	81037fe <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 81037ea:	f7fe f86b 	bl	81018c4 <HAL_GetTick>
 81037ee:	4602      	mov	r2, r0
 81037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81037f2:	1ad3      	subs	r3, r2, r3
 81037f4:	2b64      	cmp	r3, #100	@ 0x64
 81037f6:	d902      	bls.n	81037fe <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 81037f8:	2303      	movs	r3, #3
 81037fa:	f000 bcd4 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 81037fe:	4b3c      	ldr	r3, [pc, #240]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103806:	2b00      	cmp	r3, #0
 8103808:	d0ef      	beq.n	81037ea <HAL_RCC_OscConfig+0x3ee>
 810380a:	e013      	b.n	8103834 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 810380c:	f7fe f85a 	bl	81018c4 <HAL_GetTick>
 8103810:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8103812:	e009      	b.n	8103828 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8103814:	f7fe f856 	bl	81018c4 <HAL_GetTick>
 8103818:	4602      	mov	r2, r0
 810381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810381c:	1ad3      	subs	r3, r2, r3
 810381e:	2b64      	cmp	r3, #100	@ 0x64
 8103820:	d902      	bls.n	8103828 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8103822:	2303      	movs	r3, #3
 8103824:	f000 bcbf 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8103828:	4b31      	ldr	r3, [pc, #196]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 810382a:	681b      	ldr	r3, [r3, #0]
 810382c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8103830:	2b00      	cmp	r3, #0
 8103832:	d1ef      	bne.n	8103814 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8103834:	687b      	ldr	r3, [r7, #4]
 8103836:	681b      	ldr	r3, [r3, #0]
 8103838:	f003 0302 	and.w	r3, r3, #2
 810383c:	2b00      	cmp	r3, #0
 810383e:	d05f      	beq.n	8103900 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8103840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103842:	2b04      	cmp	r3, #4
 8103844:	d005      	beq.n	8103852 <HAL_RCC_OscConfig+0x456>
 8103846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103848:	2b0c      	cmp	r3, #12
 810384a:	d114      	bne.n	8103876 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 810384c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810384e:	2b02      	cmp	r3, #2
 8103850:	d111      	bne.n	8103876 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8103852:	687b      	ldr	r3, [r7, #4]
 8103854:	68db      	ldr	r3, [r3, #12]
 8103856:	2b00      	cmp	r3, #0
 8103858:	d102      	bne.n	8103860 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 810385a:	2301      	movs	r3, #1
 810385c:	f000 bca3 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8103860:	4b23      	ldr	r3, [pc, #140]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103862:	691b      	ldr	r3, [r3, #16]
 8103864:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	691b      	ldr	r3, [r3, #16]
 810386c:	041b      	lsls	r3, r3, #16
 810386e:	4920      	ldr	r1, [pc, #128]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103870:	4313      	orrs	r3, r2
 8103872:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8103874:	e044      	b.n	8103900 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	68db      	ldr	r3, [r3, #12]
 810387a:	2b00      	cmp	r3, #0
 810387c:	d024      	beq.n	81038c8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 810387e:	4b1c      	ldr	r3, [pc, #112]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103880:	681b      	ldr	r3, [r3, #0]
 8103882:	4a1b      	ldr	r2, [pc, #108]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 8103884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103888:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 810388a:	f7fe f81b 	bl	81018c4 <HAL_GetTick>
 810388e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8103890:	e009      	b.n	81038a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8103892:	f7fe f817 	bl	81018c4 <HAL_GetTick>
 8103896:	4602      	mov	r2, r0
 8103898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810389a:	1ad3      	subs	r3, r2, r3
 810389c:	2b02      	cmp	r3, #2
 810389e:	d902      	bls.n	81038a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 81038a0:	2303      	movs	r3, #3
 81038a2:	f000 bc80 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 81038a6:	4b12      	ldr	r3, [pc, #72]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81038a8:	681b      	ldr	r3, [r3, #0]
 81038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81038ae:	2b00      	cmp	r3, #0
 81038b0:	d0ef      	beq.n	8103892 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 81038b2:	4b0f      	ldr	r3, [pc, #60]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81038b4:	691b      	ldr	r3, [r3, #16]
 81038b6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	691b      	ldr	r3, [r3, #16]
 81038be:	041b      	lsls	r3, r3, #16
 81038c0:	490b      	ldr	r1, [pc, #44]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81038c2:	4313      	orrs	r3, r2
 81038c4:	610b      	str	r3, [r1, #16]
 81038c6:	e01b      	b.n	8103900 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 81038c8:	4b09      	ldr	r3, [pc, #36]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	4a08      	ldr	r2, [pc, #32]	@ (81038f0 <HAL_RCC_OscConfig+0x4f4>)
 81038ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81038d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 81038d4:	f7fd fff6 	bl	81018c4 <HAL_GetTick>
 81038d8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81038da:	e00b      	b.n	81038f4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 81038dc:	f7fd fff2 	bl	81018c4 <HAL_GetTick>
 81038e0:	4602      	mov	r2, r0
 81038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038e4:	1ad3      	subs	r3, r2, r3
 81038e6:	2b02      	cmp	r3, #2
 81038e8:	d904      	bls.n	81038f4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 81038ea:	2303      	movs	r3, #3
 81038ec:	f000 bc5b 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
 81038f0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 81038f4:	4baf      	ldr	r3, [pc, #700]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 81038f6:	681b      	ldr	r3, [r3, #0]
 81038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81038fc:	2b00      	cmp	r3, #0
 81038fe:	d1ed      	bne.n	81038dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	681b      	ldr	r3, [r3, #0]
 8103904:	f003 0308 	and.w	r3, r3, #8
 8103908:	2b00      	cmp	r3, #0
 810390a:	f000 80c8 	beq.w	8103a9e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 810390e:	2300      	movs	r3, #0
 8103910:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8103914:	4ba7      	ldr	r3, [pc, #668]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810391a:	f003 0304 	and.w	r3, r3, #4
 810391e:	2b00      	cmp	r3, #0
 8103920:	d111      	bne.n	8103946 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8103922:	4ba4      	ldr	r3, [pc, #656]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103928:	4aa2      	ldr	r2, [pc, #648]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 810392a:	f043 0304 	orr.w	r3, r3, #4
 810392e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8103932:	4ba0      	ldr	r3, [pc, #640]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103938:	f003 0304 	and.w	r3, r3, #4
 810393c:	617b      	str	r3, [r7, #20]
 810393e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8103940:	2301      	movs	r3, #1
 8103942:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8103946:	4b9c      	ldr	r3, [pc, #624]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810394a:	f003 0301 	and.w	r3, r3, #1
 810394e:	2b00      	cmp	r3, #0
 8103950:	d119      	bne.n	8103986 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8103952:	4b99      	ldr	r3, [pc, #612]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103956:	4a98      	ldr	r2, [pc, #608]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103958:	f043 0301 	orr.w	r3, r3, #1
 810395c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 810395e:	f7fd ffb1 	bl	81018c4 <HAL_GetTick>
 8103962:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8103964:	e009      	b.n	810397a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103966:	f7fd ffad 	bl	81018c4 <HAL_GetTick>
 810396a:	4602      	mov	r2, r0
 810396c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810396e:	1ad3      	subs	r3, r2, r3
 8103970:	2b02      	cmp	r3, #2
 8103972:	d902      	bls.n	810397a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8103974:	2303      	movs	r3, #3
 8103976:	f000 bc16 	b.w	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 810397a:	4b8f      	ldr	r3, [pc, #572]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 810397c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810397e:	f003 0301 	and.w	r3, r3, #1
 8103982:	2b00      	cmp	r3, #0
 8103984:	d0ef      	beq.n	8103966 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	695b      	ldr	r3, [r3, #20]
 810398a:	2b00      	cmp	r3, #0
 810398c:	d05f      	beq.n	8103a4e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 810398e:	4b89      	ldr	r3, [pc, #548]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103990:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103994:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	699a      	ldr	r2, [r3, #24]
 810399a:	6a3b      	ldr	r3, [r7, #32]
 810399c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 81039a0:	429a      	cmp	r2, r3
 81039a2:	d037      	beq.n	8103a14 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 81039a4:	6a3b      	ldr	r3, [r7, #32]
 81039a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81039aa:	2b00      	cmp	r3, #0
 81039ac:	d006      	beq.n	81039bc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 81039ae:	6a3b      	ldr	r3, [r7, #32]
 81039b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 81039b4:	2b00      	cmp	r3, #0
 81039b6:	d101      	bne.n	81039bc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 81039b8:	2301      	movs	r3, #1
 81039ba:	e3f4      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 81039bc:	6a3b      	ldr	r3, [r7, #32]
 81039be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81039c2:	2b00      	cmp	r3, #0
 81039c4:	d01b      	beq.n	81039fe <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 81039c6:	4b7b      	ldr	r3, [pc, #492]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 81039c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039cc:	4a79      	ldr	r2, [pc, #484]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 81039ce:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 81039d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 81039d6:	f7fd ff75 	bl	81018c4 <HAL_GetTick>
 81039da:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 81039dc:	e008      	b.n	81039f0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 81039de:	f7fd ff71 	bl	81018c4 <HAL_GetTick>
 81039e2:	4602      	mov	r2, r0
 81039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81039e6:	1ad3      	subs	r3, r2, r3
 81039e8:	2b05      	cmp	r3, #5
 81039ea:	d901      	bls.n	81039f0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 81039ec:	2303      	movs	r3, #3
 81039ee:	e3da      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 81039f0:	4b70      	ldr	r3, [pc, #448]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 81039f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81039f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	d1ef      	bne.n	81039de <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 81039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	699b      	ldr	r3, [r3, #24]
 8103a0c:	4969      	ldr	r1, [pc, #420]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a0e:	4313      	orrs	r3, r2
 8103a10:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8103a14:	4b67      	ldr	r3, [pc, #412]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a1a:	4a66      	ldr	r2, [pc, #408]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103a20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8103a24:	f7fd ff4e 	bl	81018c4 <HAL_GetTick>
 8103a28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8103a2a:	e008      	b.n	8103a3e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8103a2c:	f7fd ff4a 	bl	81018c4 <HAL_GetTick>
 8103a30:	4602      	mov	r2, r0
 8103a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103a34:	1ad3      	subs	r3, r2, r3
 8103a36:	2b05      	cmp	r3, #5
 8103a38:	d901      	bls.n	8103a3e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8103a3a:	2303      	movs	r3, #3
 8103a3c:	e3b3      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8103a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103a48:	2b00      	cmp	r3, #0
 8103a4a:	d0ef      	beq.n	8103a2c <HAL_RCC_OscConfig+0x630>
 8103a4c:	e01b      	b.n	8103a86 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8103a4e:	4b59      	ldr	r3, [pc, #356]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a54:	4a57      	ldr	r2, [pc, #348]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a56:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8103a5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8103a5e:	f7fd ff31 	bl	81018c4 <HAL_GetTick>
 8103a62:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8103a64:	e008      	b.n	8103a78 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8103a66:	f7fd ff2d 	bl	81018c4 <HAL_GetTick>
 8103a6a:	4602      	mov	r2, r0
 8103a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103a6e:	1ad3      	subs	r3, r2, r3
 8103a70:	2b05      	cmp	r3, #5
 8103a72:	d901      	bls.n	8103a78 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8103a74:	2303      	movs	r3, #3
 8103a76:	e396      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8103a78:	4b4e      	ldr	r3, [pc, #312]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103a7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8103a82:	2b00      	cmp	r3, #0
 8103a84:	d1ef      	bne.n	8103a66 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8103a86:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8103a8a:	2b01      	cmp	r3, #1
 8103a8c:	d107      	bne.n	8103a9e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8103a8e:	4b49      	ldr	r3, [pc, #292]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103a94:	4a47      	ldr	r2, [pc, #284]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103a96:	f023 0304 	bic.w	r3, r3, #4
 8103a9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	f003 0304 	and.w	r3, r3, #4
 8103aa6:	2b00      	cmp	r3, #0
 8103aa8:	f000 8111 	beq.w	8103cce <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8103aac:	2300      	movs	r3, #0
 8103aae:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8103ab2:	4b40      	ldr	r3, [pc, #256]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103ab8:	f003 0304 	and.w	r3, r3, #4
 8103abc:	2b00      	cmp	r3, #0
 8103abe:	d111      	bne.n	8103ae4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8103ac0:	4b3c      	ldr	r3, [pc, #240]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103ac8:	f043 0304 	orr.w	r3, r3, #4
 8103acc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8103ad0:	4b38      	ldr	r3, [pc, #224]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103ad6:	f003 0304 	and.w	r3, r3, #4
 8103ada:	613b      	str	r3, [r7, #16]
 8103adc:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8103ade:	2301      	movs	r3, #1
 8103ae0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8103ae4:	4b34      	ldr	r3, [pc, #208]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ae8:	f003 0301 	and.w	r3, r3, #1
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d118      	bne.n	8103b22 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8103af0:	4b31      	ldr	r3, [pc, #196]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103af4:	4a30      	ldr	r2, [pc, #192]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103af6:	f043 0301 	orr.w	r3, r3, #1
 8103afa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8103afc:	f7fd fee2 	bl	81018c4 <HAL_GetTick>
 8103b00:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8103b02:	e008      	b.n	8103b16 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103b04:	f7fd fede 	bl	81018c4 <HAL_GetTick>
 8103b08:	4602      	mov	r2, r0
 8103b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103b0c:	1ad3      	subs	r3, r2, r3
 8103b0e:	2b02      	cmp	r3, #2
 8103b10:	d901      	bls.n	8103b16 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8103b12:	2303      	movs	r3, #3
 8103b14:	e347      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8103b16:	4b28      	ldr	r3, [pc, #160]	@ (8103bb8 <HAL_RCC_OscConfig+0x7bc>)
 8103b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103b1a:	f003 0301 	and.w	r3, r3, #1
 8103b1e:	2b00      	cmp	r3, #0
 8103b20:	d0f0      	beq.n	8103b04 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	689b      	ldr	r3, [r3, #8]
 8103b26:	f003 0301 	and.w	r3, r3, #1
 8103b2a:	2b00      	cmp	r3, #0
 8103b2c:	d01f      	beq.n	8103b6e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	689b      	ldr	r3, [r3, #8]
 8103b32:	f003 0304 	and.w	r3, r3, #4
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	d010      	beq.n	8103b5c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8103b3a:	4b1e      	ldr	r3, [pc, #120]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b40:	4a1c      	ldr	r2, [pc, #112]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b42:	f043 0304 	orr.w	r3, r3, #4
 8103b46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8103b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b50:	4a18      	ldr	r2, [pc, #96]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b52:	f043 0301 	orr.w	r3, r3, #1
 8103b56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103b5a:	e018      	b.n	8103b8e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8103b5c:	4b15      	ldr	r3, [pc, #84]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b62:	4a14      	ldr	r2, [pc, #80]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b64:	f043 0301 	orr.w	r3, r3, #1
 8103b68:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8103b6c:	e00f      	b.n	8103b8e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8103b6e:	4b11      	ldr	r3, [pc, #68]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b74:	4a0f      	ldr	r2, [pc, #60]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b76:	f023 0301 	bic.w	r3, r3, #1
 8103b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8103b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103b84:	4a0b      	ldr	r2, [pc, #44]	@ (8103bb4 <HAL_RCC_OscConfig+0x7b8>)
 8103b86:	f023 0304 	bic.w	r3, r3, #4
 8103b8a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	689b      	ldr	r3, [r3, #8]
 8103b92:	2b00      	cmp	r3, #0
 8103b94:	d057      	beq.n	8103c46 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8103b96:	f7fd fe95 	bl	81018c4 <HAL_GetTick>
 8103b9a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8103b9c:	e00e      	b.n	8103bbc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103b9e:	f7fd fe91 	bl	81018c4 <HAL_GetTick>
 8103ba2:	4602      	mov	r2, r0
 8103ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103ba6:	1ad3      	subs	r3, r2, r3
 8103ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d905      	bls.n	8103bbc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8103bb0:	2303      	movs	r3, #3
 8103bb2:	e2f8      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
 8103bb4:	46020c00 	.word	0x46020c00
 8103bb8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8103bbc:	4b9c      	ldr	r3, [pc, #624]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103bc2:	f003 0302 	and.w	r3, r3, #2
 8103bc6:	2b00      	cmp	r3, #0
 8103bc8:	d0e9      	beq.n	8103b9e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8103bca:	687b      	ldr	r3, [r7, #4]
 8103bcc:	689b      	ldr	r3, [r3, #8]
 8103bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103bd2:	2b00      	cmp	r3, #0
 8103bd4:	d01b      	beq.n	8103c0e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8103bd6:	4b96      	ldr	r3, [pc, #600]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103bdc:	4a94      	ldr	r2, [pc, #592]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8103be2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8103be6:	e00a      	b.n	8103bfe <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103be8:	f7fd fe6c 	bl	81018c4 <HAL_GetTick>
 8103bec:	4602      	mov	r2, r0
 8103bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103bf0:	1ad3      	subs	r3, r2, r3
 8103bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103bf6:	4293      	cmp	r3, r2
 8103bf8:	d901      	bls.n	8103bfe <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8103bfa:	2303      	movs	r3, #3
 8103bfc:	e2d3      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8103bfe:	4b8c      	ldr	r3, [pc, #560]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8103c08:	2b00      	cmp	r3, #0
 8103c0a:	d0ed      	beq.n	8103be8 <HAL_RCC_OscConfig+0x7ec>
 8103c0c:	e053      	b.n	8103cb6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8103c0e:	4b88      	ldr	r3, [pc, #544]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c14:	4a86      	ldr	r2, [pc, #536]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103c1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8103c1e:	e00a      	b.n	8103c36 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103c20:	f7fd fe50 	bl	81018c4 <HAL_GetTick>
 8103c24:	4602      	mov	r2, r0
 8103c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103c28:	1ad3      	subs	r3, r2, r3
 8103c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d901      	bls.n	8103c36 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8103c32:	2303      	movs	r3, #3
 8103c34:	e2b7      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8103c36:	4b7e      	ldr	r3, [pc, #504]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8103c40:	2b00      	cmp	r3, #0
 8103c42:	d1ed      	bne.n	8103c20 <HAL_RCC_OscConfig+0x824>
 8103c44:	e037      	b.n	8103cb6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8103c46:	f7fd fe3d 	bl	81018c4 <HAL_GetTick>
 8103c4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8103c4c:	e00a      	b.n	8103c64 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103c4e:	f7fd fe39 	bl	81018c4 <HAL_GetTick>
 8103c52:	4602      	mov	r2, r0
 8103c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103c56:	1ad3      	subs	r3, r2, r3
 8103c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103c5c:	4293      	cmp	r3, r2
 8103c5e:	d901      	bls.n	8103c64 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8103c60:	2303      	movs	r3, #3
 8103c62:	e2a0      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8103c64:	4b72      	ldr	r3, [pc, #456]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c6a:	f003 0302 	and.w	r3, r3, #2
 8103c6e:	2b00      	cmp	r3, #0
 8103c70:	d1ed      	bne.n	8103c4e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8103c72:	4b6f      	ldr	r3, [pc, #444]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d01a      	beq.n	8103cb6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8103c80:	4b6b      	ldr	r3, [pc, #428]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103c86:	4a6a      	ldr	r2, [pc, #424]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103c88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8103c90:	e00a      	b.n	8103ca8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103c92:	f7fd fe17 	bl	81018c4 <HAL_GetTick>
 8103c96:	4602      	mov	r2, r0
 8103c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103c9a:	1ad3      	subs	r3, r2, r3
 8103c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8103ca0:	4293      	cmp	r3, r2
 8103ca2:	d901      	bls.n	8103ca8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8103ca4:	2303      	movs	r3, #3
 8103ca6:	e27e      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8103ca8:	4b61      	ldr	r3, [pc, #388]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8103cae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	d1ed      	bne.n	8103c92 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8103cb6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8103cba:	2b01      	cmp	r3, #1
 8103cbc:	d107      	bne.n	8103cce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8103cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103cc6:	f023 0304 	bic.w	r3, r3, #4
 8103cca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8103cce:	687b      	ldr	r3, [r7, #4]
 8103cd0:	681b      	ldr	r3, [r3, #0]
 8103cd2:	f003 0320 	and.w	r3, r3, #32
 8103cd6:	2b00      	cmp	r3, #0
 8103cd8:	d036      	beq.n	8103d48 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8103cda:	687b      	ldr	r3, [r7, #4]
 8103cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103cde:	2b00      	cmp	r3, #0
 8103ce0:	d019      	beq.n	8103d16 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8103ce2:	4b53      	ldr	r3, [pc, #332]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	4a52      	ldr	r2, [pc, #328]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8103cec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8103cee:	f7fd fde9 	bl	81018c4 <HAL_GetTick>
 8103cf2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8103cf4:	e008      	b.n	8103d08 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8103cf6:	f7fd fde5 	bl	81018c4 <HAL_GetTick>
 8103cfa:	4602      	mov	r2, r0
 8103cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103cfe:	1ad3      	subs	r3, r2, r3
 8103d00:	2b02      	cmp	r3, #2
 8103d02:	d901      	bls.n	8103d08 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8103d04:	2303      	movs	r3, #3
 8103d06:	e24e      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8103d08:	4b49      	ldr	r3, [pc, #292]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d0a:	681b      	ldr	r3, [r3, #0]
 8103d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d0f0      	beq.n	8103cf6 <HAL_RCC_OscConfig+0x8fa>
 8103d14:	e018      	b.n	8103d48 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8103d16:	4b46      	ldr	r3, [pc, #280]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d18:	681b      	ldr	r3, [r3, #0]
 8103d1a:	4a45      	ldr	r2, [pc, #276]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8103d20:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8103d22:	f7fd fdcf 	bl	81018c4 <HAL_GetTick>
 8103d26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8103d28:	e008      	b.n	8103d3c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8103d2a:	f7fd fdcb 	bl	81018c4 <HAL_GetTick>
 8103d2e:	4602      	mov	r2, r0
 8103d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d32:	1ad3      	subs	r3, r2, r3
 8103d34:	2b02      	cmp	r3, #2
 8103d36:	d901      	bls.n	8103d3c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8103d38:	2303      	movs	r3, #3
 8103d3a:	e234      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8103d3c:	4b3c      	ldr	r3, [pc, #240]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d1f0      	bne.n	8103d2a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	681b      	ldr	r3, [r3, #0]
 8103d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103d50:	2b00      	cmp	r3, #0
 8103d52:	d036      	beq.n	8103dc2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103d58:	2b00      	cmp	r3, #0
 8103d5a:	d019      	beq.n	8103d90 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8103d5c:	4b34      	ldr	r3, [pc, #208]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d5e:	681b      	ldr	r3, [r3, #0]
 8103d60:	4a33      	ldr	r2, [pc, #204]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8103d66:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8103d68:	f7fd fdac 	bl	81018c4 <HAL_GetTick>
 8103d6c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8103d6e:	e008      	b.n	8103d82 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8103d70:	f7fd fda8 	bl	81018c4 <HAL_GetTick>
 8103d74:	4602      	mov	r2, r0
 8103d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103d78:	1ad3      	subs	r3, r2, r3
 8103d7a:	2b02      	cmp	r3, #2
 8103d7c:	d901      	bls.n	8103d82 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8103d7e:	2303      	movs	r3, #3
 8103d80:	e211      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8103d82:	4b2b      	ldr	r3, [pc, #172]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d84:	681b      	ldr	r3, [r3, #0]
 8103d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	d0f0      	beq.n	8103d70 <HAL_RCC_OscConfig+0x974>
 8103d8e:	e018      	b.n	8103dc2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8103d90:	4b27      	ldr	r3, [pc, #156]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	4a26      	ldr	r2, [pc, #152]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103d96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8103d9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8103d9c:	f7fd fd92 	bl	81018c4 <HAL_GetTick>
 8103da0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8103da2:	e008      	b.n	8103db6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8103da4:	f7fd fd8e 	bl	81018c4 <HAL_GetTick>
 8103da8:	4602      	mov	r2, r0
 8103daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103dac:	1ad3      	subs	r3, r2, r3
 8103dae:	2b02      	cmp	r3, #2
 8103db0:	d901      	bls.n	8103db6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8103db2:	2303      	movs	r3, #3
 8103db4:	e1f7      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8103db6:	4b1e      	ldr	r3, [pc, #120]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103db8:	681b      	ldr	r3, [r3, #0]
 8103dba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103dbe:	2b00      	cmp	r3, #0
 8103dc0:	d1f0      	bne.n	8103da4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103dca:	2b00      	cmp	r3, #0
 8103dcc:	d07f      	beq.n	8103ece <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8103dce:	687b      	ldr	r3, [r7, #4]
 8103dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103dd2:	2b00      	cmp	r3, #0
 8103dd4:	d062      	beq.n	8103e9c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8103dd6:	4b16      	ldr	r3, [pc, #88]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103dd8:	689b      	ldr	r3, [r3, #8]
 8103dda:	4a15      	ldr	r2, [pc, #84]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103ddc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103de0:	6093      	str	r3, [r2, #8]
 8103de2:	4b13      	ldr	r3, [pc, #76]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103de4:	689b      	ldr	r3, [r3, #8]
 8103de6:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103dee:	4910      	ldr	r1, [pc, #64]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103df0:	4313      	orrs	r3, r2
 8103df2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103df8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8103dfc:	d309      	bcc.n	8103e12 <HAL_RCC_OscConfig+0xa16>
 8103dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103e00:	68db      	ldr	r3, [r3, #12]
 8103e02:	f023 021f 	bic.w	r2, r3, #31
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6a1b      	ldr	r3, [r3, #32]
 8103e0a:	4909      	ldr	r1, [pc, #36]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103e0c:	4313      	orrs	r3, r2
 8103e0e:	60cb      	str	r3, [r1, #12]
 8103e10:	e02a      	b.n	8103e68 <HAL_RCC_OscConfig+0xa6c>
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	da0c      	bge.n	8103e34 <HAL_RCC_OscConfig+0xa38>
 8103e1a:	4b05      	ldr	r3, [pc, #20]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103e1c:	68db      	ldr	r3, [r3, #12]
 8103e1e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	6a1b      	ldr	r3, [r3, #32]
 8103e26:	015b      	lsls	r3, r3, #5
 8103e28:	4901      	ldr	r1, [pc, #4]	@ (8103e30 <HAL_RCC_OscConfig+0xa34>)
 8103e2a:	4313      	orrs	r3, r2
 8103e2c:	60cb      	str	r3, [r1, #12]
 8103e2e:	e01b      	b.n	8103e68 <HAL_RCC_OscConfig+0xa6c>
 8103e30:	46020c00 	.word	0x46020c00
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103e3c:	d30a      	bcc.n	8103e54 <HAL_RCC_OscConfig+0xa58>
 8103e3e:	4ba1      	ldr	r3, [pc, #644]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e40:	68db      	ldr	r3, [r3, #12]
 8103e42:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	6a1b      	ldr	r3, [r3, #32]
 8103e4a:	029b      	lsls	r3, r3, #10
 8103e4c:	499d      	ldr	r1, [pc, #628]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e4e:	4313      	orrs	r3, r2
 8103e50:	60cb      	str	r3, [r1, #12]
 8103e52:	e009      	b.n	8103e68 <HAL_RCC_OscConfig+0xa6c>
 8103e54:	4b9b      	ldr	r3, [pc, #620]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e56:	68db      	ldr	r3, [r3, #12]
 8103e58:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8103e5c:	687b      	ldr	r3, [r7, #4]
 8103e5e:	6a1b      	ldr	r3, [r3, #32]
 8103e60:	03db      	lsls	r3, r3, #15
 8103e62:	4998      	ldr	r1, [pc, #608]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e64:	4313      	orrs	r3, r2
 8103e66:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8103e68:	4b96      	ldr	r3, [pc, #600]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	4a95      	ldr	r2, [pc, #596]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e6e:	f043 0310 	orr.w	r3, r3, #16
 8103e72:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8103e74:	f7fd fd26 	bl	81018c4 <HAL_GetTick>
 8103e78:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8103e7a:	e008      	b.n	8103e8e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8103e7c:	f7fd fd22 	bl	81018c4 <HAL_GetTick>
 8103e80:	4602      	mov	r2, r0
 8103e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103e84:	1ad3      	subs	r3, r2, r3
 8103e86:	2b02      	cmp	r3, #2
 8103e88:	d901      	bls.n	8103e8e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8103e8a:	2303      	movs	r3, #3
 8103e8c:	e18b      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8103e8e:	4b8d      	ldr	r3, [pc, #564]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e90:	681b      	ldr	r3, [r3, #0]
 8103e92:	f003 0320 	and.w	r3, r3, #32
 8103e96:	2b00      	cmp	r3, #0
 8103e98:	d0f0      	beq.n	8103e7c <HAL_RCC_OscConfig+0xa80>
 8103e9a:	e018      	b.n	8103ece <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8103e9c:	4b89      	ldr	r3, [pc, #548]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	4a88      	ldr	r2, [pc, #544]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ea2:	f023 0310 	bic.w	r3, r3, #16
 8103ea6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8103ea8:	f7fd fd0c 	bl	81018c4 <HAL_GetTick>
 8103eac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8103eae:	e008      	b.n	8103ec2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8103eb0:	f7fd fd08 	bl	81018c4 <HAL_GetTick>
 8103eb4:	4602      	mov	r2, r0
 8103eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103eb8:	1ad3      	subs	r3, r2, r3
 8103eba:	2b02      	cmp	r3, #2
 8103ebc:	d901      	bls.n	8103ec2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8103ebe:	2303      	movs	r3, #3
 8103ec0:	e171      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8103ec2:	4b80      	ldr	r3, [pc, #512]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ec4:	681b      	ldr	r3, [r3, #0]
 8103ec6:	f003 0320 	and.w	r3, r3, #32
 8103eca:	2b00      	cmp	r3, #0
 8103ecc:	d1f0      	bne.n	8103eb0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8103ece:	687b      	ldr	r3, [r7, #4]
 8103ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103ed2:	2b00      	cmp	r3, #0
 8103ed4:	f000 8166 	beq.w	81041a4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8103ed8:	2300      	movs	r3, #0
 8103eda:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8103ede:	4b79      	ldr	r3, [pc, #484]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ee0:	69db      	ldr	r3, [r3, #28]
 8103ee2:	f003 030c 	and.w	r3, r3, #12
 8103ee6:	2b0c      	cmp	r3, #12
 8103ee8:	f000 80f2 	beq.w	81040d0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8103eec:	687b      	ldr	r3, [r7, #4]
 8103eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103ef0:	2b02      	cmp	r3, #2
 8103ef2:	f040 80c5 	bne.w	8104080 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8103ef6:	4b73      	ldr	r3, [pc, #460]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ef8:	681b      	ldr	r3, [r3, #0]
 8103efa:	4a72      	ldr	r2, [pc, #456]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103efc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8103f00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8103f02:	f7fd fcdf 	bl	81018c4 <HAL_GetTick>
 8103f06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8103f08:	e008      	b.n	8103f1c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8103f0a:	f7fd fcdb 	bl	81018c4 <HAL_GetTick>
 8103f0e:	4602      	mov	r2, r0
 8103f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103f12:	1ad3      	subs	r3, r2, r3
 8103f14:	2b02      	cmp	r3, #2
 8103f16:	d901      	bls.n	8103f1c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8103f18:	2303      	movs	r3, #3
 8103f1a:	e144      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8103f1c:	4b69      	ldr	r3, [pc, #420]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8103f24:	2b00      	cmp	r3, #0
 8103f26:	d1f0      	bne.n	8103f0a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8103f28:	4b66      	ldr	r3, [pc, #408]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103f2e:	f003 0304 	and.w	r3, r3, #4
 8103f32:	2b00      	cmp	r3, #0
 8103f34:	d111      	bne.n	8103f5a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8103f36:	4b63      	ldr	r3, [pc, #396]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103f3c:	4a61      	ldr	r2, [pc, #388]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f3e:	f043 0304 	orr.w	r3, r3, #4
 8103f42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8103f46:	4b5f      	ldr	r3, [pc, #380]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103f4c:	f003 0304 	and.w	r3, r3, #4
 8103f50:	60fb      	str	r3, [r7, #12]
 8103f52:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8103f54:	2301      	movs	r3, #1
 8103f56:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8103f5a:	4b5b      	ldr	r3, [pc, #364]	@ (81040c8 <HAL_RCC_OscConfig+0xccc>)
 8103f5c:	68db      	ldr	r3, [r3, #12]
 8103f5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103f62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103f66:	d102      	bne.n	8103f6e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8103f68:	2301      	movs	r3, #1
 8103f6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8103f6e:	4b56      	ldr	r3, [pc, #344]	@ (81040c8 <HAL_RCC_OscConfig+0xccc>)
 8103f70:	68db      	ldr	r3, [r3, #12]
 8103f72:	4a55      	ldr	r2, [pc, #340]	@ (81040c8 <HAL_RCC_OscConfig+0xccc>)
 8103f74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8103f78:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8103f7a:	4b52      	ldr	r3, [pc, #328]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103f82:	f023 0303 	bic.w	r3, r3, #3
 8103f86:	687a      	ldr	r2, [r7, #4]
 8103f88:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8103f8a:	687a      	ldr	r2, [r7, #4]
 8103f8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8103f8e:	3a01      	subs	r2, #1
 8103f90:	0212      	lsls	r2, r2, #8
 8103f92:	4311      	orrs	r1, r2
 8103f94:	687a      	ldr	r2, [r7, #4]
 8103f96:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103f98:	430a      	orrs	r2, r1
 8103f9a:	494a      	ldr	r1, [pc, #296]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103f9c:	4313      	orrs	r3, r2
 8103f9e:	628b      	str	r3, [r1, #40]	@ 0x28
 8103fa0:	4b48      	ldr	r3, [pc, #288]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103fa4:	4b49      	ldr	r3, [pc, #292]	@ (81040cc <HAL_RCC_OscConfig+0xcd0>)
 8103fa6:	4013      	ands	r3, r2
 8103fa8:	687a      	ldr	r2, [r7, #4]
 8103faa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8103fac:	3a01      	subs	r2, #1
 8103fae:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8103fb2:	687a      	ldr	r2, [r7, #4]
 8103fb4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8103fb6:	3a01      	subs	r2, #1
 8103fb8:	0252      	lsls	r2, r2, #9
 8103fba:	b292      	uxth	r2, r2
 8103fbc:	4311      	orrs	r1, r2
 8103fbe:	687a      	ldr	r2, [r7, #4]
 8103fc0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8103fc2:	3a01      	subs	r2, #1
 8103fc4:	0412      	lsls	r2, r2, #16
 8103fc6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8103fca:	4311      	orrs	r1, r2
 8103fcc:	687a      	ldr	r2, [r7, #4]
 8103fce:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8103fd0:	3a01      	subs	r2, #1
 8103fd2:	0612      	lsls	r2, r2, #24
 8103fd4:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8103fd8:	430a      	orrs	r2, r1
 8103fda:	493a      	ldr	r1, [pc, #232]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103fdc:	4313      	orrs	r3, r2
 8103fde:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8103fe0:	4b38      	ldr	r3, [pc, #224]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103fe4:	4a37      	ldr	r2, [pc, #220]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103fe6:	f023 0310 	bic.w	r3, r3, #16
 8103fea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103ff0:	4a34      	ldr	r2, [pc, #208]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ff2:	00db      	lsls	r3, r3, #3
 8103ff4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8103ff6:	4b33      	ldr	r3, [pc, #204]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103ffa:	4a32      	ldr	r2, [pc, #200]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8103ffc:	f043 0310 	orr.w	r3, r3, #16
 8104000:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8104002:	4b30      	ldr	r3, [pc, #192]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104006:	f023 020c 	bic.w	r2, r3, #12
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810400e:	492d      	ldr	r1, [pc, #180]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104010:	4313      	orrs	r3, r2
 8104012:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8104014:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8104018:	2b01      	cmp	r3, #1
 810401a:	d105      	bne.n	8104028 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 810401c:	4b2a      	ldr	r3, [pc, #168]	@ (81040c8 <HAL_RCC_OscConfig+0xccc>)
 810401e:	68db      	ldr	r3, [r3, #12]
 8104020:	4a29      	ldr	r2, [pc, #164]	@ (81040c8 <HAL_RCC_OscConfig+0xccc>)
 8104022:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8104026:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8104028:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 810402c:	2b01      	cmp	r3, #1
 810402e:	d107      	bne.n	8104040 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8104030:	4b24      	ldr	r3, [pc, #144]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104032:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104036:	4a23      	ldr	r2, [pc, #140]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104038:	f023 0304 	bic.w	r3, r3, #4
 810403c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8104040:	4b20      	ldr	r3, [pc, #128]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	4a1f      	ldr	r2, [pc, #124]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104046:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810404a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 810404c:	f7fd fc3a 	bl	81018c4 <HAL_GetTick>
 8104050:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8104052:	e008      	b.n	8104066 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8104054:	f7fd fc36 	bl	81018c4 <HAL_GetTick>
 8104058:	4602      	mov	r2, r0
 810405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810405c:	1ad3      	subs	r3, r2, r3
 810405e:	2b02      	cmp	r3, #2
 8104060:	d901      	bls.n	8104066 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8104062:	2303      	movs	r3, #3
 8104064:	e09f      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8104066:	4b17      	ldr	r3, [pc, #92]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810406e:	2b00      	cmp	r3, #0
 8104070:	d0f0      	beq.n	8104054 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8104072:	4b14      	ldr	r3, [pc, #80]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104076:	4a13      	ldr	r2, [pc, #76]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810407c:	6293      	str	r3, [r2, #40]	@ 0x28
 810407e:	e091      	b.n	81041a4 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8104080:	4b10      	ldr	r3, [pc, #64]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104082:	681b      	ldr	r3, [r3, #0]
 8104084:	4a0f      	ldr	r2, [pc, #60]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 8104086:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810408a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 810408c:	f7fd fc1a 	bl	81018c4 <HAL_GetTick>
 8104090:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8104092:	e008      	b.n	81040a6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8104094:	f7fd fc16 	bl	81018c4 <HAL_GetTick>
 8104098:	4602      	mov	r2, r0
 810409a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810409c:	1ad3      	subs	r3, r2, r3
 810409e:	2b02      	cmp	r3, #2
 81040a0:	d901      	bls.n	81040a6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 81040a2:	2303      	movs	r3, #3
 81040a4:	e07f      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 81040a6:	4b07      	ldr	r3, [pc, #28]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d1f0      	bne.n	8104094 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 81040b2:	4b04      	ldr	r3, [pc, #16]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 81040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81040b6:	4a03      	ldr	r2, [pc, #12]	@ (81040c4 <HAL_RCC_OscConfig+0xcc8>)
 81040b8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 81040bc:	f023 0303 	bic.w	r3, r3, #3
 81040c0:	6293      	str	r3, [r2, #40]	@ 0x28
 81040c2:	e06f      	b.n	81041a4 <HAL_RCC_OscConfig+0xda8>
 81040c4:	46020c00 	.word	0x46020c00
 81040c8:	46020800 	.word	0x46020800
 81040cc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 81040d0:	4b37      	ldr	r3, [pc, #220]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 81040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81040d4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 81040d6:	4b36      	ldr	r3, [pc, #216]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 81040d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81040da:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81040e0:	2b01      	cmp	r3, #1
 81040e2:	d039      	beq.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 81040e4:	69fb      	ldr	r3, [r7, #28]
 81040e6:	f003 0203 	and.w	r2, r3, #3
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 81040ee:	429a      	cmp	r2, r3
 81040f0:	d132      	bne.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 81040f2:	69fb      	ldr	r3, [r7, #28]
 81040f4:	0a1b      	lsrs	r3, r3, #8
 81040f6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81040fe:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8104100:	429a      	cmp	r2, r3
 8104102:	d129      	bne.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8104104:	69fb      	ldr	r3, [r7, #28]
 8104106:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 810410a:	687b      	ldr	r3, [r7, #4]
 810410c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 810410e:	429a      	cmp	r2, r3
 8104110:	d122      	bne.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8104112:	69bb      	ldr	r3, [r7, #24]
 8104114:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810411c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 810411e:	429a      	cmp	r2, r3
 8104120:	d11a      	bne.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8104122:	69bb      	ldr	r3, [r7, #24]
 8104124:	0a5b      	lsrs	r3, r3, #9
 8104126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 810412a:	687b      	ldr	r3, [r7, #4]
 810412c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810412e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8104130:	429a      	cmp	r2, r3
 8104132:	d111      	bne.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8104134:	69bb      	ldr	r3, [r7, #24]
 8104136:	0c1b      	lsrs	r3, r3, #16
 8104138:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104140:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8104142:	429a      	cmp	r2, r3
 8104144:	d108      	bne.n	8104158 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8104146:	69bb      	ldr	r3, [r7, #24]
 8104148:	0e1b      	lsrs	r3, r3, #24
 810414a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 810414e:	687b      	ldr	r3, [r7, #4]
 8104150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104152:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8104154:	429a      	cmp	r2, r3
 8104156:	d001      	beq.n	810415c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8104158:	2301      	movs	r3, #1
 810415a:	e024      	b.n	81041a6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 810415c:	4b14      	ldr	r3, [pc, #80]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 810415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104160:	08db      	lsrs	r3, r3, #3
 8104162:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8104166:	687b      	ldr	r3, [r7, #4]
 8104168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 810416a:	429a      	cmp	r2, r3
 810416c:	d01a      	beq.n	81041a4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 810416e:	4b10      	ldr	r3, [pc, #64]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 8104170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104172:	4a0f      	ldr	r2, [pc, #60]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 8104174:	f023 0310 	bic.w	r3, r3, #16
 8104178:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810417a:	f7fd fba3 	bl	81018c4 <HAL_GetTick>
 810417e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8104180:	bf00      	nop
 8104182:	f7fd fb9f 	bl	81018c4 <HAL_GetTick>
 8104186:	4602      	mov	r2, r0
 8104188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810418a:	4293      	cmp	r3, r2
 810418c:	d0f9      	beq.n	8104182 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104192:	4a07      	ldr	r2, [pc, #28]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 8104194:	00db      	lsls	r3, r3, #3
 8104196:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8104198:	4b05      	ldr	r3, [pc, #20]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 810419a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810419c:	4a04      	ldr	r2, [pc, #16]	@ (81041b0 <HAL_RCC_OscConfig+0xdb4>)
 810419e:	f043 0310 	orr.w	r3, r3, #16
 81041a2:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 81041a4:	2300      	movs	r3, #0
}
 81041a6:	4618      	mov	r0, r3
 81041a8:	3738      	adds	r7, #56	@ 0x38
 81041aa:	46bd      	mov	sp, r7
 81041ac:	bd80      	pop	{r7, pc}
 81041ae:	bf00      	nop
 81041b0:	46020c00 	.word	0x46020c00

081041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 81041b4:	b580      	push	{r7, lr}
 81041b6:	b086      	sub	sp, #24
 81041b8:	af00      	add	r7, sp, #0
 81041ba:	6078      	str	r0, [r7, #4]
 81041bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 81041be:	687b      	ldr	r3, [r7, #4]
 81041c0:	2b00      	cmp	r3, #0
 81041c2:	d101      	bne.n	81041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 81041c4:	2301      	movs	r3, #1
 81041c6:	e1d9      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 81041c8:	4b9b      	ldr	r3, [pc, #620]	@ (8104438 <HAL_RCC_ClockConfig+0x284>)
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	f003 030f 	and.w	r3, r3, #15
 81041d0:	683a      	ldr	r2, [r7, #0]
 81041d2:	429a      	cmp	r2, r3
 81041d4:	d910      	bls.n	81041f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 81041d6:	4b98      	ldr	r3, [pc, #608]	@ (8104438 <HAL_RCC_ClockConfig+0x284>)
 81041d8:	681b      	ldr	r3, [r3, #0]
 81041da:	f023 020f 	bic.w	r2, r3, #15
 81041de:	4996      	ldr	r1, [pc, #600]	@ (8104438 <HAL_RCC_ClockConfig+0x284>)
 81041e0:	683b      	ldr	r3, [r7, #0]
 81041e2:	4313      	orrs	r3, r2
 81041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 81041e6:	4b94      	ldr	r3, [pc, #592]	@ (8104438 <HAL_RCC_ClockConfig+0x284>)
 81041e8:	681b      	ldr	r3, [r3, #0]
 81041ea:	f003 030f 	and.w	r3, r3, #15
 81041ee:	683a      	ldr	r2, [r7, #0]
 81041f0:	429a      	cmp	r2, r3
 81041f2:	d001      	beq.n	81041f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 81041f4:	2301      	movs	r3, #1
 81041f6:	e1c1      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 81041f8:	687b      	ldr	r3, [r7, #4]
 81041fa:	681b      	ldr	r3, [r3, #0]
 81041fc:	f003 0310 	and.w	r3, r3, #16
 8104200:	2b00      	cmp	r3, #0
 8104202:	d010      	beq.n	8104226 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	695a      	ldr	r2, [r3, #20]
 8104208:	4b8c      	ldr	r3, [pc, #560]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 810420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810420c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8104210:	429a      	cmp	r2, r3
 8104212:	d908      	bls.n	8104226 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8104214:	4b89      	ldr	r3, [pc, #548]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104218:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	695b      	ldr	r3, [r3, #20]
 8104220:	4986      	ldr	r1, [pc, #536]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104222:	4313      	orrs	r3, r2
 8104224:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	f003 0308 	and.w	r3, r3, #8
 810422e:	2b00      	cmp	r3, #0
 8104230:	d012      	beq.n	8104258 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8104232:	687b      	ldr	r3, [r7, #4]
 8104234:	691a      	ldr	r2, [r3, #16]
 8104236:	4b81      	ldr	r3, [pc, #516]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104238:	6a1b      	ldr	r3, [r3, #32]
 810423a:	091b      	lsrs	r3, r3, #4
 810423c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8104240:	429a      	cmp	r2, r3
 8104242:	d909      	bls.n	8104258 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8104244:	4b7d      	ldr	r3, [pc, #500]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104246:	6a1b      	ldr	r3, [r3, #32]
 8104248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 810424c:	687b      	ldr	r3, [r7, #4]
 810424e:	691b      	ldr	r3, [r3, #16]
 8104250:	011b      	lsls	r3, r3, #4
 8104252:	497a      	ldr	r1, [pc, #488]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104254:	4313      	orrs	r3, r2
 8104256:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	f003 0304 	and.w	r3, r3, #4
 8104260:	2b00      	cmp	r3, #0
 8104262:	d010      	beq.n	8104286 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	68da      	ldr	r2, [r3, #12]
 8104268:	4b74      	ldr	r3, [pc, #464]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 810426a:	6a1b      	ldr	r3, [r3, #32]
 810426c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8104270:	429a      	cmp	r2, r3
 8104272:	d908      	bls.n	8104286 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8104274:	4b71      	ldr	r3, [pc, #452]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104276:	6a1b      	ldr	r3, [r3, #32]
 8104278:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810427c:	687b      	ldr	r3, [r7, #4]
 810427e:	68db      	ldr	r3, [r3, #12]
 8104280:	496e      	ldr	r1, [pc, #440]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104282:	4313      	orrs	r3, r2
 8104284:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	681b      	ldr	r3, [r3, #0]
 810428a:	f003 0302 	and.w	r3, r3, #2
 810428e:	2b00      	cmp	r3, #0
 8104290:	d010      	beq.n	81042b4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8104292:	687b      	ldr	r3, [r7, #4]
 8104294:	689a      	ldr	r2, [r3, #8]
 8104296:	4b69      	ldr	r3, [pc, #420]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104298:	6a1b      	ldr	r3, [r3, #32]
 810429a:	f003 030f 	and.w	r3, r3, #15
 810429e:	429a      	cmp	r2, r3
 81042a0:	d908      	bls.n	81042b4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 81042a2:	4b66      	ldr	r3, [pc, #408]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81042a4:	6a1b      	ldr	r3, [r3, #32]
 81042a6:	f023 020f 	bic.w	r2, r3, #15
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	689b      	ldr	r3, [r3, #8]
 81042ae:	4963      	ldr	r1, [pc, #396]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81042b0:	4313      	orrs	r3, r2
 81042b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 81042b4:	687b      	ldr	r3, [r7, #4]
 81042b6:	681b      	ldr	r3, [r3, #0]
 81042b8:	f003 0301 	and.w	r3, r3, #1
 81042bc:	2b00      	cmp	r3, #0
 81042be:	f000 80d2 	beq.w	8104466 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 81042c2:	2300      	movs	r3, #0
 81042c4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 81042c6:	687b      	ldr	r3, [r7, #4]
 81042c8:	685b      	ldr	r3, [r3, #4]
 81042ca:	2b03      	cmp	r3, #3
 81042cc:	d143      	bne.n	8104356 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 81042ce:	4b5b      	ldr	r3, [pc, #364]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81042d4:	f003 0304 	and.w	r3, r3, #4
 81042d8:	2b00      	cmp	r3, #0
 81042da:	d110      	bne.n	81042fe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 81042dc:	4b57      	ldr	r3, [pc, #348]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81042de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81042e2:	4a56      	ldr	r2, [pc, #344]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81042e4:	f043 0304 	orr.w	r3, r3, #4
 81042e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 81042ec:	4b53      	ldr	r3, [pc, #332]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81042ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81042f2:	f003 0304 	and.w	r3, r3, #4
 81042f6:	60bb      	str	r3, [r7, #8]
 81042f8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 81042fa:	2301      	movs	r3, #1
 81042fc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 81042fe:	f7fd fae1 	bl	81018c4 <HAL_GetTick>
 8104302:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8104304:	4b4e      	ldr	r3, [pc, #312]	@ (8104440 <HAL_RCC_ClockConfig+0x28c>)
 8104306:	68db      	ldr	r3, [r3, #12]
 8104308:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810430c:	2b00      	cmp	r3, #0
 810430e:	d00f      	beq.n	8104330 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8104310:	e008      	b.n	8104324 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8104312:	f7fd fad7 	bl	81018c4 <HAL_GetTick>
 8104316:	4602      	mov	r2, r0
 8104318:	693b      	ldr	r3, [r7, #16]
 810431a:	1ad3      	subs	r3, r2, r3
 810431c:	2b02      	cmp	r3, #2
 810431e:	d901      	bls.n	8104324 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8104320:	2303      	movs	r3, #3
 8104322:	e12b      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8104324:	4b46      	ldr	r3, [pc, #280]	@ (8104440 <HAL_RCC_ClockConfig+0x28c>)
 8104326:	68db      	ldr	r3, [r3, #12]
 8104328:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810432c:	2b00      	cmp	r3, #0
 810432e:	d0f0      	beq.n	8104312 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8104330:	7dfb      	ldrb	r3, [r7, #23]
 8104332:	2b01      	cmp	r3, #1
 8104334:	d107      	bne.n	8104346 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8104336:	4b41      	ldr	r3, [pc, #260]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810433c:	4a3f      	ldr	r2, [pc, #252]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 810433e:	f023 0304 	bic.w	r3, r3, #4
 8104342:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8104346:	4b3d      	ldr	r3, [pc, #244]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104348:	681b      	ldr	r3, [r3, #0]
 810434a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810434e:	2b00      	cmp	r3, #0
 8104350:	d121      	bne.n	8104396 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8104352:	2301      	movs	r3, #1
 8104354:	e112      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	685b      	ldr	r3, [r3, #4]
 810435a:	2b02      	cmp	r3, #2
 810435c:	d107      	bne.n	810436e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 810435e:	4b37      	ldr	r3, [pc, #220]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8104366:	2b00      	cmp	r3, #0
 8104368:	d115      	bne.n	8104396 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 810436a:	2301      	movs	r3, #1
 810436c:	e106      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	685b      	ldr	r3, [r3, #4]
 8104372:	2b00      	cmp	r3, #0
 8104374:	d107      	bne.n	8104386 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8104376:	4b31      	ldr	r3, [pc, #196]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104378:	681b      	ldr	r3, [r3, #0]
 810437a:	f003 0304 	and.w	r3, r3, #4
 810437e:	2b00      	cmp	r3, #0
 8104380:	d109      	bne.n	8104396 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8104382:	2301      	movs	r3, #1
 8104384:	e0fa      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8104386:	4b2d      	ldr	r3, [pc, #180]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104388:	681b      	ldr	r3, [r3, #0]
 810438a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810438e:	2b00      	cmp	r3, #0
 8104390:	d101      	bne.n	8104396 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8104392:	2301      	movs	r3, #1
 8104394:	e0f2      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8104396:	4b29      	ldr	r3, [pc, #164]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 8104398:	69db      	ldr	r3, [r3, #28]
 810439a:	f023 0203 	bic.w	r2, r3, #3
 810439e:	687b      	ldr	r3, [r7, #4]
 81043a0:	685b      	ldr	r3, [r3, #4]
 81043a2:	4926      	ldr	r1, [pc, #152]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81043a4:	4313      	orrs	r3, r2
 81043a6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 81043a8:	f7fd fa8c 	bl	81018c4 <HAL_GetTick>
 81043ac:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	685b      	ldr	r3, [r3, #4]
 81043b2:	2b03      	cmp	r3, #3
 81043b4:	d112      	bne.n	81043dc <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 81043b6:	e00a      	b.n	81043ce <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 81043b8:	f7fd fa84 	bl	81018c4 <HAL_GetTick>
 81043bc:	4602      	mov	r2, r0
 81043be:	693b      	ldr	r3, [r7, #16]
 81043c0:	1ad3      	subs	r3, r2, r3
 81043c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d901      	bls.n	81043ce <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 81043ca:	2303      	movs	r3, #3
 81043cc:	e0d6      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 81043ce:	4b1b      	ldr	r3, [pc, #108]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81043d0:	69db      	ldr	r3, [r3, #28]
 81043d2:	f003 030c 	and.w	r3, r3, #12
 81043d6:	2b0c      	cmp	r3, #12
 81043d8:	d1ee      	bne.n	81043b8 <HAL_RCC_ClockConfig+0x204>
 81043da:	e044      	b.n	8104466 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 81043dc:	687b      	ldr	r3, [r7, #4]
 81043de:	685b      	ldr	r3, [r3, #4]
 81043e0:	2b02      	cmp	r3, #2
 81043e2:	d112      	bne.n	810440a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 81043e4:	e00a      	b.n	81043fc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 81043e6:	f7fd fa6d 	bl	81018c4 <HAL_GetTick>
 81043ea:	4602      	mov	r2, r0
 81043ec:	693b      	ldr	r3, [r7, #16]
 81043ee:	1ad3      	subs	r3, r2, r3
 81043f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 81043f4:	4293      	cmp	r3, r2
 81043f6:	d901      	bls.n	81043fc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 81043f8:	2303      	movs	r3, #3
 81043fa:	e0bf      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 81043fc:	4b0f      	ldr	r3, [pc, #60]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 81043fe:	69db      	ldr	r3, [r3, #28]
 8104400:	f003 030c 	and.w	r3, r3, #12
 8104404:	2b08      	cmp	r3, #8
 8104406:	d1ee      	bne.n	81043e6 <HAL_RCC_ClockConfig+0x232>
 8104408:	e02d      	b.n	8104466 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	685b      	ldr	r3, [r3, #4]
 810440e:	2b00      	cmp	r3, #0
 8104410:	d123      	bne.n	810445a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8104412:	e00a      	b.n	810442a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8104414:	f7fd fa56 	bl	81018c4 <HAL_GetTick>
 8104418:	4602      	mov	r2, r0
 810441a:	693b      	ldr	r3, [r7, #16]
 810441c:	1ad3      	subs	r3, r2, r3
 810441e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8104422:	4293      	cmp	r3, r2
 8104424:	d901      	bls.n	810442a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8104426:	2303      	movs	r3, #3
 8104428:	e0a8      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 810442a:	4b04      	ldr	r3, [pc, #16]	@ (810443c <HAL_RCC_ClockConfig+0x288>)
 810442c:	69db      	ldr	r3, [r3, #28]
 810442e:	f003 030c 	and.w	r3, r3, #12
 8104432:	2b00      	cmp	r3, #0
 8104434:	d1ee      	bne.n	8104414 <HAL_RCC_ClockConfig+0x260>
 8104436:	e016      	b.n	8104466 <HAL_RCC_ClockConfig+0x2b2>
 8104438:	40022000 	.word	0x40022000
 810443c:	46020c00 	.word	0x46020c00
 8104440:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8104444:	f7fd fa3e 	bl	81018c4 <HAL_GetTick>
 8104448:	4602      	mov	r2, r0
 810444a:	693b      	ldr	r3, [r7, #16]
 810444c:	1ad3      	subs	r3, r2, r3
 810444e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8104452:	4293      	cmp	r3, r2
 8104454:	d901      	bls.n	810445a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8104456:	2303      	movs	r3, #3
 8104458:	e090      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 810445a:	4b4a      	ldr	r3, [pc, #296]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 810445c:	69db      	ldr	r3, [r3, #28]
 810445e:	f003 030c 	and.w	r3, r3, #12
 8104462:	2b04      	cmp	r3, #4
 8104464:	d1ee      	bne.n	8104444 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8104466:	687b      	ldr	r3, [r7, #4]
 8104468:	681b      	ldr	r3, [r3, #0]
 810446a:	f003 0302 	and.w	r3, r3, #2
 810446e:	2b00      	cmp	r3, #0
 8104470:	d010      	beq.n	8104494 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	689a      	ldr	r2, [r3, #8]
 8104476:	4b43      	ldr	r3, [pc, #268]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104478:	6a1b      	ldr	r3, [r3, #32]
 810447a:	f003 030f 	and.w	r3, r3, #15
 810447e:	429a      	cmp	r2, r3
 8104480:	d208      	bcs.n	8104494 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8104482:	4b40      	ldr	r3, [pc, #256]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104484:	6a1b      	ldr	r3, [r3, #32]
 8104486:	f023 020f 	bic.w	r2, r3, #15
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	689b      	ldr	r3, [r3, #8]
 810448e:	493d      	ldr	r1, [pc, #244]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104490:	4313      	orrs	r3, r2
 8104492:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8104494:	4b3c      	ldr	r3, [pc, #240]	@ (8104588 <HAL_RCC_ClockConfig+0x3d4>)
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	f003 030f 	and.w	r3, r3, #15
 810449c:	683a      	ldr	r2, [r7, #0]
 810449e:	429a      	cmp	r2, r3
 81044a0:	d210      	bcs.n	81044c4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 81044a2:	4b39      	ldr	r3, [pc, #228]	@ (8104588 <HAL_RCC_ClockConfig+0x3d4>)
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	f023 020f 	bic.w	r2, r3, #15
 81044aa:	4937      	ldr	r1, [pc, #220]	@ (8104588 <HAL_RCC_ClockConfig+0x3d4>)
 81044ac:	683b      	ldr	r3, [r7, #0]
 81044ae:	4313      	orrs	r3, r2
 81044b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 81044b2:	4b35      	ldr	r3, [pc, #212]	@ (8104588 <HAL_RCC_ClockConfig+0x3d4>)
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	f003 030f 	and.w	r3, r3, #15
 81044ba:	683a      	ldr	r2, [r7, #0]
 81044bc:	429a      	cmp	r2, r3
 81044be:	d001      	beq.n	81044c4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 81044c0:	2301      	movs	r3, #1
 81044c2:	e05b      	b.n	810457c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	681b      	ldr	r3, [r3, #0]
 81044c8:	f003 0304 	and.w	r3, r3, #4
 81044cc:	2b00      	cmp	r3, #0
 81044ce:	d010      	beq.n	81044f2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	68da      	ldr	r2, [r3, #12]
 81044d4:	4b2b      	ldr	r3, [pc, #172]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 81044d6:	6a1b      	ldr	r3, [r3, #32]
 81044d8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 81044dc:	429a      	cmp	r2, r3
 81044de:	d208      	bcs.n	81044f2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 81044e0:	4b28      	ldr	r3, [pc, #160]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 81044e2:	6a1b      	ldr	r3, [r3, #32]
 81044e4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 81044e8:	687b      	ldr	r3, [r7, #4]
 81044ea:	68db      	ldr	r3, [r3, #12]
 81044ec:	4925      	ldr	r1, [pc, #148]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 81044ee:	4313      	orrs	r3, r2
 81044f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	f003 0308 	and.w	r3, r3, #8
 81044fa:	2b00      	cmp	r3, #0
 81044fc:	d012      	beq.n	8104524 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	691a      	ldr	r2, [r3, #16]
 8104502:	4b20      	ldr	r3, [pc, #128]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104504:	6a1b      	ldr	r3, [r3, #32]
 8104506:	091b      	lsrs	r3, r3, #4
 8104508:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 810450c:	429a      	cmp	r2, r3
 810450e:	d209      	bcs.n	8104524 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8104510:	4b1c      	ldr	r3, [pc, #112]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104512:	6a1b      	ldr	r3, [r3, #32]
 8104514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	691b      	ldr	r3, [r3, #16]
 810451c:	011b      	lsls	r3, r3, #4
 810451e:	4919      	ldr	r1, [pc, #100]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104520:	4313      	orrs	r3, r2
 8104522:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	f003 0310 	and.w	r3, r3, #16
 810452c:	2b00      	cmp	r3, #0
 810452e:	d010      	beq.n	8104552 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	695a      	ldr	r2, [r3, #20]
 8104534:	4b13      	ldr	r3, [pc, #76]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104538:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 810453c:	429a      	cmp	r2, r3
 810453e:	d208      	bcs.n	8104552 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8104540:	4b10      	ldr	r3, [pc, #64]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 8104542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104544:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	695b      	ldr	r3, [r3, #20]
 810454c:	490d      	ldr	r1, [pc, #52]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 810454e:	4313      	orrs	r3, r2
 8104550:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8104552:	f000 f821 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8104556:	4602      	mov	r2, r0
 8104558:	4b0a      	ldr	r3, [pc, #40]	@ (8104584 <HAL_RCC_ClockConfig+0x3d0>)
 810455a:	6a1b      	ldr	r3, [r3, #32]
 810455c:	f003 030f 	and.w	r3, r3, #15
 8104560:	490a      	ldr	r1, [pc, #40]	@ (810458c <HAL_RCC_ClockConfig+0x3d8>)
 8104562:	5ccb      	ldrb	r3, [r1, r3]
 8104564:	fa22 f303 	lsr.w	r3, r2, r3
 8104568:	4a09      	ldr	r2, [pc, #36]	@ (8104590 <HAL_RCC_ClockConfig+0x3dc>)
 810456a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 810456c:	4b09      	ldr	r3, [pc, #36]	@ (8104594 <HAL_RCC_ClockConfig+0x3e0>)
 810456e:	681b      	ldr	r3, [r3, #0]
 8104570:	4618      	mov	r0, r3
 8104572:	f7fc fd4f 	bl	8101014 <HAL_InitTick>
 8104576:	4603      	mov	r3, r0
 8104578:	73fb      	strb	r3, [r7, #15]

  return status;
 810457a:	7bfb      	ldrb	r3, [r7, #15]
}
 810457c:	4618      	mov	r0, r3
 810457e:	3718      	adds	r7, #24
 8104580:	46bd      	mov	sp, r7
 8104582:	bd80      	pop	{r7, pc}
 8104584:	46020c00 	.word	0x46020c00
 8104588:	40022000 	.word	0x40022000
 810458c:	081092e8 	.word	0x081092e8
 8104590:	20000000 	.word	0x20000000
 8104594:	20000020 	.word	0x20000020

08104598 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104598:	b480      	push	{r7}
 810459a:	b08b      	sub	sp, #44	@ 0x2c
 810459c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 810459e:	2300      	movs	r3, #0
 81045a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 81045a2:	2300      	movs	r3, #0
 81045a4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 81045a6:	4b78      	ldr	r3, [pc, #480]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81045a8:	69db      	ldr	r3, [r3, #28]
 81045aa:	f003 030c 	and.w	r3, r3, #12
 81045ae:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 81045b0:	4b75      	ldr	r3, [pc, #468]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81045b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81045b4:	f003 0303 	and.w	r3, r3, #3
 81045b8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 81045ba:	69bb      	ldr	r3, [r7, #24]
 81045bc:	2b00      	cmp	r3, #0
 81045be:	d005      	beq.n	81045cc <HAL_RCC_GetSysClockFreq+0x34>
 81045c0:	69bb      	ldr	r3, [r7, #24]
 81045c2:	2b0c      	cmp	r3, #12
 81045c4:	d121      	bne.n	810460a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 81045c6:	697b      	ldr	r3, [r7, #20]
 81045c8:	2b01      	cmp	r3, #1
 81045ca:	d11e      	bne.n	810460a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 81045cc:	4b6e      	ldr	r3, [pc, #440]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81045ce:	689b      	ldr	r3, [r3, #8]
 81045d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81045d4:	2b00      	cmp	r3, #0
 81045d6:	d107      	bne.n	81045e8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 81045d8:	4b6b      	ldr	r3, [pc, #428]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81045da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81045de:	0b1b      	lsrs	r3, r3, #12
 81045e0:	f003 030f 	and.w	r3, r3, #15
 81045e4:	627b      	str	r3, [r7, #36]	@ 0x24
 81045e6:	e005      	b.n	81045f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 81045e8:	4b67      	ldr	r3, [pc, #412]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81045ea:	689b      	ldr	r3, [r3, #8]
 81045ec:	0f1b      	lsrs	r3, r3, #28
 81045ee:	f003 030f 	and.w	r3, r3, #15
 81045f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 81045f4:	4a65      	ldr	r2, [pc, #404]	@ (810478c <HAL_RCC_GetSysClockFreq+0x1f4>)
 81045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81045f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81045fc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 81045fe:	69bb      	ldr	r3, [r7, #24]
 8104600:	2b00      	cmp	r3, #0
 8104602:	d110      	bne.n	8104626 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8104604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104606:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8104608:	e00d      	b.n	8104626 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 810460a:	4b5f      	ldr	r3, [pc, #380]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 810460c:	69db      	ldr	r3, [r3, #28]
 810460e:	f003 030c 	and.w	r3, r3, #12
 8104612:	2b04      	cmp	r3, #4
 8104614:	d102      	bne.n	810461c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8104616:	4b5e      	ldr	r3, [pc, #376]	@ (8104790 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8104618:	623b      	str	r3, [r7, #32]
 810461a:	e004      	b.n	8104626 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 810461c:	69bb      	ldr	r3, [r7, #24]
 810461e:	2b08      	cmp	r3, #8
 8104620:	d101      	bne.n	8104626 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8104622:	4b5b      	ldr	r3, [pc, #364]	@ (8104790 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8104624:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8104626:	69bb      	ldr	r3, [r7, #24]
 8104628:	2b0c      	cmp	r3, #12
 810462a:	f040 80a5 	bne.w	8104778 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 810462e:	4b56      	ldr	r3, [pc, #344]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8104630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104632:	f003 0303 	and.w	r3, r3, #3
 8104636:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8104638:	4b53      	ldr	r3, [pc, #332]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 810463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810463c:	0a1b      	lsrs	r3, r3, #8
 810463e:	f003 030f 	and.w	r3, r3, #15
 8104642:	3301      	adds	r3, #1
 8104644:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8104646:	4b50      	ldr	r3, [pc, #320]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8104648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810464a:	091b      	lsrs	r3, r3, #4
 810464c:	f003 0301 	and.w	r3, r3, #1
 8104650:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8104652:	4b4d      	ldr	r3, [pc, #308]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8104654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104656:	08db      	lsrs	r3, r3, #3
 8104658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810465c:	68ba      	ldr	r2, [r7, #8]
 810465e:	fb02 f303 	mul.w	r3, r2, r3
 8104662:	ee07 3a90 	vmov	s15, r3
 8104666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810466a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 810466e:	693b      	ldr	r3, [r7, #16]
 8104670:	2b02      	cmp	r3, #2
 8104672:	d003      	beq.n	810467c <HAL_RCC_GetSysClockFreq+0xe4>
 8104674:	693b      	ldr	r3, [r7, #16]
 8104676:	2b03      	cmp	r3, #3
 8104678:	d022      	beq.n	81046c0 <HAL_RCC_GetSysClockFreq+0x128>
 810467a:	e043      	b.n	8104704 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	ee07 3a90 	vmov	s15, r3
 8104682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104686:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8104794 <HAL_RCC_GetSysClockFreq+0x1fc>
 810468a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810468e:	4b3e      	ldr	r3, [pc, #248]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8104690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104696:	ee07 3a90 	vmov	s15, r3
 810469a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 810469e:	ed97 6a01 	vldr	s12, [r7, #4]
 81046a2:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8104798 <HAL_RCC_GetSysClockFreq+0x200>
 81046a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81046aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 81046ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81046b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81046be:	e046      	b.n	810474e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81046c0:	68fb      	ldr	r3, [r7, #12]
 81046c2:	ee07 3a90 	vmov	s15, r3
 81046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046ca:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8104794 <HAL_RCC_GetSysClockFreq+0x1fc>
 81046ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046d2:	4b2d      	ldr	r3, [pc, #180]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 81046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81046d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046da:	ee07 3a90 	vmov	s15, r3
 81046de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 81046e2:	ed97 6a01 	vldr	s12, [r7, #4]
 81046e6:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8104798 <HAL_RCC_GetSysClockFreq+0x200>
 81046ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81046ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 81046f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81046f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81046fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104702:	e024      	b.n	810474e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104706:	ee07 3a90 	vmov	s15, r3
 810470a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810470e:	68fb      	ldr	r3, [r7, #12]
 8104710:	ee07 3a90 	vmov	s15, r3
 8104714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104718:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810471c:	4b1a      	ldr	r3, [pc, #104]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 810471e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104724:	ee07 3a90 	vmov	s15, r3
 8104728:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 810472c:	ed97 6a01 	vldr	s12, [r7, #4]
 8104730:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8104798 <HAL_RCC_GetSysClockFreq+0x200>
 8104734:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104738:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 810473c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104740:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8104744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104748:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810474c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 810474e:	4b0e      	ldr	r3, [pc, #56]	@ (8104788 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8104750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8104752:	0e1b      	lsrs	r3, r3, #24
 8104754:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104758:	3301      	adds	r3, #1
 810475a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 810475c:	683b      	ldr	r3, [r7, #0]
 810475e:	ee07 3a90 	vmov	s15, r3
 8104762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104766:	edd7 6a07 	vldr	s13, [r7, #28]
 810476a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810476e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104772:	ee17 3a90 	vmov	r3, s15
 8104776:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8104778:	6a3b      	ldr	r3, [r7, #32]
}
 810477a:	4618      	mov	r0, r3
 810477c:	372c      	adds	r7, #44	@ 0x2c
 810477e:	46bd      	mov	sp, r7
 8104780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104784:	4770      	bx	lr
 8104786:	bf00      	nop
 8104788:	46020c00 	.word	0x46020c00
 810478c:	08109300 	.word	0x08109300
 8104790:	00f42400 	.word	0x00f42400
 8104794:	4b742400 	.word	0x4b742400
 8104798:	46000000 	.word	0x46000000

0810479c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810479c:	b580      	push	{r7, lr}
 810479e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 81047a0:	f7ff fefa 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 81047a4:	4602      	mov	r2, r0
 81047a6:	4b07      	ldr	r3, [pc, #28]	@ (81047c4 <HAL_RCC_GetHCLKFreq+0x28>)
 81047a8:	6a1b      	ldr	r3, [r3, #32]
 81047aa:	f003 030f 	and.w	r3, r3, #15
 81047ae:	4906      	ldr	r1, [pc, #24]	@ (81047c8 <HAL_RCC_GetHCLKFreq+0x2c>)
 81047b0:	5ccb      	ldrb	r3, [r1, r3]
 81047b2:	fa22 f303 	lsr.w	r3, r2, r3
 81047b6:	4a05      	ldr	r2, [pc, #20]	@ (81047cc <HAL_RCC_GetHCLKFreq+0x30>)
 81047b8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 81047ba:	4b04      	ldr	r3, [pc, #16]	@ (81047cc <HAL_RCC_GetHCLKFreq+0x30>)
 81047bc:	681b      	ldr	r3, [r3, #0]
}
 81047be:	4618      	mov	r0, r3
 81047c0:	bd80      	pop	{r7, pc}
 81047c2:	bf00      	nop
 81047c4:	46020c00 	.word	0x46020c00
 81047c8:	081092e8 	.word	0x081092e8
 81047cc:	20000000 	.word	0x20000000

081047d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81047d0:	b580      	push	{r7, lr}
 81047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 81047d4:	f7ff ffe2 	bl	810479c <HAL_RCC_GetHCLKFreq>
 81047d8:	4602      	mov	r2, r0
 81047da:	4b05      	ldr	r3, [pc, #20]	@ (81047f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 81047dc:	6a1b      	ldr	r3, [r3, #32]
 81047de:	091b      	lsrs	r3, r3, #4
 81047e0:	f003 0307 	and.w	r3, r3, #7
 81047e4:	4903      	ldr	r1, [pc, #12]	@ (81047f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 81047e6:	5ccb      	ldrb	r3, [r1, r3]
 81047e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 81047ec:	4618      	mov	r0, r3
 81047ee:	bd80      	pop	{r7, pc}
 81047f0:	46020c00 	.word	0x46020c00
 81047f4:	081092f8 	.word	0x081092f8

081047f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81047f8:	b580      	push	{r7, lr}
 81047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 81047fc:	f7ff ffce 	bl	810479c <HAL_RCC_GetHCLKFreq>
 8104800:	4602      	mov	r2, r0
 8104802:	4b05      	ldr	r3, [pc, #20]	@ (8104818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8104804:	6a1b      	ldr	r3, [r3, #32]
 8104806:	0a1b      	lsrs	r3, r3, #8
 8104808:	f003 0307 	and.w	r3, r3, #7
 810480c:	4903      	ldr	r1, [pc, #12]	@ (810481c <HAL_RCC_GetPCLK2Freq+0x24>)
 810480e:	5ccb      	ldrb	r3, [r1, r3]
 8104810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8104814:	4618      	mov	r0, r3
 8104816:	bd80      	pop	{r7, pc}
 8104818:	46020c00 	.word	0x46020c00
 810481c:	081092f8 	.word	0x081092f8

08104820 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8104820:	b580      	push	{r7, lr}
 8104822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8104824:	f7ff ffba 	bl	810479c <HAL_RCC_GetHCLKFreq>
 8104828:	4602      	mov	r2, r0
 810482a:	4b05      	ldr	r3, [pc, #20]	@ (8104840 <HAL_RCC_GetPCLK3Freq+0x20>)
 810482c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810482e:	091b      	lsrs	r3, r3, #4
 8104830:	f003 0307 	and.w	r3, r3, #7
 8104834:	4903      	ldr	r1, [pc, #12]	@ (8104844 <HAL_RCC_GetPCLK3Freq+0x24>)
 8104836:	5ccb      	ldrb	r3, [r1, r3]
 8104838:	fa22 f303 	lsr.w	r3, r2, r3
}
 810483c:	4618      	mov	r0, r3
 810483e:	bd80      	pop	{r7, pc}
 8104840:	46020c00 	.word	0x46020c00
 8104844:	081092f8 	.word	0x081092f8

08104848 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8104848:	b480      	push	{r7}
 810484a:	b083      	sub	sp, #12
 810484c:	af00      	add	r7, sp, #0
 810484e:	6078      	str	r0, [r7, #4]
 8104850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8104852:	687b      	ldr	r3, [r7, #4]
 8104854:	221f      	movs	r2, #31
 8104856:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8104858:	4b15      	ldr	r3, [pc, #84]	@ (81048b0 <HAL_RCC_GetClockConfig+0x68>)
 810485a:	69db      	ldr	r3, [r3, #28]
 810485c:	f003 0203 	and.w	r2, r3, #3
 8104860:	687b      	ldr	r3, [r7, #4]
 8104862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8104864:	4b12      	ldr	r3, [pc, #72]	@ (81048b0 <HAL_RCC_GetClockConfig+0x68>)
 8104866:	6a1b      	ldr	r3, [r3, #32]
 8104868:	f003 020f 	and.w	r2, r3, #15
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8104870:	4b0f      	ldr	r3, [pc, #60]	@ (81048b0 <HAL_RCC_GetClockConfig+0x68>)
 8104872:	6a1b      	ldr	r3, [r3, #32]
 8104874:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 810487c:	4b0c      	ldr	r3, [pc, #48]	@ (81048b0 <HAL_RCC_GetClockConfig+0x68>)
 810487e:	6a1b      	ldr	r3, [r3, #32]
 8104880:	091b      	lsrs	r3, r3, #4
 8104882:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 810488a:	4b09      	ldr	r3, [pc, #36]	@ (81048b0 <HAL_RCC_GetClockConfig+0x68>)
 810488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810488e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8104892:	687b      	ldr	r3, [r7, #4]
 8104894:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8104896:	4b07      	ldr	r3, [pc, #28]	@ (81048b4 <HAL_RCC_GetClockConfig+0x6c>)
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	f003 020f 	and.w	r2, r3, #15
 810489e:	683b      	ldr	r3, [r7, #0]
 81048a0:	601a      	str	r2, [r3, #0]
}
 81048a2:	bf00      	nop
 81048a4:	370c      	adds	r7, #12
 81048a6:	46bd      	mov	sp, r7
 81048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048ac:	4770      	bx	lr
 81048ae:	bf00      	nop
 81048b0:	46020c00 	.word	0x46020c00
 81048b4:	40022000 	.word	0x40022000

081048b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 81048b8:	b580      	push	{r7, lr}
 81048ba:	b086      	sub	sp, #24
 81048bc:	af00      	add	r7, sp, #0
 81048be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 81048c0:	4b3e      	ldr	r3, [pc, #248]	@ (81049bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81048c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81048c6:	f003 0304 	and.w	r3, r3, #4
 81048ca:	2b00      	cmp	r3, #0
 81048cc:	d003      	beq.n	81048d6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 81048ce:	f7fe fd17 	bl	8103300 <HAL_PWREx_GetVoltageRange>
 81048d2:	6178      	str	r0, [r7, #20]
 81048d4:	e019      	b.n	810490a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 81048d6:	4b39      	ldr	r3, [pc, #228]	@ (81049bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81048d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81048dc:	4a37      	ldr	r2, [pc, #220]	@ (81049bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81048de:	f043 0304 	orr.w	r3, r3, #4
 81048e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 81048e6:	4b35      	ldr	r3, [pc, #212]	@ (81049bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81048ec:	f003 0304 	and.w	r3, r3, #4
 81048f0:	60fb      	str	r3, [r7, #12]
 81048f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 81048f4:	f7fe fd04 	bl	8103300 <HAL_PWREx_GetVoltageRange>
 81048f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 81048fa:	4b30      	ldr	r3, [pc, #192]	@ (81049bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 81048fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104900:	4a2e      	ldr	r2, [pc, #184]	@ (81049bc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8104902:	f023 0304 	bic.w	r3, r3, #4
 8104906:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 810490a:	697b      	ldr	r3, [r7, #20]
 810490c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104910:	d003      	beq.n	810491a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8104912:	697b      	ldr	r3, [r7, #20]
 8104914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104918:	d109      	bne.n	810492e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 810491a:	687b      	ldr	r3, [r7, #4]
 810491c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104920:	d202      	bcs.n	8104928 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8104922:	2301      	movs	r3, #1
 8104924:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8104926:	e033      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8104928:	2300      	movs	r3, #0
 810492a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 810492c:	e030      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 810492e:	687b      	ldr	r3, [r7, #4]
 8104930:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104934:	d208      	bcs.n	8104948 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8104936:	697b      	ldr	r3, [r7, #20]
 8104938:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810493c:	d102      	bne.n	8104944 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 810493e:	2303      	movs	r3, #3
 8104940:	613b      	str	r3, [r7, #16]
 8104942:	e025      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8104944:	2301      	movs	r3, #1
 8104946:	e035      	b.n	81049b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8104948:	687b      	ldr	r3, [r7, #4]
 810494a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810494e:	d90f      	bls.n	8104970 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8104950:	697b      	ldr	r3, [r7, #20]
 8104952:	2b00      	cmp	r3, #0
 8104954:	d109      	bne.n	810496a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810495c:	d902      	bls.n	8104964 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 810495e:	2300      	movs	r3, #0
 8104960:	613b      	str	r3, [r7, #16]
 8104962:	e015      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8104964:	2301      	movs	r3, #1
 8104966:	613b      	str	r3, [r7, #16]
 8104968:	e012      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 810496a:	2300      	movs	r3, #0
 810496c:	613b      	str	r3, [r7, #16]
 810496e:	e00f      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8104970:	687b      	ldr	r3, [r7, #4]
 8104972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104976:	d109      	bne.n	810498c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8104978:	697b      	ldr	r3, [r7, #20]
 810497a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810497e:	d102      	bne.n	8104986 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8104980:	2301      	movs	r3, #1
 8104982:	613b      	str	r3, [r7, #16]
 8104984:	e004      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8104986:	2302      	movs	r3, #2
 8104988:	613b      	str	r3, [r7, #16]
 810498a:	e001      	b.n	8104990 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 810498c:	2301      	movs	r3, #1
 810498e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8104990:	4b0b      	ldr	r3, [pc, #44]	@ (81049c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8104992:	681b      	ldr	r3, [r3, #0]
 8104994:	f023 020f 	bic.w	r2, r3, #15
 8104998:	4909      	ldr	r1, [pc, #36]	@ (81049c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 810499a:	693b      	ldr	r3, [r7, #16]
 810499c:	4313      	orrs	r3, r2
 810499e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 81049a0:	4b07      	ldr	r3, [pc, #28]	@ (81049c0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	f003 030f 	and.w	r3, r3, #15
 81049a8:	693a      	ldr	r2, [r7, #16]
 81049aa:	429a      	cmp	r2, r3
 81049ac:	d001      	beq.n	81049b2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 81049ae:	2301      	movs	r3, #1
 81049b0:	e000      	b.n	81049b4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 81049b2:	2300      	movs	r3, #0
}
 81049b4:	4618      	mov	r0, r3
 81049b6:	3718      	adds	r7, #24
 81049b8:	46bd      	mov	sp, r7
 81049ba:	bd80      	pop	{r7, pc}
 81049bc:	46020c00 	.word	0x46020c00
 81049c0:	40022000 	.word	0x40022000

081049c4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 81049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81049c8:	b0b8      	sub	sp, #224	@ 0xe0
 81049ca:	af00      	add	r7, sp, #0
 81049cc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81049d0:	2300      	movs	r3, #0
 81049d2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81049d6:	2300      	movs	r3, #0
 81049d8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 81049dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81049e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049e4:	f002 0401 	and.w	r4, r2, #1
 81049e8:	2500      	movs	r5, #0
 81049ea:	ea54 0305 	orrs.w	r3, r4, r5
 81049ee:	d00b      	beq.n	8104a08 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 81049f0:	4bca      	ldr	r3, [pc, #808]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 81049f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81049f6:	f023 0103 	bic.w	r1, r3, #3
 81049fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81049fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104a00:	4ac6      	ldr	r2, [pc, #792]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a02:	430b      	orrs	r3, r1
 8104a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8104a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a10:	f002 0802 	and.w	r8, r2, #2
 8104a14:	f04f 0900 	mov.w	r9, #0
 8104a18:	ea58 0309 	orrs.w	r3, r8, r9
 8104a1c:	d00b      	beq.n	8104a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8104a1e:	4bbf      	ldr	r3, [pc, #764]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104a24:	f023 010c 	bic.w	r1, r3, #12
 8104a28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a2e:	4abb      	ldr	r2, [pc, #748]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a30:	430b      	orrs	r3, r1
 8104a32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8104a36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a3e:	f002 0a04 	and.w	sl, r2, #4
 8104a42:	f04f 0b00 	mov.w	fp, #0
 8104a46:	ea5a 030b 	orrs.w	r3, sl, fp
 8104a4a:	d00b      	beq.n	8104a64 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8104a4c:	4bb3      	ldr	r3, [pc, #716]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104a52:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8104a56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104a5c:	4aaf      	ldr	r2, [pc, #700]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a5e:	430b      	orrs	r3, r1
 8104a60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8104a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a6c:	f002 0308 	and.w	r3, r2, #8
 8104a70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8104a74:	2300      	movs	r3, #0
 8104a76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8104a7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8104a7e:	460b      	mov	r3, r1
 8104a80:	4313      	orrs	r3, r2
 8104a82:	d00b      	beq.n	8104a9c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8104a84:	4ba5      	ldr	r3, [pc, #660]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104a8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8104a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a94:	4aa1      	ldr	r2, [pc, #644]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104a96:	430b      	orrs	r3, r1
 8104a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8104a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104aa4:	f002 0310 	and.w	r3, r2, #16
 8104aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8104aac:	2300      	movs	r3, #0
 8104aae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8104ab2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8104ab6:	460b      	mov	r3, r1
 8104ab8:	4313      	orrs	r3, r2
 8104aba:	d00b      	beq.n	8104ad4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8104abc:	4b97      	ldr	r3, [pc, #604]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104ac2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104ac6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8104acc:	4a93      	ldr	r2, [pc, #588]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104ace:	430b      	orrs	r3, r1
 8104ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104ad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104adc:	f002 0320 	and.w	r3, r2, #32
 8104ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104ae4:	2300      	movs	r3, #0
 8104ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8104aea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8104aee:	460b      	mov	r3, r1
 8104af0:	4313      	orrs	r3, r2
 8104af2:	d00b      	beq.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8104af4:	4b89      	ldr	r3, [pc, #548]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104afa:	f023 0107 	bic.w	r1, r3, #7
 8104afe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104b02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104b04:	4a85      	ldr	r2, [pc, #532]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104b06:	430b      	orrs	r3, r1
 8104b08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8104b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b14:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8104b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8104b1c:	2300      	movs	r3, #0
 8104b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8104b22:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8104b26:	460b      	mov	r3, r1
 8104b28:	4313      	orrs	r3, r2
 8104b2a:	d00b      	beq.n	8104b44 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8104b2c:	4b7b      	ldr	r3, [pc, #492]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104b32:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8104b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104b3a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8104b3c:	4a77      	ldr	r2, [pc, #476]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104b3e:	430b      	orrs	r3, r1
 8104b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8104b44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b4c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104b50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8104b54:	2300      	movs	r3, #0
 8104b56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8104b5a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8104b5e:	460b      	mov	r3, r1
 8104b60:	4313      	orrs	r3, r2
 8104b62:	d00b      	beq.n	8104b7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8104b64:	4b6d      	ldr	r3, [pc, #436]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104b6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104b6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104b72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104b74:	4a69      	ldr	r2, [pc, #420]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104b76:	430b      	orrs	r3, r1
 8104b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8104b7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b84:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8104b88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8104b8c:	2300      	movs	r3, #0
 8104b8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8104b92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8104b96:	460b      	mov	r3, r1
 8104b98:	4313      	orrs	r3, r2
 8104b9a:	d00b      	beq.n	8104bb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8104b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104ba2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8104ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104bac:	4a5b      	ldr	r2, [pc, #364]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104bae:	430b      	orrs	r3, r1
 8104bb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bbc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8104bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8104bc4:	2300      	movs	r3, #0
 8104bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8104bca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8104bce:	460b      	mov	r3, r1
 8104bd0:	4313      	orrs	r3, r2
 8104bd2:	d00b      	beq.n	8104bec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8104bd4:	4b51      	ldr	r3, [pc, #324]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104bda:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8104bde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8104be4:	4a4d      	ldr	r2, [pc, #308]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104be6:	430b      	orrs	r3, r1
 8104be8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8104bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bf4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8104bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8104bfc:	2300      	movs	r3, #0
 8104bfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8104c02:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8104c06:	460b      	mov	r3, r1
 8104c08:	4313      	orrs	r3, r2
 8104c0a:	d00b      	beq.n	8104c24 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8104c0c:	4b43      	ldr	r3, [pc, #268]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104c12:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8104c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104c1c:	4a3f      	ldr	r2, [pc, #252]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104c1e:	430b      	orrs	r3, r1
 8104c20:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8104c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c2c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8104c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8104c34:	2300      	movs	r3, #0
 8104c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8104c3a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8104c3e:	460b      	mov	r3, r1
 8104c40:	4313      	orrs	r3, r2
 8104c42:	d00b      	beq.n	8104c5c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8104c44:	4b35      	ldr	r3, [pc, #212]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8104c4a:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8104c4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104c54:	4a31      	ldr	r2, [pc, #196]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104c56:	430b      	orrs	r3, r1
 8104c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8104c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c64:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8104c68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104c6a:	2300      	movs	r3, #0
 8104c6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104c6e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8104c72:	460b      	mov	r3, r1
 8104c74:	4313      	orrs	r3, r2
 8104c76:	d00c      	beq.n	8104c92 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8104c78:	4b28      	ldr	r3, [pc, #160]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104c7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104c7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104c82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104c8a:	4a24      	ldr	r2, [pc, #144]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104c8c:	430b      	orrs	r3, r1
 8104c8e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8104c92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104c9a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8104c9e:	673b      	str	r3, [r7, #112]	@ 0x70
 8104ca0:	2300      	movs	r3, #0
 8104ca2:	677b      	str	r3, [r7, #116]	@ 0x74
 8104ca4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8104ca8:	460b      	mov	r3, r1
 8104caa:	4313      	orrs	r3, r2
 8104cac:	d04f      	beq.n	8104d4e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8104cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104cb6:	2b80      	cmp	r3, #128	@ 0x80
 8104cb8:	d02d      	beq.n	8104d16 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8104cba:	2b80      	cmp	r3, #128	@ 0x80
 8104cbc:	d827      	bhi.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104cbe:	2b60      	cmp	r3, #96	@ 0x60
 8104cc0:	d02e      	beq.n	8104d20 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8104cc2:	2b60      	cmp	r3, #96	@ 0x60
 8104cc4:	d823      	bhi.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104cc6:	2b40      	cmp	r3, #64	@ 0x40
 8104cc8:	d006      	beq.n	8104cd8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8104cca:	2b40      	cmp	r3, #64	@ 0x40
 8104ccc:	d81f      	bhi.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8104cce:	2b00      	cmp	r3, #0
 8104cd0:	d009      	beq.n	8104ce6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8104cd2:	2b20      	cmp	r3, #32
 8104cd4:	d011      	beq.n	8104cfa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8104cd6:	e01a      	b.n	8104d0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8104cd8:	4b10      	ldr	r3, [pc, #64]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104cdc:	4a0f      	ldr	r2, [pc, #60]	@ (8104d1c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8104cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104ce2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8104ce4:	e01d      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104ce6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104cea:	3308      	adds	r3, #8
 8104cec:	4618      	mov	r0, r3
 8104cee:	f002 f9d1 	bl	8107094 <RCCEx_PLL2_Config>
 8104cf2:	4603      	mov	r3, r0
 8104cf4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8104cf8:	e013      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104cfe:	332c      	adds	r3, #44	@ 0x2c
 8104d00:	4618      	mov	r0, r3
 8104d02:	f002 fa5f 	bl	81071c4 <RCCEx_PLL3_Config>
 8104d06:	4603      	mov	r3, r0
 8104d08:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8104d0c:	e009      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d0e:	2301      	movs	r3, #1
 8104d10:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104d14:	e005      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8104d16:	bf00      	nop
 8104d18:	e003      	b.n	8104d22 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8104d1a:	bf00      	nop
 8104d1c:	46020c00 	.word	0x46020c00
        break;
 8104d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d22:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104d26:	2b00      	cmp	r3, #0
 8104d28:	d10d      	bne.n	8104d46 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8104d2a:	4bb6      	ldr	r3, [pc, #728]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104d2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8104d30:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8104d34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104d3c:	4ab1      	ldr	r2, [pc, #708]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104d3e:	430b      	orrs	r3, r1
 8104d40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8104d44:	e003      	b.n	8104d4e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d46:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104d4a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8104d4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d56:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8104d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8104d5c:	2300      	movs	r3, #0
 8104d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8104d60:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8104d64:	460b      	mov	r3, r1
 8104d66:	4313      	orrs	r3, r2
 8104d68:	d053      	beq.n	8104e12 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8104d6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104d72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104d76:	d033      	beq.n	8104de0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8104d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104d7c:	d82c      	bhi.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8104d7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104d82:	d02f      	beq.n	8104de4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8104d84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8104d88:	d826      	bhi.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8104d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104d8e:	d008      	beq.n	8104da2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8104d90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8104d94:	d820      	bhi.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8104d96:	2b00      	cmp	r3, #0
 8104d98:	d00a      	beq.n	8104db0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8104d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104d9e:	d011      	beq.n	8104dc4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8104da0:	e01a      	b.n	8104dd8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8104da2:	4b98      	ldr	r3, [pc, #608]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104da6:	4a97      	ldr	r2, [pc, #604]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104dac:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8104dae:	e01a      	b.n	8104de6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104db0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104db4:	3308      	adds	r3, #8
 8104db6:	4618      	mov	r0, r3
 8104db8:	f002 f96c 	bl	8107094 <RCCEx_PLL2_Config>
 8104dbc:	4603      	mov	r3, r0
 8104dbe:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8104dc2:	e010      	b.n	8104de6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104dc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104dc8:	332c      	adds	r3, #44	@ 0x2c
 8104dca:	4618      	mov	r0, r3
 8104dcc:	f002 f9fa 	bl	81071c4 <RCCEx_PLL3_Config>
 8104dd0:	4603      	mov	r3, r0
 8104dd2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8104dd6:	e006      	b.n	8104de6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104dd8:	2301      	movs	r3, #1
 8104dda:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104dde:	e002      	b.n	8104de6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8104de0:	bf00      	nop
 8104de2:	e000      	b.n	8104de6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8104de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104de6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104dea:	2b00      	cmp	r3, #0
 8104dec:	d10d      	bne.n	8104e0a <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8104dee:	4b85      	ldr	r3, [pc, #532]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104df0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8104df4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8104df8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8104e00:	4a80      	ldr	r2, [pc, #512]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104e02:	430b      	orrs	r3, r1
 8104e04:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8104e08:	e003      	b.n	8104e12 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e0a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104e0e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8104e12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e1a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8104e1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8104e20:	2300      	movs	r3, #0
 8104e22:	667b      	str	r3, [r7, #100]	@ 0x64
 8104e24:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8104e28:	460b      	mov	r3, r1
 8104e2a:	4313      	orrs	r3, r2
 8104e2c:	d046      	beq.n	8104ebc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8104e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104e32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104e36:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8104e3a:	d028      	beq.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8104e3c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8104e40:	d821      	bhi.n	8104e86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8104e42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104e46:	d022      	beq.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8104e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8104e4c:	d81b      	bhi.n	8104e86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8104e4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104e52:	d01c      	beq.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8104e54:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8104e58:	d815      	bhi.n	8104e86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8104e5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104e5e:	d008      	beq.n	8104e72 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8104e60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104e64:	d80f      	bhi.n	8104e86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8104e66:	2b00      	cmp	r3, #0
 8104e68:	d011      	beq.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8104e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104e6e:	d00e      	beq.n	8104e8e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8104e70:	e009      	b.n	8104e86 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8104e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104e76:	3308      	adds	r3, #8
 8104e78:	4618      	mov	r0, r3
 8104e7a:	f002 f90b 	bl	8107094 <RCCEx_PLL2_Config>
 8104e7e:	4603      	mov	r3, r0
 8104e80:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104e84:	e004      	b.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8104e86:	2301      	movs	r3, #1
 8104e88:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104e8c:	e000      	b.n	8104e90 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8104e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e90:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104e94:	2b00      	cmp	r3, #0
 8104e96:	d10d      	bne.n	8104eb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8104e98:	4b5a      	ldr	r3, [pc, #360]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104e9e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8104ea2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104ea6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104eaa:	4a56      	ldr	r2, [pc, #344]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104eac:	430b      	orrs	r3, r1
 8104eae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8104eb2:	e003      	b.n	8104ebc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104eb4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104eb8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8104ebc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ec4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8104ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8104eca:	2300      	movs	r3, #0
 8104ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104ece:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104ed2:	460b      	mov	r3, r1
 8104ed4:	4313      	orrs	r3, r2
 8104ed6:	d03f      	beq.n	8104f58 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8104ed8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104ee0:	2b04      	cmp	r3, #4
 8104ee2:	d81e      	bhi.n	8104f22 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8104ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8104eec <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8104ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104eea:	bf00      	nop
 8104eec:	08104f2b 	.word	0x08104f2b
 8104ef0:	08104f01 	.word	0x08104f01
 8104ef4:	08104f0f 	.word	0x08104f0f
 8104ef8:	08104f2b 	.word	0x08104f2b
 8104efc:	08104f2b 	.word	0x08104f2b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8104f00:	4b40      	ldr	r3, [pc, #256]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104f04:	4a3f      	ldr	r2, [pc, #252]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104f06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104f0a:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8104f0c:	e00e      	b.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104f0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104f12:	332c      	adds	r3, #44	@ 0x2c
 8104f14:	4618      	mov	r0, r3
 8104f16:	f002 f955 	bl	81071c4 <RCCEx_PLL3_Config>
 8104f1a:	4603      	mov	r3, r0
 8104f1c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104f20:	e004      	b.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8104f22:	2301      	movs	r3, #1
 8104f24:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104f28:	e000      	b.n	8104f2c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8104f2a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8104f2c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104f30:	2b00      	cmp	r3, #0
 8104f32:	d10d      	bne.n	8104f50 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8104f34:	4b33      	ldr	r3, [pc, #204]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104f36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8104f3a:	f023 0107 	bic.w	r1, r3, #7
 8104f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104f46:	4a2f      	ldr	r2, [pc, #188]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104f48:	430b      	orrs	r3, r1
 8104f4a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8104f4e:	e003      	b.n	8104f58 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104f50:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104f54:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8104f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f60:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8104f64:	653b      	str	r3, [r7, #80]	@ 0x50
 8104f66:	2300      	movs	r3, #0
 8104f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8104f6a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104f6e:	460b      	mov	r3, r1
 8104f70:	4313      	orrs	r3, r2
 8104f72:	d04d      	beq.n	8105010 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8104f74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104f7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104f80:	d028      	beq.n	8104fd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8104f82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8104f86:	d821      	bhi.n	8104fcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104f88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104f8c:	d024      	beq.n	8104fd8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8104f8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8104f92:	d81b      	bhi.n	8104fcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f98:	d00e      	beq.n	8104fb8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8104f9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104f9e:	d815      	bhi.n	8104fcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104fa0:	2b00      	cmp	r3, #0
 8104fa2:	d01b      	beq.n	8104fdc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8104fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104fa8:	d110      	bne.n	8104fcc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8104faa:	4b16      	ldr	r3, [pc, #88]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104fae:	4a15      	ldr	r2, [pc, #84]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8104fb4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8104fb6:	e012      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8104fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104fbc:	332c      	adds	r3, #44	@ 0x2c
 8104fbe:	4618      	mov	r0, r3
 8104fc0:	f002 f900 	bl	81071c4 <RCCEx_PLL3_Config>
 8104fc4:	4603      	mov	r3, r0
 8104fc6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104fca:	e008      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8104fcc:	2301      	movs	r3, #1
 8104fce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8104fd2:	e004      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8104fd4:	bf00      	nop
 8104fd6:	e002      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8104fd8:	bf00      	nop
 8104fda:	e000      	b.n	8104fde <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8104fdc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8104fde:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8104fe2:	2b00      	cmp	r3, #0
 8104fe4:	d110      	bne.n	8105008 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8104fe6:	4b07      	ldr	r3, [pc, #28]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8104fec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8104ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8104ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104ff8:	4a02      	ldr	r2, [pc, #8]	@ (8105004 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8104ffa:	430b      	orrs	r3, r1
 8104ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8105000:	e006      	b.n	8105010 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105002:	bf00      	nop
 8105004:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105008:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 810500c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8105010:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105018:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810501c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810501e:	2300      	movs	r3, #0
 8105020:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8105022:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8105026:	460b      	mov	r3, r1
 8105028:	4313      	orrs	r3, r2
 810502a:	f000 80b5 	beq.w	8105198 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 810502e:	2300      	movs	r3, #0
 8105030:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8105034:	4b9d      	ldr	r3, [pc, #628]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105036:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810503a:	f003 0304 	and.w	r3, r3, #4
 810503e:	2b00      	cmp	r3, #0
 8105040:	d113      	bne.n	810506a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8105042:	4b9a      	ldr	r3, [pc, #616]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105044:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105048:	4a98      	ldr	r2, [pc, #608]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 810504a:	f043 0304 	orr.w	r3, r3, #4
 810504e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8105052:	4b96      	ldr	r3, [pc, #600]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8105058:	f003 0304 	and.w	r3, r3, #4
 810505c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8105060:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8105064:	2301      	movs	r3, #1
 8105066:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 810506a:	4b91      	ldr	r3, [pc, #580]	@ (81052b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 810506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810506e:	4a90      	ldr	r2, [pc, #576]	@ (81052b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8105070:	f043 0301 	orr.w	r3, r3, #1
 8105074:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8105076:	f7fc fc25 	bl	81018c4 <HAL_GetTick>
 810507a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 810507e:	e00b      	b.n	8105098 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8105080:	f7fc fc20 	bl	81018c4 <HAL_GetTick>
 8105084:	4602      	mov	r2, r0
 8105086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810508a:	1ad3      	subs	r3, r2, r3
 810508c:	2b02      	cmp	r3, #2
 810508e:	d903      	bls.n	8105098 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8105090:	2303      	movs	r3, #3
 8105092:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8105096:	e005      	b.n	81050a4 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8105098:	4b85      	ldr	r3, [pc, #532]	@ (81052b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 810509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810509c:	f003 0301 	and.w	r3, r3, #1
 81050a0:	2b00      	cmp	r3, #0
 81050a2:	d0ed      	beq.n	8105080 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 81050a4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 81050a8:	2b00      	cmp	r3, #0
 81050aa:	d165      	bne.n	8105178 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 81050ac:	4b7f      	ldr	r3, [pc, #508]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81050ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81050b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81050b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 81050ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81050be:	2b00      	cmp	r3, #0
 81050c0:	d023      	beq.n	810510a <HAL_RCCEx_PeriphCLKConfig+0x746>
 81050c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81050c6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 81050ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 81050ce:	4293      	cmp	r3, r2
 81050d0:	d01b      	beq.n	810510a <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 81050d2:	4b76      	ldr	r3, [pc, #472]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81050d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81050d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81050dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81050e0:	4b72      	ldr	r3, [pc, #456]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81050e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81050e6:	4a71      	ldr	r2, [pc, #452]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81050e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81050ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 81050f0:	4b6e      	ldr	r3, [pc, #440]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81050f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81050f6:	4a6d      	ldr	r2, [pc, #436]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81050f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81050fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8105100:	4a6a      	ldr	r2, [pc, #424]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8105106:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 810510a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810510e:	f003 0301 	and.w	r3, r3, #1
 8105112:	2b00      	cmp	r3, #0
 8105114:	d019      	beq.n	810514a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8105116:	f7fc fbd5 	bl	81018c4 <HAL_GetTick>
 810511a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 810511e:	e00d      	b.n	810513c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105120:	f7fc fbd0 	bl	81018c4 <HAL_GetTick>
 8105124:	4602      	mov	r2, r0
 8105126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 810512a:	1ad2      	subs	r2, r2, r3
 810512c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8105130:	429a      	cmp	r2, r3
 8105132:	d903      	bls.n	810513c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8105134:	2303      	movs	r3, #3
 8105136:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 810513a:	e006      	b.n	810514a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 810513c:	4b5b      	ldr	r3, [pc, #364]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 810513e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105142:	f003 0302 	and.w	r3, r3, #2
 8105146:	2b00      	cmp	r3, #0
 8105148:	d0ea      	beq.n	8105120 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 810514a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 810514e:	2b00      	cmp	r3, #0
 8105150:	d10d      	bne.n	810516e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8105152:	4b56      	ldr	r3, [pc, #344]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105154:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105158:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810515c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105160:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8105164:	4a51      	ldr	r2, [pc, #324]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105166:	430b      	orrs	r3, r1
 8105168:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810516c:	e008      	b.n	8105180 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810516e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8105172:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8105176:	e003      	b.n	8105180 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105178:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 810517c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8105180:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8105184:	2b01      	cmp	r3, #1
 8105186:	d107      	bne.n	8105198 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8105188:	4b48      	ldr	r3, [pc, #288]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 810518a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810518e:	4a47      	ldr	r2, [pc, #284]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105190:	f023 0304 	bic.w	r3, r3, #4
 8105194:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8105198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051a0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81051a4:	643b      	str	r3, [r7, #64]	@ 0x40
 81051a6:	2300      	movs	r3, #0
 81051a8:	647b      	str	r3, [r7, #68]	@ 0x44
 81051aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81051ae:	460b      	mov	r3, r1
 81051b0:	4313      	orrs	r3, r2
 81051b2:	d042      	beq.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 81051b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81051b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81051bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 81051c0:	d022      	beq.n	8105208 <HAL_RCCEx_PeriphCLKConfig+0x844>
 81051c2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 81051c6:	d81b      	bhi.n	8105200 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 81051c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81051cc:	d011      	beq.n	81051f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 81051ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81051d2:	d815      	bhi.n	8105200 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 81051d4:	2b00      	cmp	r3, #0
 81051d6:	d019      	beq.n	810520c <HAL_RCCEx_PeriphCLKConfig+0x848>
 81051d8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81051dc:	d110      	bne.n	8105200 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81051de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81051e2:	3308      	adds	r3, #8
 81051e4:	4618      	mov	r0, r3
 81051e6:	f001 ff55 	bl	8107094 <RCCEx_PLL2_Config>
 81051ea:	4603      	mov	r3, r0
 81051ec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 81051f0:	e00d      	b.n	810520e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81051f2:	4b2e      	ldr	r3, [pc, #184]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81051f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81051f6:	4a2d      	ldr	r2, [pc, #180]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81051f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81051fc:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 81051fe:	e006      	b.n	810520e <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8105200:	2301      	movs	r3, #1
 8105202:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8105206:	e002      	b.n	810520e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8105208:	bf00      	nop
 810520a:	e000      	b.n	810520e <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 810520c:	bf00      	nop
    }
    if (ret == HAL_OK)
 810520e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8105212:	2b00      	cmp	r3, #0
 8105214:	d10d      	bne.n	8105232 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8105216:	4b25      	ldr	r3, [pc, #148]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810521c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8105220:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105224:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8105228:	4a20      	ldr	r2, [pc, #128]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 810522a:	430b      	orrs	r3, r1
 810522c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8105230:	e003      	b.n	810523a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105232:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8105236:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810523a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105242:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8105246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8105248:	2300      	movs	r3, #0
 810524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810524c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8105250:	460b      	mov	r3, r1
 8105252:	4313      	orrs	r3, r2
 8105254:	d032      	beq.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8105256:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810525a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810525e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105262:	d00b      	beq.n	810527c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8105264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105268:	d804      	bhi.n	8105274 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 810526a:	2b00      	cmp	r3, #0
 810526c:	d008      	beq.n	8105280 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 810526e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105272:	d007      	beq.n	8105284 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8105274:	2301      	movs	r3, #1
 8105276:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 810527a:	e004      	b.n	8105286 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 810527c:	bf00      	nop
 810527e:	e002      	b.n	8105286 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8105280:	bf00      	nop
 8105282:	e000      	b.n	8105286 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8105284:	bf00      	nop
    }
    if (ret == HAL_OK)
 8105286:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 810528a:	2b00      	cmp	r3, #0
 810528c:	d112      	bne.n	81052b4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 810528e:	4b07      	ldr	r3, [pc, #28]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8105290:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105294:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8105298:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810529c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81052a0:	4a02      	ldr	r2, [pc, #8]	@ (81052ac <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 81052a2:	430b      	orrs	r3, r1
 81052a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 81052a8:	e008      	b.n	81052bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 81052aa:	bf00      	nop
 81052ac:	46020c00 	.word	0x46020c00
 81052b0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 81052b8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 81052bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81052c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81052c8:	633b      	str	r3, [r7, #48]	@ 0x30
 81052ca:	2300      	movs	r3, #0
 81052cc:	637b      	str	r3, [r7, #52]	@ 0x34
 81052ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81052d2:	460b      	mov	r3, r1
 81052d4:	4313      	orrs	r3, r2
 81052d6:	d019      	beq.n	810530c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 81052d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81052dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81052e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81052e4:	d105      	bne.n	81052f2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 81052e6:	4b88      	ldr	r3, [pc, #544]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81052e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81052ea:	4a87      	ldr	r2, [pc, #540]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81052ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81052f0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 81052f2:	4b85      	ldr	r3, [pc, #532]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81052f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 81052f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81052fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105300:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8105304:	4a80      	ldr	r2, [pc, #512]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8105306:	430b      	orrs	r3, r1
 8105308:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 810530c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105314:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8105318:	62bb      	str	r3, [r7, #40]	@ 0x28
 810531a:	2300      	movs	r3, #0
 810531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810531e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8105322:	460b      	mov	r3, r1
 8105324:	4313      	orrs	r3, r2
 8105326:	d00c      	beq.n	8105342 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8105328:	4b77      	ldr	r3, [pc, #476]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 810532a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810532e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8105332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105336:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810533a:	4973      	ldr	r1, [pc, #460]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 810533c:	4313      	orrs	r3, r2
 810533e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8105342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105346:	e9d3 2300 	ldrd	r2, r3, [r3]
 810534a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810534e:	623b      	str	r3, [r7, #32]
 8105350:	2300      	movs	r3, #0
 8105352:	627b      	str	r3, [r7, #36]	@ 0x24
 8105354:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105358:	460b      	mov	r3, r1
 810535a:	4313      	orrs	r3, r2
 810535c:	d00c      	beq.n	8105378 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 810535e:	4b6a      	ldr	r3, [pc, #424]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8105360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8105368:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810536c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105370:	4965      	ldr	r1, [pc, #404]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8105372:	4313      	orrs	r3, r2
 8105374:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8105378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105380:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8105384:	61bb      	str	r3, [r7, #24]
 8105386:	2300      	movs	r3, #0
 8105388:	61fb      	str	r3, [r7, #28]
 810538a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810538e:	460b      	mov	r3, r1
 8105390:	4313      	orrs	r3, r2
 8105392:	d00c      	beq.n	81053ae <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8105394:	4b5c      	ldr	r3, [pc, #368]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8105396:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810539a:	f023 0218 	bic.w	r2, r3, #24
 810539e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81053a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81053a6:	4958      	ldr	r1, [pc, #352]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81053a8:	4313      	orrs	r3, r2
 81053aa:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 81053ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81053b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81053b6:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 81053ba:	613b      	str	r3, [r7, #16]
 81053bc:	2300      	movs	r3, #0
 81053be:	617b      	str	r3, [r7, #20]
 81053c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81053c4:	460b      	mov	r3, r1
 81053c6:	4313      	orrs	r3, r2
 81053c8:	d032      	beq.n	8105430 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 81053ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81053ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81053d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81053d6:	d105      	bne.n	81053e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053d8:	4b4b      	ldr	r3, [pc, #300]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81053da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81053dc:	4a4a      	ldr	r2, [pc, #296]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81053de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81053e2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 81053e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81053e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81053ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81053f0:	d108      	bne.n	8105404 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 81053f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81053f6:	3308      	adds	r3, #8
 81053f8:	4618      	mov	r0, r3
 81053fa:	f001 fe4b 	bl	8107094 <RCCEx_PLL2_Config>
 81053fe:	4603      	mov	r3, r0
 8105400:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8105404:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8105408:	2b00      	cmp	r3, #0
 810540a:	d10d      	bne.n	8105428 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 810540c:	4b3e      	ldr	r3, [pc, #248]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 810540e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105412:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8105416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810541a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810541e:	493a      	ldr	r1, [pc, #232]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8105420:	4313      	orrs	r3, r2
 8105422:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8105426:	e003      	b.n	8105430 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105428:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 810542c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8105430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105438:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 810543c:	60bb      	str	r3, [r7, #8]
 810543e:	2300      	movs	r3, #0
 8105440:	60fb      	str	r3, [r7, #12]
 8105442:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8105446:	460b      	mov	r3, r1
 8105448:	4313      	orrs	r3, r2
 810544a:	d03a      	beq.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 810544c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8105450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105458:	d00e      	beq.n	8105478 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 810545a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810545e:	d815      	bhi.n	810548c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8105460:	2b00      	cmp	r3, #0
 8105462:	d017      	beq.n	8105494 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8105464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105468:	d110      	bne.n	810548c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810546a:	4b27      	ldr	r3, [pc, #156]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 810546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810546e:	4a26      	ldr	r2, [pc, #152]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8105470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105474:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8105476:	e00e      	b.n	8105496 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8105478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 810547c:	3308      	adds	r3, #8
 810547e:	4618      	mov	r0, r3
 8105480:	f001 fe08 	bl	8107094 <RCCEx_PLL2_Config>
 8105484:	4603      	mov	r3, r0
 8105486:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 810548a:	e004      	b.n	8105496 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 810548c:	2301      	movs	r3, #1
 810548e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8105492:	e000      	b.n	8105496 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8105494:	bf00      	nop
    }
    if (ret == HAL_OK)
 8105496:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 810549a:	2b00      	cmp	r3, #0
 810549c:	d10d      	bne.n	81054ba <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 810549e:	4b1a      	ldr	r3, [pc, #104]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81054a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81054a4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 81054a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81054b0:	4915      	ldr	r1, [pc, #84]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81054b2:	4313      	orrs	r3, r2
 81054b4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 81054b8:	e003      	b.n	81054c2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054ba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 81054be:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 81054c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054ca:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81054ce:	603b      	str	r3, [r7, #0]
 81054d0:	2300      	movs	r3, #0
 81054d2:	607b      	str	r3, [r7, #4]
 81054d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 81054d8:	460b      	mov	r3, r1
 81054da:	4313      	orrs	r3, r2
 81054dc:	d00c      	beq.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 81054de:	4b0a      	ldr	r3, [pc, #40]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81054e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81054e4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 81054e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 81054ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 81054f0:	4905      	ldr	r1, [pc, #20]	@ (8105508 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 81054f2:	4313      	orrs	r3, r2
 81054f4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 81054f8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 81054fc:	4618      	mov	r0, r3
 81054fe:	37e0      	adds	r7, #224	@ 0xe0
 8105500:	46bd      	mov	sp, r7
 8105502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105506:	bf00      	nop
 8105508:	46020c00 	.word	0x46020c00

0810550c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 810550c:	b480      	push	{r7}
 810550e:	b089      	sub	sp, #36	@ 0x24
 8105510:	af00      	add	r7, sp, #0
 8105512:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8105514:	4ba6      	ldr	r3, [pc, #664]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810551c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 810551e:	4ba4      	ldr	r3, [pc, #656]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105522:	f003 0303 	and.w	r3, r3, #3
 8105526:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8105528:	4ba1      	ldr	r3, [pc, #644]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 810552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810552c:	0a1b      	lsrs	r3, r3, #8
 810552e:	f003 030f 	and.w	r3, r3, #15
 8105532:	3301      	adds	r3, #1
 8105534:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8105536:	4b9e      	ldr	r3, [pc, #632]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810553a:	091b      	lsrs	r3, r3, #4
 810553c:	f003 0301 	and.w	r3, r3, #1
 8105540:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8105542:	4b9b      	ldr	r3, [pc, #620]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8105546:	08db      	lsrs	r3, r3, #3
 8105548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810554c:	68fa      	ldr	r2, [r7, #12]
 810554e:	fb02 f303 	mul.w	r3, r2, r3
 8105552:	ee07 3a90 	vmov	s15, r3
 8105556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810555a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 810555e:	697b      	ldr	r3, [r7, #20]
 8105560:	2b03      	cmp	r3, #3
 8105562:	d062      	beq.n	810562a <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8105564:	697b      	ldr	r3, [r7, #20]
 8105566:	2b03      	cmp	r3, #3
 8105568:	f200 8081 	bhi.w	810566e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 810556c:	697b      	ldr	r3, [r7, #20]
 810556e:	2b01      	cmp	r3, #1
 8105570:	d024      	beq.n	81055bc <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8105572:	697b      	ldr	r3, [r7, #20]
 8105574:	2b02      	cmp	r3, #2
 8105576:	d17a      	bne.n	810566e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8105578:	693b      	ldr	r3, [r7, #16]
 810557a:	ee07 3a90 	vmov	s15, r3
 810557e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105582:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 81057b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8105586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810558a:	4b89      	ldr	r3, [pc, #548]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 810558c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810558e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105592:	ee07 3a90 	vmov	s15, r3
 8105596:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 810559a:	ed97 6a02 	vldr	s12, [r7, #8]
 810559e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 81057b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 81055a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81055a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 81055aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81055ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 81055b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81055ba:	e08f      	b.n	81056dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 81055bc:	4b7c      	ldr	r3, [pc, #496]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 81055be:	689b      	ldr	r3, [r3, #8]
 81055c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81055c4:	2b00      	cmp	r3, #0
 81055c6:	d005      	beq.n	81055d4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 81055c8:	4b79      	ldr	r3, [pc, #484]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 81055ca:	689b      	ldr	r3, [r3, #8]
 81055cc:	0f1b      	lsrs	r3, r3, #28
 81055ce:	f003 030f 	and.w	r3, r3, #15
 81055d2:	e006      	b.n	81055e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 81055d4:	4b76      	ldr	r3, [pc, #472]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 81055d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81055da:	041b      	lsls	r3, r3, #16
 81055dc:	0f1b      	lsrs	r3, r3, #28
 81055de:	f003 030f 	and.w	r3, r3, #15
 81055e2:	4a76      	ldr	r2, [pc, #472]	@ (81057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 81055e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81055e8:	ee07 3a90 	vmov	s15, r3
 81055ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055f0:	693b      	ldr	r3, [r7, #16]
 81055f2:	ee07 3a90 	vmov	s15, r3
 81055f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 81055fe:	69bb      	ldr	r3, [r7, #24]
 8105600:	ee07 3a90 	vmov	s15, r3
 8105604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105608:	ed97 6a02 	vldr	s12, [r7, #8]
 810560c:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 81057b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8105610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105618:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810561c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8105620:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105624:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105628:	e058      	b.n	81056dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 810562a:	693b      	ldr	r3, [r7, #16]
 810562c:	ee07 3a90 	vmov	s15, r3
 8105630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105634:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81057b4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8105638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810563c:	4b5c      	ldr	r3, [pc, #368]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 810563e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105644:	ee07 3a90 	vmov	s15, r3
 8105648:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 810564c:	ed97 6a02 	vldr	s12, [r7, #8]
 8105650:	eddf 5a59 	vldr	s11, [pc, #356]	@ 81057b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8105654:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8105658:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 810565c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105660:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8105664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105668:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810566c:	e036      	b.n	81056dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 810566e:	4b50      	ldr	r3, [pc, #320]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105670:	689b      	ldr	r3, [r3, #8]
 8105672:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105676:	2b00      	cmp	r3, #0
 8105678:	d005      	beq.n	8105686 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 810567a:	4b4d      	ldr	r3, [pc, #308]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 810567c:	689b      	ldr	r3, [r3, #8]
 810567e:	0f1b      	lsrs	r3, r3, #28
 8105680:	f003 030f 	and.w	r3, r3, #15
 8105684:	e006      	b.n	8105694 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8105686:	4b4a      	ldr	r3, [pc, #296]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810568c:	041b      	lsls	r3, r3, #16
 810568e:	0f1b      	lsrs	r3, r3, #28
 8105690:	f003 030f 	and.w	r3, r3, #15
 8105694:	4a49      	ldr	r2, [pc, #292]	@ (81057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8105696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810569a:	ee07 3a90 	vmov	s15, r3
 810569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056a2:	693b      	ldr	r3, [r7, #16]
 81056a4:	ee07 3a90 	vmov	s15, r3
 81056a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 81056b0:	69bb      	ldr	r3, [r7, #24]
 81056b2:	ee07 3a90 	vmov	s15, r3
 81056b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81056be:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 81057b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 81056c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81056ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 81056d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81056da:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 81056dc:	4b34      	ldr	r3, [pc, #208]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 81056de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81056e4:	2b00      	cmp	r3, #0
 81056e6:	d017      	beq.n	8105718 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 81056e8:	4b31      	ldr	r3, [pc, #196]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 81056ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81056ec:	0a5b      	lsrs	r3, r3, #9
 81056ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81056f2:	ee07 3a90 	vmov	s15, r3
 81056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 81056fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81056fe:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8105702:	edd7 6a07 	vldr	s13, [r7, #28]
 8105706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810570a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810570e:	ee17 2a90 	vmov	r2, s15
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	601a      	str	r2, [r3, #0]
 8105716:	e002      	b.n	810571e <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	2200      	movs	r2, #0
 810571c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 810571e:	4b24      	ldr	r3, [pc, #144]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105726:	2b00      	cmp	r3, #0
 8105728:	d017      	beq.n	810575a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 810572a:	4b21      	ldr	r3, [pc, #132]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 810572c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810572e:	0c1b      	lsrs	r3, r3, #16
 8105730:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105734:	ee07 3a90 	vmov	s15, r3
 8105738:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 810573c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105740:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8105744:	edd7 6a07 	vldr	s13, [r7, #28]
 8105748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810574c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105750:	ee17 2a90 	vmov	r2, s15
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	605a      	str	r2, [r3, #4]
 8105758:	e002      	b.n	8105760 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 810575a:	687b      	ldr	r3, [r7, #4]
 810575c:	2200      	movs	r2, #0
 810575e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8105760:	4b13      	ldr	r3, [pc, #76]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8105762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105768:	2b00      	cmp	r3, #0
 810576a:	d017      	beq.n	810579c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 810576c:	4b10      	ldr	r3, [pc, #64]	@ (81057b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 810576e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105770:	0e1b      	lsrs	r3, r3, #24
 8105772:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105776:	ee07 3a90 	vmov	s15, r3
 810577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 810577e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105782:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8105786:	edd7 6a07 	vldr	s13, [r7, #28]
 810578a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810578e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105792:	ee17 2a90 	vmov	r2, s15
 8105796:	687b      	ldr	r3, [r7, #4]
 8105798:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810579a:	e002      	b.n	81057a2 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810579c:	687b      	ldr	r3, [r7, #4]
 810579e:	2200      	movs	r2, #0
 81057a0:	609a      	str	r2, [r3, #8]
}
 81057a2:	bf00      	nop
 81057a4:	3724      	adds	r7, #36	@ 0x24
 81057a6:	46bd      	mov	sp, r7
 81057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057ac:	4770      	bx	lr
 81057ae:	bf00      	nop
 81057b0:	46020c00 	.word	0x46020c00
 81057b4:	4b742400 	.word	0x4b742400
 81057b8:	46000000 	.word	0x46000000
 81057bc:	08109300 	.word	0x08109300

081057c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 81057c0:	b480      	push	{r7}
 81057c2:	b089      	sub	sp, #36	@ 0x24
 81057c4:	af00      	add	r7, sp, #0
 81057c6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 81057c8:	4ba6      	ldr	r3, [pc, #664]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81057ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81057cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057d0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 81057d2:	4ba4      	ldr	r3, [pc, #656]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81057d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057d6:	f003 0303 	and.w	r3, r3, #3
 81057da:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 81057dc:	4ba1      	ldr	r3, [pc, #644]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81057de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057e0:	0a1b      	lsrs	r3, r3, #8
 81057e2:	f003 030f 	and.w	r3, r3, #15
 81057e6:	3301      	adds	r3, #1
 81057e8:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 81057ea:	4b9e      	ldr	r3, [pc, #632]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81057ee:	091b      	lsrs	r3, r3, #4
 81057f0:	f003 0301 	and.w	r3, r3, #1
 81057f4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 81057f6:	4b9b      	ldr	r3, [pc, #620]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81057f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81057fa:	08db      	lsrs	r3, r3, #3
 81057fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105800:	68fa      	ldr	r2, [r7, #12]
 8105802:	fb02 f303 	mul.w	r3, r2, r3
 8105806:	ee07 3a90 	vmov	s15, r3
 810580a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810580e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8105812:	697b      	ldr	r3, [r7, #20]
 8105814:	2b03      	cmp	r3, #3
 8105816:	d062      	beq.n	81058de <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8105818:	697b      	ldr	r3, [r7, #20]
 810581a:	2b03      	cmp	r3, #3
 810581c:	f200 8081 	bhi.w	8105922 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8105820:	697b      	ldr	r3, [r7, #20]
 8105822:	2b01      	cmp	r3, #1
 8105824:	d024      	beq.n	8105870 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8105826:	697b      	ldr	r3, [r7, #20]
 8105828:	2b02      	cmp	r3, #2
 810582a:	d17a      	bne.n	8105922 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 810582c:	693b      	ldr	r3, [r7, #16]
 810582e:	ee07 3a90 	vmov	s15, r3
 8105832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105836:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8105a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 810583a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810583e:	4b89      	ldr	r3, [pc, #548]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105846:	ee07 3a90 	vmov	s15, r3
 810584a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 810584e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105852:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8105a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8105856:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 810585a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 810585e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105862:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8105866:	ee67 7a27 	vmul.f32	s15, s14, s15
 810586a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810586e:	e08f      	b.n	8105990 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8105870:	4b7c      	ldr	r3, [pc, #496]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105872:	689b      	ldr	r3, [r3, #8]
 8105874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105878:	2b00      	cmp	r3, #0
 810587a:	d005      	beq.n	8105888 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 810587c:	4b79      	ldr	r3, [pc, #484]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 810587e:	689b      	ldr	r3, [r3, #8]
 8105880:	0f1b      	lsrs	r3, r3, #28
 8105882:	f003 030f 	and.w	r3, r3, #15
 8105886:	e006      	b.n	8105896 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8105888:	4b76      	ldr	r3, [pc, #472]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 810588a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810588e:	041b      	lsls	r3, r3, #16
 8105890:	0f1b      	lsrs	r3, r3, #28
 8105892:	f003 030f 	and.w	r3, r3, #15
 8105896:	4a76      	ldr	r2, [pc, #472]	@ (8105a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8105898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810589c:	ee07 3a90 	vmov	s15, r3
 81058a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058a4:	693b      	ldr	r3, [r7, #16]
 81058a6:	ee07 3a90 	vmov	s15, r3
 81058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 81058b2:	69bb      	ldr	r3, [r7, #24]
 81058b4:	ee07 3a90 	vmov	s15, r3
 81058b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058bc:	ed97 6a02 	vldr	s12, [r7, #8]
 81058c0:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8105a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 81058c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81058d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 81058d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81058dc:	e058      	b.n	8105990 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 81058de:	693b      	ldr	r3, [r7, #16]
 81058e0:	ee07 3a90 	vmov	s15, r3
 81058e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058e8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 81058ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058f0:	4b5c      	ldr	r3, [pc, #368]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81058f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81058f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058f8:	ee07 3a90 	vmov	s15, r3
 81058fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8105900:	ed97 6a02 	vldr	s12, [r7, #8]
 8105904:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8105a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8105908:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 810590c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8105910:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105914:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8105918:	ee67 7a27 	vmul.f32	s15, s14, s15
 810591c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105920:	e036      	b.n	8105990 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8105922:	4b50      	ldr	r3, [pc, #320]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105924:	689b      	ldr	r3, [r3, #8]
 8105926:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810592a:	2b00      	cmp	r3, #0
 810592c:	d005      	beq.n	810593a <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 810592e:	4b4d      	ldr	r3, [pc, #308]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105930:	689b      	ldr	r3, [r3, #8]
 8105932:	0f1b      	lsrs	r3, r3, #28
 8105934:	f003 030f 	and.w	r3, r3, #15
 8105938:	e006      	b.n	8105948 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 810593a:	4b4a      	ldr	r3, [pc, #296]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 810593c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105940:	041b      	lsls	r3, r3, #16
 8105942:	0f1b      	lsrs	r3, r3, #28
 8105944:	f003 030f 	and.w	r3, r3, #15
 8105948:	4a49      	ldr	r2, [pc, #292]	@ (8105a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 810594a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810594e:	ee07 3a90 	vmov	s15, r3
 8105952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105956:	693b      	ldr	r3, [r7, #16]
 8105958:	ee07 3a90 	vmov	s15, r3
 810595c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8105964:	69bb      	ldr	r3, [r7, #24]
 8105966:	ee07 3a90 	vmov	s15, r3
 810596a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810596e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105972:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8105a6c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8105976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810597a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810597e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105982:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8105986:	ee67 7a27 	vmul.f32	s15, s14, s15
 810598a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810598e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8105990:	4b34      	ldr	r3, [pc, #208]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105998:	2b00      	cmp	r3, #0
 810599a:	d017      	beq.n	81059cc <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 810599c:	4b31      	ldr	r3, [pc, #196]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 810599e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81059a0:	0a5b      	lsrs	r3, r3, #9
 81059a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81059a6:	ee07 3a90 	vmov	s15, r3
 81059aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 81059ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81059b2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 81059b6:	edd7 6a07 	vldr	s13, [r7, #28]
 81059ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059c2:	ee17 2a90 	vmov	r2, s15
 81059c6:	687b      	ldr	r3, [r7, #4]
 81059c8:	601a      	str	r2, [r3, #0]
 81059ca:	e002      	b.n	81059d2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	2200      	movs	r2, #0
 81059d0:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 81059d2:	4b24      	ldr	r3, [pc, #144]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81059d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81059d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81059da:	2b00      	cmp	r3, #0
 81059dc:	d017      	beq.n	8105a0e <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 81059de:	4b21      	ldr	r3, [pc, #132]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 81059e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81059e2:	0c1b      	lsrs	r3, r3, #16
 81059e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81059e8:	ee07 3a90 	vmov	s15, r3
 81059ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 81059f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81059f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 81059f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81059fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a04:	ee17 2a90 	vmov	r2, s15
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	605a      	str	r2, [r3, #4]
 8105a0c:	e002      	b.n	8105a14 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	2200      	movs	r2, #0
 8105a12:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8105a14:	4b13      	ldr	r3, [pc, #76]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105a1c:	2b00      	cmp	r3, #0
 8105a1e:	d017      	beq.n	8105a50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8105a20:	4b10      	ldr	r3, [pc, #64]	@ (8105a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8105a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8105a24:	0e1b      	lsrs	r3, r3, #24
 8105a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105a2a:	ee07 3a90 	vmov	s15, r3
 8105a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8105a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105a36:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8105a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a46:	ee17 2a90 	vmov	r2, s15
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105a4e:	e002      	b.n	8105a56 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105a50:	687b      	ldr	r3, [r7, #4]
 8105a52:	2200      	movs	r2, #0
 8105a54:	609a      	str	r2, [r3, #8]
}
 8105a56:	bf00      	nop
 8105a58:	3724      	adds	r7, #36	@ 0x24
 8105a5a:	46bd      	mov	sp, r7
 8105a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a60:	4770      	bx	lr
 8105a62:	bf00      	nop
 8105a64:	46020c00 	.word	0x46020c00
 8105a68:	4b742400 	.word	0x4b742400
 8105a6c:	46000000 	.word	0x46000000
 8105a70:	08109300 	.word	0x08109300

08105a74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8105a74:	b480      	push	{r7}
 8105a76:	b089      	sub	sp, #36	@ 0x24
 8105a78:	af00      	add	r7, sp, #0
 8105a7a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8105a7c:	4ba6      	ldr	r3, [pc, #664]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105a7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105a80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105a84:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8105a86:	4ba4      	ldr	r3, [pc, #656]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105a8a:	f003 0303 	and.w	r3, r3, #3
 8105a8e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8105a90:	4ba1      	ldr	r3, [pc, #644]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105a94:	0a1b      	lsrs	r3, r3, #8
 8105a96:	f003 030f 	and.w	r3, r3, #15
 8105a9a:	3301      	adds	r3, #1
 8105a9c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8105a9e:	4b9e      	ldr	r3, [pc, #632]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105aa2:	091b      	lsrs	r3, r3, #4
 8105aa4:	f003 0301 	and.w	r3, r3, #1
 8105aa8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8105aaa:	4b9b      	ldr	r3, [pc, #620]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8105aae:	08db      	lsrs	r3, r3, #3
 8105ab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105ab4:	68fa      	ldr	r2, [r7, #12]
 8105ab6:	fb02 f303 	mul.w	r3, r2, r3
 8105aba:	ee07 3a90 	vmov	s15, r3
 8105abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ac2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8105ac6:	697b      	ldr	r3, [r7, #20]
 8105ac8:	2b03      	cmp	r3, #3
 8105aca:	d062      	beq.n	8105b92 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8105acc:	697b      	ldr	r3, [r7, #20]
 8105ace:	2b03      	cmp	r3, #3
 8105ad0:	f200 8081 	bhi.w	8105bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8105ad4:	697b      	ldr	r3, [r7, #20]
 8105ad6:	2b01      	cmp	r3, #1
 8105ad8:	d024      	beq.n	8105b24 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8105ada:	697b      	ldr	r3, [r7, #20]
 8105adc:	2b02      	cmp	r3, #2
 8105ade:	d17a      	bne.n	8105bd6 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8105ae0:	693b      	ldr	r3, [r7, #16]
 8105ae2:	ee07 3a90 	vmov	s15, r3
 8105ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aea:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8105d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8105aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105af2:	4b89      	ldr	r3, [pc, #548]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105afa:	ee07 3a90 	vmov	s15, r3
 8105afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8105b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8105b06:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8105d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8105b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8105b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8105b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8105b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b1e:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8105b22:	e08f      	b.n	8105c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8105b24:	4b7c      	ldr	r3, [pc, #496]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105b26:	689b      	ldr	r3, [r3, #8]
 8105b28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105b2c:	2b00      	cmp	r3, #0
 8105b2e:	d005      	beq.n	8105b3c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8105b30:	4b79      	ldr	r3, [pc, #484]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105b32:	689b      	ldr	r3, [r3, #8]
 8105b34:	0f1b      	lsrs	r3, r3, #28
 8105b36:	f003 030f 	and.w	r3, r3, #15
 8105b3a:	e006      	b.n	8105b4a <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8105b3c:	4b76      	ldr	r3, [pc, #472]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105b3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105b42:	041b      	lsls	r3, r3, #16
 8105b44:	0f1b      	lsrs	r3, r3, #28
 8105b46:	f003 030f 	and.w	r3, r3, #15
 8105b4a:	4a76      	ldr	r2, [pc, #472]	@ (8105d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8105b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105b50:	ee07 3a90 	vmov	s15, r3
 8105b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b58:	693b      	ldr	r3, [r7, #16]
 8105b5a:	ee07 3a90 	vmov	s15, r3
 8105b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105b66:	69bb      	ldr	r3, [r7, #24]
 8105b68:	ee07 3a90 	vmov	s15, r3
 8105b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b70:	ed97 6a02 	vldr	s12, [r7, #8]
 8105b74:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8105d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8105b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8105b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b90:	e058      	b.n	8105c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8105b92:	693b      	ldr	r3, [r7, #16]
 8105b94:	ee07 3a90 	vmov	s15, r3
 8105b98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b9c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8105d1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8105ba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105ba4:	4b5c      	ldr	r3, [pc, #368]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bac:	ee07 3a90 	vmov	s15, r3
 8105bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8105bb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8105bb8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8105d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8105bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8105bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8105bc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8105bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105bd4:	e036      	b.n	8105c44 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8105bd6:	4b50      	ldr	r3, [pc, #320]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105bd8:	689b      	ldr	r3, [r3, #8]
 8105bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105bde:	2b00      	cmp	r3, #0
 8105be0:	d005      	beq.n	8105bee <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8105be2:	4b4d      	ldr	r3, [pc, #308]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105be4:	689b      	ldr	r3, [r3, #8]
 8105be6:	0f1b      	lsrs	r3, r3, #28
 8105be8:	f003 030f 	and.w	r3, r3, #15
 8105bec:	e006      	b.n	8105bfc <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8105bee:	4b4a      	ldr	r3, [pc, #296]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105bf4:	041b      	lsls	r3, r3, #16
 8105bf6:	0f1b      	lsrs	r3, r3, #28
 8105bf8:	f003 030f 	and.w	r3, r3, #15
 8105bfc:	4a49      	ldr	r2, [pc, #292]	@ (8105d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8105bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105c02:	ee07 3a90 	vmov	s15, r3
 8105c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c0a:	693b      	ldr	r3, [r7, #16]
 8105c0c:	ee07 3a90 	vmov	s15, r3
 8105c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8105c18:	69bb      	ldr	r3, [r7, #24]
 8105c1a:	ee07 3a90 	vmov	s15, r3
 8105c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8105c26:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8105d20 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8105c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8105c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c42:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8105c44:	4b34      	ldr	r3, [pc, #208]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8105c4c:	2b00      	cmp	r3, #0
 8105c4e:	d017      	beq.n	8105c80 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8105c50:	4b31      	ldr	r3, [pc, #196]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105c54:	0a5b      	lsrs	r3, r3, #9
 8105c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105c5a:	ee07 3a90 	vmov	s15, r3
 8105c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8105c62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105c66:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8105c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c76:	ee17 2a90 	vmov	r2, s15
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	601a      	str	r2, [r3, #0]
 8105c7e:	e002      	b.n	8105c86 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	2200      	movs	r2, #0
 8105c84:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8105c86:	4b24      	ldr	r3, [pc, #144]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105c8e:	2b00      	cmp	r3, #0
 8105c90:	d017      	beq.n	8105cc2 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8105c92:	4b21      	ldr	r3, [pc, #132]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105c96:	0c1b      	lsrs	r3, r3, #16
 8105c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105c9c:	ee07 3a90 	vmov	s15, r3
 8105ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8105ca4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105ca8:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8105cac:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105cb8:	ee17 2a90 	vmov	r2, s15
 8105cbc:	687b      	ldr	r3, [r7, #4]
 8105cbe:	605a      	str	r2, [r3, #4]
 8105cc0:	e002      	b.n	8105cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105cc2:	687b      	ldr	r3, [r7, #4]
 8105cc4:	2200      	movs	r2, #0
 8105cc6:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8105cc8:	4b13      	ldr	r3, [pc, #76]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8105cd0:	2b00      	cmp	r3, #0
 8105cd2:	d017      	beq.n	8105d04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8105cd4:	4b10      	ldr	r3, [pc, #64]	@ (8105d18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8105cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105cd8:	0e1b      	lsrs	r3, r3, #24
 8105cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105cde:	ee07 3a90 	vmov	s15, r3
 8105ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8105ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8105cea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8105cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105cfa:	ee17 2a90 	vmov	r2, s15
 8105cfe:	687b      	ldr	r3, [r7, #4]
 8105d00:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105d02:	e002      	b.n	8105d0a <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	2200      	movs	r2, #0
 8105d08:	609a      	str	r2, [r3, #8]
}
 8105d0a:	bf00      	nop
 8105d0c:	3724      	adds	r7, #36	@ 0x24
 8105d0e:	46bd      	mov	sp, r7
 8105d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d14:	4770      	bx	lr
 8105d16:	bf00      	nop
 8105d18:	46020c00 	.word	0x46020c00
 8105d1c:	4b742400 	.word	0x4b742400
 8105d20:	46000000 	.word	0x46000000
 8105d24:	08109300 	.word	0x08109300

08105d28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8105d28:	b580      	push	{r7, lr}
 8105d2a:	b08e      	sub	sp, #56	@ 0x38
 8105d2c:	af00      	add	r7, sp, #0
 8105d2e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8105d32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105d36:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8105d3a:	430b      	orrs	r3, r1
 8105d3c:	d145      	bne.n	8105dca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8105d3e:	4baa      	ldr	r3, [pc, #680]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8105d48:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8105d4a:	4ba7      	ldr	r3, [pc, #668]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105d50:	f003 0302 	and.w	r3, r3, #2
 8105d54:	2b02      	cmp	r3, #2
 8105d56:	d108      	bne.n	8105d6a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8105d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105d5e:	d104      	bne.n	8105d6a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8105d60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105d64:	637b      	str	r3, [r7, #52]	@ 0x34
 8105d66:	f001 b987 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8105d6a:	4b9f      	ldr	r3, [pc, #636]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8105d74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105d78:	d114      	bne.n	8105da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8105d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105d7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105d80:	d110      	bne.n	8105da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8105d82:	4b99      	ldr	r3, [pc, #612]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8105d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8105d8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105d90:	d103      	bne.n	8105d9a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8105d92:	23fa      	movs	r3, #250	@ 0xfa
 8105d94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8105d96:	f001 b96f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8105d9a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8105d9e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8105da0:	f001 b96a 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8105da4:	4b90      	ldr	r3, [pc, #576]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105da6:	681b      	ldr	r3, [r3, #0]
 8105da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105db0:	d107      	bne.n	8105dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8105db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105db4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105db8:	d103      	bne.n	8105dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8105dba:	4b8c      	ldr	r3, [pc, #560]	@ (8105fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8105dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8105dbe:	f001 b95b 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8105dc2:	2300      	movs	r3, #0
 8105dc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8105dc6:	f001 b957 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8105dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105dce:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8105dd2:	430b      	orrs	r3, r1
 8105dd4:	d151      	bne.n	8105e7a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8105dd6:	4b84      	ldr	r3, [pc, #528]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105dd8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105ddc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8105de0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8105de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105de4:	2b80      	cmp	r3, #128	@ 0x80
 8105de6:	d035      	beq.n	8105e54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8105de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105dea:	2b80      	cmp	r3, #128	@ 0x80
 8105dec:	d841      	bhi.n	8105e72 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8105dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105df0:	2b60      	cmp	r3, #96	@ 0x60
 8105df2:	d02a      	beq.n	8105e4a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8105df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105df6:	2b60      	cmp	r3, #96	@ 0x60
 8105df8:	d83b      	bhi.n	8105e72 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8105dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105dfc:	2b40      	cmp	r3, #64	@ 0x40
 8105dfe:	d009      	beq.n	8105e14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8105e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e02:	2b40      	cmp	r3, #64	@ 0x40
 8105e04:	d835      	bhi.n	8105e72 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8105e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e08:	2b00      	cmp	r3, #0
 8105e0a:	d00c      	beq.n	8105e26 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8105e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e0e:	2b20      	cmp	r3, #32
 8105e10:	d012      	beq.n	8105e38 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8105e12:	e02e      	b.n	8105e72 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105e18:	4618      	mov	r0, r3
 8105e1a:	f7ff fb77 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8105e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105e20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105e22:	f001 b929 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105e26:	f107 0318 	add.w	r3, r7, #24
 8105e2a:	4618      	mov	r0, r3
 8105e2c:	f7ff fcc8 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8105e30:	69bb      	ldr	r3, [r7, #24]
 8105e32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105e34:	f001 b920 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e38:	f107 030c 	add.w	r3, r7, #12
 8105e3c:	4618      	mov	r0, r3
 8105e3e:	f7ff fe19 	bl	8105a74 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8105e42:	68fb      	ldr	r3, [r7, #12]
 8105e44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105e46:	f001 b917 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8105e4a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8105e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105e50:	f001 b912 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105e54:	4b64      	ldr	r3, [pc, #400]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105e56:	681b      	ldr	r3, [r3, #0]
 8105e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105e60:	d103      	bne.n	8105e6a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8105e62:	4b63      	ldr	r3, [pc, #396]	@ (8105ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8105e64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8105e66:	f001 b907 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8105e6a:	2300      	movs	r3, #0
 8105e6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105e6e:	f001 b903 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8105e72:	2300      	movs	r3, #0
 8105e74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105e76:	f001 b8ff 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8105e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105e7e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8105e82:	430b      	orrs	r3, r1
 8105e84:	d158      	bne.n	8105f38 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8105e86:	4b58      	ldr	r3, [pc, #352]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105e88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8105e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8105e90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8105e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105e98:	d03b      	beq.n	8105f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8105e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105e9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105ea0:	d846      	bhi.n	8105f30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8105ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ea4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105ea8:	d02e      	beq.n	8105f08 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8105eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105eac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105eb0:	d83e      	bhi.n	8105f30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8105eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105eb8:	d00b      	beq.n	8105ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8105eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8105ec0:	d836      	bhi.n	8105f30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8105ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105ec4:	2b00      	cmp	r3, #0
 8105ec6:	d00d      	beq.n	8105ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8105ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105ece:	d012      	beq.n	8105ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8105ed0:	e02e      	b.n	8105f30 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105ed6:	4618      	mov	r0, r3
 8105ed8:	f7ff fb18 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8105edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105ee0:	f001 b8ca 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ee4:	f107 0318 	add.w	r3, r7, #24
 8105ee8:	4618      	mov	r0, r3
 8105eea:	f7ff fc69 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8105eee:	69bb      	ldr	r3, [r7, #24]
 8105ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105ef2:	f001 b8c1 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ef6:	f107 030c 	add.w	r3, r7, #12
 8105efa:	4618      	mov	r0, r3
 8105efc:	f7ff fdba 	bl	8105a74 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8105f00:	68fb      	ldr	r3, [r7, #12]
 8105f02:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105f04:	f001 b8b8 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8105f08:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8105f0c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105f0e:	f001 b8b3 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8105f12:	4b35      	ldr	r3, [pc, #212]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105f14:	681b      	ldr	r3, [r3, #0]
 8105f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8105f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105f1e:	d103      	bne.n	8105f28 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8105f20:	4b33      	ldr	r3, [pc, #204]	@ (8105ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8105f22:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8105f24:	f001 b8a8 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8105f28:	2300      	movs	r3, #0
 8105f2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105f2c:	f001 b8a4 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8105f30:	2300      	movs	r3, #0
 8105f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105f34:	f001 b8a0 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8105f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105f3c:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8105f40:	430b      	orrs	r3, r1
 8105f42:	d16e      	bne.n	8106022 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8105f44:	4b28      	ldr	r3, [pc, #160]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8105f4a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8105f4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8105f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f52:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8105f56:	d034      	beq.n	8105fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8105f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8105f5e:	d85c      	bhi.n	810601a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8105f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105f66:	d00b      	beq.n	8105f80 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8105f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8105f6e:	d854      	bhi.n	810601a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8105f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f72:	2b00      	cmp	r3, #0
 8105f74:	d016      	beq.n	8105fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8105f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8105f78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105f7c:	d009      	beq.n	8105f92 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8105f7e:	e04c      	b.n	810601a <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8105f80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105f84:	4618      	mov	r0, r3
 8105f86:	f7ff fac1 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8105f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105f8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105f8e:	f001 b873 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f92:	f107 0318 	add.w	r3, r7, #24
 8105f96:	4618      	mov	r0, r3
 8105f98:	f7ff fc12 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8105f9c:	69fb      	ldr	r3, [r7, #28]
 8105f9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105fa0:	f001 b86a 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8105fa4:	4b10      	ldr	r3, [pc, #64]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8105fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105fb0:	d103      	bne.n	8105fba <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8105fb2:	4b10      	ldr	r3, [pc, #64]	@ (8105ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8105fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8105fb6:	f001 b85f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8105fba:	2300      	movs	r3, #0
 8105fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8105fbe:	f001 b85b 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8105fc2:	4b09      	ldr	r3, [pc, #36]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105fc4:	681b      	ldr	r3, [r3, #0]
 8105fc6:	f003 0320 	and.w	r3, r3, #32
 8105fca:	2b20      	cmp	r3, #32
 8105fcc:	d121      	bne.n	8106012 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8105fce:	4b06      	ldr	r3, [pc, #24]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105fd0:	689b      	ldr	r3, [r3, #8]
 8105fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8105fd6:	2b00      	cmp	r3, #0
 8105fd8:	d00e      	beq.n	8105ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8105fda:	4b03      	ldr	r3, [pc, #12]	@ (8105fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8105fdc:	689b      	ldr	r3, [r3, #8]
 8105fde:	0e1b      	lsrs	r3, r3, #24
 8105fe0:	f003 030f 	and.w	r3, r3, #15
 8105fe4:	e00f      	b.n	8106006 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8105fe6:	bf00      	nop
 8105fe8:	46020c00 	.word	0x46020c00
 8105fec:	0007a120 	.word	0x0007a120
 8105ff0:	00f42400 	.word	0x00f42400
 8105ff4:	02dc6c00 	.word	0x02dc6c00
 8105ff8:	4ba7      	ldr	r3, [pc, #668]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8105ffa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105ffe:	041b      	lsls	r3, r3, #16
 8106000:	0e1b      	lsrs	r3, r3, #24
 8106002:	f003 030f 	and.w	r3, r3, #15
 8106006:	4aa5      	ldr	r2, [pc, #660]	@ (810629c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8106008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810600c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 810600e:	f001 b833 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106012:	2300      	movs	r3, #0
 8106014:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106016:	f001 b82f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 810601a:	2300      	movs	r3, #0
 810601c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810601e:	f001 b82b 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8106022:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106026:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 810602a:	430b      	orrs	r3, r1
 810602c:	d17f      	bne.n	810612e <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 810602e:	4b9a      	ldr	r3, [pc, #616]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8106030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8106034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8106038:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 810603a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810603c:	2b00      	cmp	r3, #0
 810603e:	d165      	bne.n	810610c <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8106040:	4b95      	ldr	r3, [pc, #596]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8106042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106046:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 810604a:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 810604c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810604e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8106052:	d034      	beq.n	81060be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8106054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106056:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 810605a:	d853      	bhi.n	8106104 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 810605c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810605e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106062:	d00b      	beq.n	810607c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8106064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810606a:	d84b      	bhi.n	8106104 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 810606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810606e:	2b00      	cmp	r3, #0
 8106070:	d016      	beq.n	81060a0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8106072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106074:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106078:	d009      	beq.n	810608e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 810607a:	e043      	b.n	8106104 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810607c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106080:	4618      	mov	r0, r3
 8106082:	f7ff fa43 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106088:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 810608a:	f000 bff5 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810608e:	f107 0318 	add.w	r3, r7, #24
 8106092:	4618      	mov	r0, r3
 8106094:	f7ff fb94 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8106098:	69fb      	ldr	r3, [r7, #28]
 810609a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 810609c:	f000 bfec 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 81060a0:	4b7d      	ldr	r3, [pc, #500]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81060a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81060ac:	d103      	bne.n	81060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 81060ae:	4b7c      	ldr	r3, [pc, #496]	@ (81062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 81060b0:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 81060b2:	f000 bfe1 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 81060b6:	2300      	movs	r3, #0
 81060b8:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 81060ba:	f000 bfdd 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 81060be:	4b76      	ldr	r3, [pc, #472]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81060c0:	681b      	ldr	r3, [r3, #0]
 81060c2:	f003 0320 	and.w	r3, r3, #32
 81060c6:	2b20      	cmp	r3, #32
 81060c8:	d118      	bne.n	81060fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 81060ca:	4b73      	ldr	r3, [pc, #460]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81060cc:	689b      	ldr	r3, [r3, #8]
 81060ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81060d2:	2b00      	cmp	r3, #0
 81060d4:	d005      	beq.n	81060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 81060d6:	4b70      	ldr	r3, [pc, #448]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81060d8:	689b      	ldr	r3, [r3, #8]
 81060da:	0e1b      	lsrs	r3, r3, #24
 81060dc:	f003 030f 	and.w	r3, r3, #15
 81060e0:	e006      	b.n	81060f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 81060e2:	4b6d      	ldr	r3, [pc, #436]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81060e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81060e8:	041b      	lsls	r3, r3, #16
 81060ea:	0e1b      	lsrs	r3, r3, #24
 81060ec:	f003 030f 	and.w	r3, r3, #15
 81060f0:	4a6a      	ldr	r2, [pc, #424]	@ (810629c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 81060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81060f6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 81060f8:	f000 bfbe 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 81060fc:	2300      	movs	r3, #0
 81060fe:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8106100:	f000 bfba 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8106104:	2300      	movs	r3, #0
 8106106:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8106108:	f000 bfb6 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 810610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810610e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106112:	d108      	bne.n	8106126 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106114:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106118:	4618      	mov	r0, r3
 810611a:	f7ff f9f7 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 810611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106120:	637b      	str	r3, [r7, #52]	@ 0x34
 8106122:	f000 bfa9 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8106126:	2300      	movs	r3, #0
 8106128:	637b      	str	r3, [r7, #52]	@ 0x34
 810612a:	f000 bfa5 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 810612e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106132:	1e51      	subs	r1, r2, #1
 8106134:	430b      	orrs	r3, r1
 8106136:	d136      	bne.n	81061a6 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8106138:	4b57      	ldr	r3, [pc, #348]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 810613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810613e:	f003 0303 	and.w	r3, r3, #3
 8106142:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8106144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106146:	2b00      	cmp	r3, #0
 8106148:	d104      	bne.n	8106154 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 810614a:	f7fe fb55 	bl	81047f8 <HAL_RCC_GetPCLK2Freq>
 810614e:	6378      	str	r0, [r7, #52]	@ 0x34
 8106150:	f000 bf92 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8106154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106156:	2b01      	cmp	r3, #1
 8106158:	d104      	bne.n	8106164 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 810615a:	f7fe fa1d 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 810615e:	6378      	str	r0, [r7, #52]	@ 0x34
 8106160:	f000 bf8a 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8106164:	4b4c      	ldr	r3, [pc, #304]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810616c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106170:	d106      	bne.n	8106180 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8106172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106174:	2b02      	cmp	r3, #2
 8106176:	d103      	bne.n	8106180 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8106178:	4b4a      	ldr	r3, [pc, #296]	@ (81062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 810617a:	637b      	str	r3, [r7, #52]	@ 0x34
 810617c:	f000 bf7c 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8106180:	4b45      	ldr	r3, [pc, #276]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8106182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106186:	f003 0302 	and.w	r3, r3, #2
 810618a:	2b02      	cmp	r3, #2
 810618c:	d107      	bne.n	810619e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 810618e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106190:	2b03      	cmp	r3, #3
 8106192:	d104      	bne.n	810619e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8106194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106198:	637b      	str	r3, [r7, #52]	@ 0x34
 810619a:	f000 bf6d 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 810619e:	2300      	movs	r3, #0
 81061a0:	637b      	str	r3, [r7, #52]	@ 0x34
 81061a2:	f000 bf69 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 81061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81061aa:	1e91      	subs	r1, r2, #2
 81061ac:	430b      	orrs	r3, r1
 81061ae:	d136      	bne.n	810621e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 81061b0:	4b39      	ldr	r3, [pc, #228]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81061b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81061b6:	f003 030c 	and.w	r3, r3, #12
 81061ba:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 81061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061be:	2b00      	cmp	r3, #0
 81061c0:	d104      	bne.n	81061cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 81061c2:	f7fe fb05 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 81061c6:	6378      	str	r0, [r7, #52]	@ 0x34
 81061c8:	f000 bf56 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 81061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061ce:	2b04      	cmp	r3, #4
 81061d0:	d104      	bne.n	81061dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 81061d2:	f7fe f9e1 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 81061d6:	6378      	str	r0, [r7, #52]	@ 0x34
 81061d8:	f000 bf4e 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 81061dc:	4b2e      	ldr	r3, [pc, #184]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81061de:	681b      	ldr	r3, [r3, #0]
 81061e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81061e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81061e8:	d106      	bne.n	81061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 81061ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81061ec:	2b08      	cmp	r3, #8
 81061ee:	d103      	bne.n	81061f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 81061f0:	4b2c      	ldr	r3, [pc, #176]	@ (81062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 81061f2:	637b      	str	r3, [r7, #52]	@ 0x34
 81061f4:	f000 bf40 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 81061f8:	4b27      	ldr	r3, [pc, #156]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 81061fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81061fe:	f003 0302 	and.w	r3, r3, #2
 8106202:	2b02      	cmp	r3, #2
 8106204:	d107      	bne.n	8106216 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8106206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106208:	2b0c      	cmp	r3, #12
 810620a:	d104      	bne.n	8106216 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 810620c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106210:	637b      	str	r3, [r7, #52]	@ 0x34
 8106212:	f000 bf31 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8106216:	2300      	movs	r3, #0
 8106218:	637b      	str	r3, [r7, #52]	@ 0x34
 810621a:	f000 bf2d 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 810621e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106222:	1f11      	subs	r1, r2, #4
 8106224:	430b      	orrs	r3, r1
 8106226:	d13f      	bne.n	81062a8 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8106228:	4b1b      	ldr	r3, [pc, #108]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 810622a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810622e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8106232:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8106234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106236:	2b00      	cmp	r3, #0
 8106238:	d104      	bne.n	8106244 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 810623a:	f7fe fac9 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 810623e:	6378      	str	r0, [r7, #52]	@ 0x34
 8106240:	f000 bf1a 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8106244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106246:	2b10      	cmp	r3, #16
 8106248:	d104      	bne.n	8106254 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 810624a:	f7fe f9a5 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 810624e:	6378      	str	r0, [r7, #52]	@ 0x34
 8106250:	f000 bf12 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8106254:	4b10      	ldr	r3, [pc, #64]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8106256:	681b      	ldr	r3, [r3, #0]
 8106258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810625c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106260:	d106      	bne.n	8106270 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8106262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106264:	2b20      	cmp	r3, #32
 8106266:	d103      	bne.n	8106270 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8106268:	4b0e      	ldr	r3, [pc, #56]	@ (81062a4 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 810626a:	637b      	str	r3, [r7, #52]	@ 0x34
 810626c:	f000 bf04 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8106270:	4b09      	ldr	r3, [pc, #36]	@ (8106298 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8106272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106276:	f003 0302 	and.w	r3, r3, #2
 810627a:	2b02      	cmp	r3, #2
 810627c:	d107      	bne.n	810628e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 810627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106280:	2b30      	cmp	r3, #48	@ 0x30
 8106282:	d104      	bne.n	810628e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8106284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106288:	637b      	str	r3, [r7, #52]	@ 0x34
 810628a:	f000 bef5 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 810628e:	2300      	movs	r3, #0
 8106290:	637b      	str	r3, [r7, #52]	@ 0x34
 8106292:	f000 bef1 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8106296:	bf00      	nop
 8106298:	46020c00 	.word	0x46020c00
 810629c:	08109300 	.word	0x08109300
 81062a0:	02dc6c00 	.word	0x02dc6c00
 81062a4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 81062a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81062ac:	f1a2 0108 	sub.w	r1, r2, #8
 81062b0:	430b      	orrs	r3, r1
 81062b2:	d136      	bne.n	8106322 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 81062b4:	4ba4      	ldr	r3, [pc, #656]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81062b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81062ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 81062be:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 81062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062c2:	2b00      	cmp	r3, #0
 81062c4:	d104      	bne.n	81062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 81062c6:	f7fe fa83 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 81062ca:	6378      	str	r0, [r7, #52]	@ 0x34
 81062cc:	f000 bed4 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 81062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062d2:	2b40      	cmp	r3, #64	@ 0x40
 81062d4:	d104      	bne.n	81062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 81062d6:	f7fe f95f 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 81062da:	6378      	str	r0, [r7, #52]	@ 0x34
 81062dc:	f000 becc 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 81062e0:	4b99      	ldr	r3, [pc, #612]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81062e2:	681b      	ldr	r3, [r3, #0]
 81062e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81062e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81062ec:	d106      	bne.n	81062fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 81062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81062f0:	2b80      	cmp	r3, #128	@ 0x80
 81062f2:	d103      	bne.n	81062fc <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 81062f4:	4b95      	ldr	r3, [pc, #596]	@ (810654c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 81062f6:	637b      	str	r3, [r7, #52]	@ 0x34
 81062f8:	f000 bebe 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 81062fc:	4b92      	ldr	r3, [pc, #584]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81062fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106302:	f003 0302 	and.w	r3, r3, #2
 8106306:	2b02      	cmp	r3, #2
 8106308:	d107      	bne.n	810631a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 810630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810630c:	2bc0      	cmp	r3, #192	@ 0xc0
 810630e:	d104      	bne.n	810631a <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8106310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106314:	637b      	str	r3, [r7, #52]	@ 0x34
 8106316:	f000 beaf 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 810631a:	2300      	movs	r3, #0
 810631c:	637b      	str	r3, [r7, #52]	@ 0x34
 810631e:	f000 beab 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8106322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106326:	f1a2 0110 	sub.w	r1, r2, #16
 810632a:	430b      	orrs	r3, r1
 810632c:	d139      	bne.n	81063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 810632e:	4b86      	ldr	r3, [pc, #536]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106334:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106338:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 810633a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810633c:	2b00      	cmp	r3, #0
 810633e:	d104      	bne.n	810634a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8106340:	f7fe fa46 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 8106344:	6378      	str	r0, [r7, #52]	@ 0x34
 8106346:	f000 be97 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 810634a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810634c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106350:	d104      	bne.n	810635c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8106352:	f7fe f921 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106356:	6378      	str	r0, [r7, #52]	@ 0x34
 8106358:	f000 be8e 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 810635c:	4b7a      	ldr	r3, [pc, #488]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 810635e:	681b      	ldr	r3, [r3, #0]
 8106360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106368:	d107      	bne.n	810637a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 810636a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810636c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106370:	d103      	bne.n	810637a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8106372:	4b76      	ldr	r3, [pc, #472]	@ (810654c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8106374:	637b      	str	r3, [r7, #52]	@ 0x34
 8106376:	f000 be7f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 810637a:	4b73      	ldr	r3, [pc, #460]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 810637c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106380:	f003 0302 	and.w	r3, r3, #2
 8106384:	2b02      	cmp	r3, #2
 8106386:	d108      	bne.n	810639a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8106388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810638a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810638e:	d104      	bne.n	810639a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8106390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106394:	637b      	str	r3, [r7, #52]	@ 0x34
 8106396:	f000 be6f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 810639a:	2300      	movs	r3, #0
 810639c:	637b      	str	r3, [r7, #52]	@ 0x34
 810639e:	f000 be6b 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 81063a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81063a6:	f1a2 0120 	sub.w	r1, r2, #32
 81063aa:	430b      	orrs	r3, r1
 81063ac:	d158      	bne.n	8106460 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 81063ae:	4b66      	ldr	r3, [pc, #408]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81063b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81063b4:	f003 0307 	and.w	r3, r3, #7
 81063b8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 81063ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063bc:	2b00      	cmp	r3, #0
 81063be:	d104      	bne.n	81063ca <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 81063c0:	f7fe fa2e 	bl	8104820 <HAL_RCC_GetPCLK3Freq>
 81063c4:	6378      	str	r0, [r7, #52]	@ 0x34
 81063c6:	f000 be57 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 81063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063cc:	2b01      	cmp	r3, #1
 81063ce:	d104      	bne.n	81063da <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 81063d0:	f7fe f8e2 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 81063d4:	6378      	str	r0, [r7, #52]	@ 0x34
 81063d6:	f000 be4f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 81063da:	4b5b      	ldr	r3, [pc, #364]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81063dc:	681b      	ldr	r3, [r3, #0]
 81063de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81063e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81063e6:	d106      	bne.n	81063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 81063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81063ea:	2b02      	cmp	r3, #2
 81063ec:	d103      	bne.n	81063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 81063ee:	4b57      	ldr	r3, [pc, #348]	@ (810654c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 81063f0:	637b      	str	r3, [r7, #52]	@ 0x34
 81063f2:	f000 be41 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 81063f6:	4b54      	ldr	r3, [pc, #336]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81063f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81063fc:	f003 0302 	and.w	r3, r3, #2
 8106400:	2b02      	cmp	r3, #2
 8106402:	d107      	bne.n	8106414 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8106404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106406:	2b03      	cmp	r3, #3
 8106408:	d104      	bne.n	8106414 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 810640a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810640e:	637b      	str	r3, [r7, #52]	@ 0x34
 8106410:	f000 be32 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8106414:	4b4c      	ldr	r3, [pc, #304]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	f003 0320 	and.w	r3, r3, #32
 810641c:	2b20      	cmp	r3, #32
 810641e:	d11b      	bne.n	8106458 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8106420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106422:	2b04      	cmp	r3, #4
 8106424:	d118      	bne.n	8106458 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106426:	4b48      	ldr	r3, [pc, #288]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106428:	689b      	ldr	r3, [r3, #8]
 810642a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810642e:	2b00      	cmp	r3, #0
 8106430:	d005      	beq.n	810643e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8106432:	4b45      	ldr	r3, [pc, #276]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106434:	689b      	ldr	r3, [r3, #8]
 8106436:	0e1b      	lsrs	r3, r3, #24
 8106438:	f003 030f 	and.w	r3, r3, #15
 810643c:	e006      	b.n	810644c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 810643e:	4b42      	ldr	r3, [pc, #264]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106440:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106444:	041b      	lsls	r3, r3, #16
 8106446:	0e1b      	lsrs	r3, r3, #24
 8106448:	f003 030f 	and.w	r3, r3, #15
 810644c:	4a40      	ldr	r2, [pc, #256]	@ (8106550 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 810644e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106452:	637b      	str	r3, [r7, #52]	@ 0x34
 8106454:	f000 be10 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8106458:	2300      	movs	r3, #0
 810645a:	637b      	str	r3, [r7, #52]	@ 0x34
 810645c:	f000 be0c 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8106460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106464:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8106468:	430b      	orrs	r3, r1
 810646a:	d173      	bne.n	8106554 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 810646c:	4b36      	ldr	r3, [pc, #216]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 810646e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8106472:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8106476:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8106478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810647a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810647e:	d104      	bne.n	810648a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8106480:	f7fe f88a 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106484:	6378      	str	r0, [r7, #52]	@ 0x34
 8106486:	f000 bdf7 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 810648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810648c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106490:	d108      	bne.n	81064a4 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106492:	f107 0318 	add.w	r3, r7, #24
 8106496:	4618      	mov	r0, r3
 8106498:	f7ff f992 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 810649c:	6a3b      	ldr	r3, [r7, #32]
 810649e:	637b      	str	r3, [r7, #52]	@ 0x34
 81064a0:	f000 bdea 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 81064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064a6:	2b00      	cmp	r3, #0
 81064a8:	d104      	bne.n	81064b4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 81064aa:	f7fe f977 	bl	810479c <HAL_RCC_GetHCLKFreq>
 81064ae:	6378      	str	r0, [r7, #52]	@ 0x34
 81064b0:	f000 bde2 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 81064b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81064b6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 81064ba:	d122      	bne.n	8106502 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 81064bc:	4b22      	ldr	r3, [pc, #136]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81064be:	681b      	ldr	r3, [r3, #0]
 81064c0:	f003 0320 	and.w	r3, r3, #32
 81064c4:	2b20      	cmp	r3, #32
 81064c6:	d118      	bne.n	81064fa <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 81064c8:	4b1f      	ldr	r3, [pc, #124]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81064ca:	689b      	ldr	r3, [r3, #8]
 81064cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81064d0:	2b00      	cmp	r3, #0
 81064d2:	d005      	beq.n	81064e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 81064d4:	4b1c      	ldr	r3, [pc, #112]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81064d6:	689b      	ldr	r3, [r3, #8]
 81064d8:	0e1b      	lsrs	r3, r3, #24
 81064da:	f003 030f 	and.w	r3, r3, #15
 81064de:	e006      	b.n	81064ee <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 81064e0:	4b19      	ldr	r3, [pc, #100]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 81064e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81064e6:	041b      	lsls	r3, r3, #16
 81064e8:	0e1b      	lsrs	r3, r3, #24
 81064ea:	f003 030f 	and.w	r3, r3, #15
 81064ee:	4a18      	ldr	r2, [pc, #96]	@ (8106550 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 81064f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81064f4:	637b      	str	r3, [r7, #52]	@ 0x34
 81064f6:	f000 bdbf 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 81064fa:	2300      	movs	r3, #0
 81064fc:	637b      	str	r3, [r7, #52]	@ 0x34
 81064fe:	f000 bdbb 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8106502:	4b11      	ldr	r3, [pc, #68]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810650a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810650e:	d107      	bne.n	8106520 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8106510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106512:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106516:	d103      	bne.n	8106520 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8106518:	4b0c      	ldr	r3, [pc, #48]	@ (810654c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 810651a:	637b      	str	r3, [r7, #52]	@ 0x34
 810651c:	f000 bdac 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8106520:	4b09      	ldr	r3, [pc, #36]	@ (8106548 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8106522:	681b      	ldr	r3, [r3, #0]
 8106524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106528:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810652c:	d107      	bne.n	810653e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 810652e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106534:	d103      	bne.n	810653e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8106536:	4b05      	ldr	r3, [pc, #20]	@ (810654c <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8106538:	637b      	str	r3, [r7, #52]	@ 0x34
 810653a:	f000 bd9d 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 810653e:	2300      	movs	r3, #0
 8106540:	637b      	str	r3, [r7, #52]	@ 0x34
 8106542:	f000 bd99 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8106546:	bf00      	nop
 8106548:	46020c00 	.word	0x46020c00
 810654c:	00f42400 	.word	0x00f42400
 8106550:	08109300 	.word	0x08109300
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8106554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106558:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810655c:	430b      	orrs	r3, r1
 810655e:	d158      	bne.n	8106612 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8106560:	4bad      	ldr	r3, [pc, #692]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8106562:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8106566:	f003 0307 	and.w	r3, r3, #7
 810656a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 810656c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810656e:	2b04      	cmp	r3, #4
 8106570:	d84b      	bhi.n	810660a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8106572:	a201      	add	r2, pc, #4	@ (adr r2, 8106578 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8106574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106578:	081065b1 	.word	0x081065b1
 810657c:	0810658d 	.word	0x0810658d
 8106580:	0810659f 	.word	0x0810659f
 8106584:	081065bb 	.word	0x081065bb
 8106588:	081065c5 	.word	0x081065c5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810658c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106590:	4618      	mov	r0, r3
 8106592:	f7fe ffbb 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8106596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106598:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810659a:	f000 bd6d 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810659e:	f107 030c 	add.w	r3, r7, #12
 81065a2:	4618      	mov	r0, r3
 81065a4:	f7ff fa66 	bl	8105a74 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 81065a8:	693b      	ldr	r3, [r7, #16]
 81065aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81065ac:	f000 bd64 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 81065b0:	f7fe f8f4 	bl	810479c <HAL_RCC_GetHCLKFreq>
 81065b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 81065b6:	f000 bd5f 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 81065ba:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 81065be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81065c0:	f000 bd5a 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 81065c4:	4b94      	ldr	r3, [pc, #592]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81065c6:	681b      	ldr	r3, [r3, #0]
 81065c8:	f003 0320 	and.w	r3, r3, #32
 81065cc:	2b20      	cmp	r3, #32
 81065ce:	d118      	bne.n	8106602 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 81065d0:	4b91      	ldr	r3, [pc, #580]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81065d2:	689b      	ldr	r3, [r3, #8]
 81065d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81065d8:	2b00      	cmp	r3, #0
 81065da:	d005      	beq.n	81065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 81065dc:	4b8e      	ldr	r3, [pc, #568]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81065de:	689b      	ldr	r3, [r3, #8]
 81065e0:	0e1b      	lsrs	r3, r3, #24
 81065e2:	f003 030f 	and.w	r3, r3, #15
 81065e6:	e006      	b.n	81065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 81065e8:	4b8b      	ldr	r3, [pc, #556]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81065ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81065ee:	041b      	lsls	r3, r3, #16
 81065f0:	0e1b      	lsrs	r3, r3, #24
 81065f2:	f003 030f 	and.w	r3, r3, #15
 81065f6:	4a89      	ldr	r2, [pc, #548]	@ (810681c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 81065f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81065fc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 81065fe:	f000 bd3b 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106602:	2300      	movs	r3, #0
 8106604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106606:	f000 bd37 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 810660a:	2300      	movs	r3, #0
 810660c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810660e:	f000 bd33 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8106612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106616:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 810661a:	430b      	orrs	r3, r1
 810661c:	d167      	bne.n	81066ee <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 810661e:	4b7e      	ldr	r3, [pc, #504]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8106620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8106624:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8106628:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 810662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810662c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106630:	d036      	beq.n	81066a0 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8106632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106634:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106638:	d855      	bhi.n	81066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 810663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810663c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106640:	d029      	beq.n	8106696 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8106642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106644:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106648:	d84d      	bhi.n	81066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 810664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810664c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106650:	d013      	beq.n	810667a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8106652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106654:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106658:	d845      	bhi.n	81066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 810665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810665c:	2b00      	cmp	r3, #0
 810665e:	d015      	beq.n	810668c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8106660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106666:	d13e      	bne.n	81066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810666c:	4618      	mov	r0, r3
 810666e:	f7fe ff4d 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8106672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8106674:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106676:	f000 bcff 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810667a:	f107 030c 	add.w	r3, r7, #12
 810667e:	4618      	mov	r0, r3
 8106680:	f7ff f9f8 	bl	8105a74 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8106684:	693b      	ldr	r3, [r7, #16]
 8106686:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106688:	f000 bcf6 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 810668c:	f7fe f886 	bl	810479c <HAL_RCC_GetHCLKFreq>
 8106690:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106692:	f000 bcf1 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8106696:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 810669a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 810669c:	f000 bcec 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 81066a0:	4b5d      	ldr	r3, [pc, #372]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81066a2:	681b      	ldr	r3, [r3, #0]
 81066a4:	f003 0320 	and.w	r3, r3, #32
 81066a8:	2b20      	cmp	r3, #32
 81066aa:	d118      	bne.n	81066de <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 81066ac:	4b5a      	ldr	r3, [pc, #360]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81066ae:	689b      	ldr	r3, [r3, #8]
 81066b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81066b4:	2b00      	cmp	r3, #0
 81066b6:	d005      	beq.n	81066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 81066b8:	4b57      	ldr	r3, [pc, #348]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81066ba:	689b      	ldr	r3, [r3, #8]
 81066bc:	0e1b      	lsrs	r3, r3, #24
 81066be:	f003 030f 	and.w	r3, r3, #15
 81066c2:	e006      	b.n	81066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 81066c4:	4b54      	ldr	r3, [pc, #336]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81066c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81066ca:	041b      	lsls	r3, r3, #16
 81066cc:	0e1b      	lsrs	r3, r3, #24
 81066ce:	f003 030f 	and.w	r3, r3, #15
 81066d2:	4a52      	ldr	r2, [pc, #328]	@ (810681c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 81066d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81066d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 81066da:	f000 bccd 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 81066de:	2300      	movs	r3, #0
 81066e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81066e2:	f000 bcc9 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 81066e6:	2300      	movs	r3, #0
 81066e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81066ea:	f000 bcc5 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 81066ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 81066f2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 81066f6:	430b      	orrs	r3, r1
 81066f8:	d14c      	bne.n	8106794 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 81066fa:	4b47      	ldr	r3, [pc, #284]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81066fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106700:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8106704:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8106706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106708:	2b00      	cmp	r3, #0
 810670a:	d104      	bne.n	8106716 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 810670c:	f7fe f860 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 8106710:	6378      	str	r0, [r7, #52]	@ 0x34
 8106712:	f000 bcb1 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8106716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106718:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810671c:	d104      	bne.n	8106728 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 810671e:	f7fd ff3b 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106722:	6378      	str	r0, [r7, #52]	@ 0x34
 8106724:	f000 bca8 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8106728:	4b3b      	ldr	r3, [pc, #236]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 810672a:	681b      	ldr	r3, [r3, #0]
 810672c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106730:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106734:	d107      	bne.n	8106746 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8106736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106738:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810673c:	d103      	bne.n	8106746 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 810673e:	4b38      	ldr	r3, [pc, #224]	@ (8106820 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8106740:	637b      	str	r3, [r7, #52]	@ 0x34
 8106742:	f000 bc99 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8106746:	4b34      	ldr	r3, [pc, #208]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	f003 0320 	and.w	r3, r3, #32
 810674e:	2b20      	cmp	r3, #32
 8106750:	d11c      	bne.n	810678c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8106752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106754:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106758:	d118      	bne.n	810678c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 810675a:	4b2f      	ldr	r3, [pc, #188]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 810675c:	689b      	ldr	r3, [r3, #8]
 810675e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106762:	2b00      	cmp	r3, #0
 8106764:	d005      	beq.n	8106772 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8106766:	4b2c      	ldr	r3, [pc, #176]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8106768:	689b      	ldr	r3, [r3, #8]
 810676a:	0e1b      	lsrs	r3, r3, #24
 810676c:	f003 030f 	and.w	r3, r3, #15
 8106770:	e006      	b.n	8106780 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8106772:	4b29      	ldr	r3, [pc, #164]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8106774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106778:	041b      	lsls	r3, r3, #16
 810677a:	0e1b      	lsrs	r3, r3, #24
 810677c:	f003 030f 	and.w	r3, r3, #15
 8106780:	4a26      	ldr	r2, [pc, #152]	@ (810681c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8106782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106786:	637b      	str	r3, [r7, #52]	@ 0x34
 8106788:	f000 bc76 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 810678c:	2300      	movs	r3, #0
 810678e:	637b      	str	r3, [r7, #52]	@ 0x34
 8106790:	f000 bc72 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8106794:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106798:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 810679c:	430b      	orrs	r3, r1
 810679e:	d152      	bne.n	8106846 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 81067a0:	4b1d      	ldr	r3, [pc, #116]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81067a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81067a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 81067aa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 81067ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81067ae:	2b00      	cmp	r3, #0
 81067b0:	d104      	bne.n	81067bc <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 81067b2:	f7fe f80d 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 81067b6:	6378      	str	r0, [r7, #52]	@ 0x34
 81067b8:	f000 bc5e 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 81067bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81067be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81067c2:	d104      	bne.n	81067ce <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 81067c4:	f7fd fee8 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 81067c8:	6378      	str	r0, [r7, #52]	@ 0x34
 81067ca:	f000 bc55 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 81067ce:	4b12      	ldr	r3, [pc, #72]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81067d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81067da:	d107      	bne.n	81067ec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 81067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81067de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81067e2:	d103      	bne.n	81067ec <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 81067e4:	4b0e      	ldr	r3, [pc, #56]	@ (8106820 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81067e6:	637b      	str	r3, [r7, #52]	@ 0x34
 81067e8:	f000 bc46 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 81067ec:	4b0a      	ldr	r3, [pc, #40]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 81067ee:	681b      	ldr	r3, [r3, #0]
 81067f0:	f003 0320 	and.w	r3, r3, #32
 81067f4:	2b20      	cmp	r3, #32
 81067f6:	d122      	bne.n	810683e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 81067f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81067fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81067fe:	d11e      	bne.n	810683e <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106800:	4b05      	ldr	r3, [pc, #20]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8106802:	689b      	ldr	r3, [r3, #8]
 8106804:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106808:	2b00      	cmp	r3, #0
 810680a:	d00b      	beq.n	8106824 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 810680c:	4b02      	ldr	r3, [pc, #8]	@ (8106818 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 810680e:	689b      	ldr	r3, [r3, #8]
 8106810:	0e1b      	lsrs	r3, r3, #24
 8106812:	f003 030f 	and.w	r3, r3, #15
 8106816:	e00c      	b.n	8106832 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8106818:	46020c00 	.word	0x46020c00
 810681c:	08109300 	.word	0x08109300
 8106820:	00f42400 	.word	0x00f42400
 8106824:	4ba1      	ldr	r3, [pc, #644]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106826:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810682a:	041b      	lsls	r3, r3, #16
 810682c:	0e1b      	lsrs	r3, r3, #24
 810682e:	f003 030f 	and.w	r3, r3, #15
 8106832:	4a9f      	ldr	r2, [pc, #636]	@ (8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8106834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106838:	637b      	str	r3, [r7, #52]	@ 0x34
 810683a:	f000 bc1d 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 810683e:	2300      	movs	r3, #0
 8106840:	637b      	str	r3, [r7, #52]	@ 0x34
 8106842:	f000 bc19 	b.w	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8106846:	e9d7 2300 	ldrd	r2, r3, [r7]
 810684a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810684e:	430b      	orrs	r3, r1
 8106850:	d151      	bne.n	81068f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8106852:	4b96      	ldr	r3, [pc, #600]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8106858:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 810685c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 810685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106860:	2bc0      	cmp	r3, #192	@ 0xc0
 8106862:	d024      	beq.n	81068ae <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8106864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106866:	2bc0      	cmp	r3, #192	@ 0xc0
 8106868:	d842      	bhi.n	81068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 810686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810686c:	2b80      	cmp	r3, #128	@ 0x80
 810686e:	d00d      	beq.n	810688c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8106870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106872:	2b80      	cmp	r3, #128	@ 0x80
 8106874:	d83c      	bhi.n	81068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8106876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106878:	2b00      	cmp	r3, #0
 810687a:	d003      	beq.n	8106884 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 810687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810687e:	2b40      	cmp	r3, #64	@ 0x40
 8106880:	d011      	beq.n	81068a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8106882:	e035      	b.n	81068f0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8106884:	f7fd ffcc 	bl	8104820 <HAL_RCC_GetPCLK3Freq>
 8106888:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 810688a:	e3f5      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810688c:	4b87      	ldr	r3, [pc, #540]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 810688e:	681b      	ldr	r3, [r3, #0]
 8106890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106898:	d102      	bne.n	81068a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 810689a:	4b86      	ldr	r3, [pc, #536]	@ (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 810689c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 810689e:	e3eb      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 81068a0:	2300      	movs	r3, #0
 81068a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81068a4:	e3e8      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 81068a6:	f7fd fe77 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 81068aa:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 81068ac:	e3e4      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 81068ae:	4b7f      	ldr	r3, [pc, #508]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81068b0:	681b      	ldr	r3, [r3, #0]
 81068b2:	f003 0320 	and.w	r3, r3, #32
 81068b6:	2b20      	cmp	r3, #32
 81068b8:	d117      	bne.n	81068ea <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 81068ba:	4b7c      	ldr	r3, [pc, #496]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81068bc:	689b      	ldr	r3, [r3, #8]
 81068be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81068c2:	2b00      	cmp	r3, #0
 81068c4:	d005      	beq.n	81068d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 81068c6:	4b79      	ldr	r3, [pc, #484]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81068c8:	689b      	ldr	r3, [r3, #8]
 81068ca:	0e1b      	lsrs	r3, r3, #24
 81068cc:	f003 030f 	and.w	r3, r3, #15
 81068d0:	e006      	b.n	81068e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 81068d2:	4b76      	ldr	r3, [pc, #472]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81068d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81068d8:	041b      	lsls	r3, r3, #16
 81068da:	0e1b      	lsrs	r3, r3, #24
 81068dc:	f003 030f 	and.w	r3, r3, #15
 81068e0:	4a73      	ldr	r2, [pc, #460]	@ (8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 81068e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81068e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 81068e8:	e3c6      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 81068ea:	2300      	movs	r3, #0
 81068ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81068ee:	e3c3      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 81068f0:	2300      	movs	r3, #0
 81068f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 81068f4:	e3c0      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 81068f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 81068fa:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 81068fe:	430b      	orrs	r3, r1
 8106900:	d147      	bne.n	8106992 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8106902:	4b6a      	ldr	r3, [pc, #424]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106908:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 810690c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 810690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106910:	2b00      	cmp	r3, #0
 8106912:	d103      	bne.n	810691c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8106914:	f7fd ff5c 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 8106918:	6378      	str	r0, [r7, #52]	@ 0x34
 810691a:	e3ad      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 810691c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810691e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106922:	d103      	bne.n	810692c <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8106924:	f7fd fe38 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106928:	6378      	str	r0, [r7, #52]	@ 0x34
 810692a:	e3a5      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 810692c:	4b5f      	ldr	r3, [pc, #380]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 810692e:	681b      	ldr	r3, [r3, #0]
 8106930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106938:	d106      	bne.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 810693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810693c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106940:	d102      	bne.n	8106948 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 8106942:	4b5c      	ldr	r3, [pc, #368]	@ (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8106944:	637b      	str	r3, [r7, #52]	@ 0x34
 8106946:	e397      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8106948:	4b58      	ldr	r3, [pc, #352]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 810694a:	681b      	ldr	r3, [r3, #0]
 810694c:	f003 0320 	and.w	r3, r3, #32
 8106950:	2b20      	cmp	r3, #32
 8106952:	d11b      	bne.n	810698c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8106954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106956:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 810695a:	d117      	bne.n	810698c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 810695c:	4b53      	ldr	r3, [pc, #332]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 810695e:	689b      	ldr	r3, [r3, #8]
 8106960:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106964:	2b00      	cmp	r3, #0
 8106966:	d005      	beq.n	8106974 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8106968:	4b50      	ldr	r3, [pc, #320]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 810696a:	689b      	ldr	r3, [r3, #8]
 810696c:	0e1b      	lsrs	r3, r3, #24
 810696e:	f003 030f 	and.w	r3, r3, #15
 8106972:	e006      	b.n	8106982 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8106974:	4b4d      	ldr	r3, [pc, #308]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810697a:	041b      	lsls	r3, r3, #16
 810697c:	0e1b      	lsrs	r3, r3, #24
 810697e:	f003 030f 	and.w	r3, r3, #15
 8106982:	4a4b      	ldr	r2, [pc, #300]	@ (8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8106984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106988:	637b      	str	r3, [r7, #52]	@ 0x34
 810698a:	e375      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 810698c:	2300      	movs	r3, #0
 810698e:	637b      	str	r3, [r7, #52]	@ 0x34
 8106990:	e372      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8106992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106996:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810699a:	430b      	orrs	r3, r1
 810699c:	d164      	bne.n	8106a68 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 810699e:	4b43      	ldr	r3, [pc, #268]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81069a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81069a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81069a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 81069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81069ac:	2b00      	cmp	r3, #0
 81069ae:	d120      	bne.n	81069f2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 81069b0:	4b3e      	ldr	r3, [pc, #248]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81069b2:	681b      	ldr	r3, [r3, #0]
 81069b4:	f003 0320 	and.w	r3, r3, #32
 81069b8:	2b20      	cmp	r3, #32
 81069ba:	d117      	bne.n	81069ec <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 81069bc:	4b3b      	ldr	r3, [pc, #236]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81069be:	689b      	ldr	r3, [r3, #8]
 81069c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 81069c4:	2b00      	cmp	r3, #0
 81069c6:	d005      	beq.n	81069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 81069c8:	4b38      	ldr	r3, [pc, #224]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81069ca:	689b      	ldr	r3, [r3, #8]
 81069cc:	0e1b      	lsrs	r3, r3, #24
 81069ce:	f003 030f 	and.w	r3, r3, #15
 81069d2:	e006      	b.n	81069e2 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 81069d4:	4b35      	ldr	r3, [pc, #212]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81069d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81069da:	041b      	lsls	r3, r3, #16
 81069dc:	0e1b      	lsrs	r3, r3, #24
 81069de:	f003 030f 	and.w	r3, r3, #15
 81069e2:	4a33      	ldr	r2, [pc, #204]	@ (8106ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 81069e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81069e8:	637b      	str	r3, [r7, #52]	@ 0x34
 81069ea:	e345      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 81069ec:	2300      	movs	r3, #0
 81069ee:	637b      	str	r3, [r7, #52]	@ 0x34
 81069f0:	e342      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 81069f2:	4b2e      	ldr	r3, [pc, #184]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 81069f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81069f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81069fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106a00:	d112      	bne.n	8106a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8106a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106a08:	d10e      	bne.n	8106a28 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106a0a:	4b28      	ldr	r3, [pc, #160]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8106a14:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106a18:	d102      	bne.n	8106a20 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8106a1a:	23fa      	movs	r3, #250	@ 0xfa
 8106a1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106a1e:	e32b      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8106a20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8106a24:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106a26:	e327      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8106a28:	4b20      	ldr	r3, [pc, #128]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106a2a:	681b      	ldr	r3, [r3, #0]
 8106a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106a34:	d106      	bne.n	8106a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8106a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106a3c:	d102      	bne.n	8106a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8106a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8106ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8106a40:	637b      	str	r3, [r7, #52]	@ 0x34
 8106a42:	e319      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8106a44:	4b19      	ldr	r3, [pc, #100]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106a46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106a4a:	f003 0302 	and.w	r3, r3, #2
 8106a4e:	2b02      	cmp	r3, #2
 8106a50:	d107      	bne.n	8106a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8106a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106a58:	d103      	bne.n	8106a62 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8106a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8106a60:	e30a      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8106a62:	2300      	movs	r3, #0
 8106a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8106a66:	e307      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8106a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106a6c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8106a70:	430b      	orrs	r3, r1
 8106a72:	d16b      	bne.n	8106b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8106a74:	4b0d      	ldr	r3, [pc, #52]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106a76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8106a7a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8106a7e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8106a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106a82:	2b00      	cmp	r3, #0
 8106a84:	d127      	bne.n	8106ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8106a86:	4b09      	ldr	r3, [pc, #36]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106a88:	681b      	ldr	r3, [r3, #0]
 8106a8a:	f003 0320 	and.w	r3, r3, #32
 8106a8e:	2b20      	cmp	r3, #32
 8106a90:	d11e      	bne.n	8106ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106a92:	4b06      	ldr	r3, [pc, #24]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106a94:	689b      	ldr	r3, [r3, #8]
 8106a96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106a9a:	2b00      	cmp	r3, #0
 8106a9c:	d00c      	beq.n	8106ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 8106a9e:	4b03      	ldr	r3, [pc, #12]	@ (8106aac <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8106aa0:	689b      	ldr	r3, [r3, #8]
 8106aa2:	0e1b      	lsrs	r3, r3, #24
 8106aa4:	f003 030f 	and.w	r3, r3, #15
 8106aa8:	e00d      	b.n	8106ac6 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8106aaa:	bf00      	nop
 8106aac:	46020c00 	.word	0x46020c00
 8106ab0:	08109300 	.word	0x08109300
 8106ab4:	00f42400 	.word	0x00f42400
 8106ab8:	4b94      	ldr	r3, [pc, #592]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106aba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106abe:	041b      	lsls	r3, r3, #16
 8106ac0:	0e1b      	lsrs	r3, r3, #24
 8106ac2:	f003 030f 	and.w	r3, r3, #15
 8106ac6:	4a92      	ldr	r2, [pc, #584]	@ (8106d10 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8106ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106acc:	637b      	str	r3, [r7, #52]	@ 0x34
 8106ace:	e2d3      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8106ad0:	2300      	movs	r3, #0
 8106ad2:	637b      	str	r3, [r7, #52]	@ 0x34
 8106ad4:	e2d0      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8106ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106ad8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106adc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106ae0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106ae4:	d112      	bne.n	8106b0c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8106ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ae8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106aec:	d10e      	bne.n	8106b0c <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106aee:	4b87      	ldr	r3, [pc, #540]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8106af8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106afc:	d102      	bne.n	8106b04 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 8106afe:	23fa      	movs	r3, #250	@ 0xfa
 8106b00:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106b02:	e2b9      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8106b04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8106b08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106b0a:	e2b5      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8106b0c:	4b7f      	ldr	r3, [pc, #508]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106b18:	d106      	bne.n	8106b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8106b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106b20:	d102      	bne.n	8106b28 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 8106b22:	4b7c      	ldr	r3, [pc, #496]	@ (8106d14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8106b24:	637b      	str	r3, [r7, #52]	@ 0x34
 8106b26:	e2a7      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8106b28:	4b78      	ldr	r3, [pc, #480]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106b2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106b2e:	f003 0302 	and.w	r3, r3, #2
 8106b32:	2b02      	cmp	r3, #2
 8106b34:	d107      	bne.n	8106b46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8106b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106b3c:	d103      	bne.n	8106b46 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 8106b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8106b44:	e298      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8106b46:	2300      	movs	r3, #0
 8106b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8106b4a:	e295      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8106b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106b50:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8106b54:	430b      	orrs	r3, r1
 8106b56:	d147      	bne.n	8106be8 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8106b58:	4b6c      	ldr	r3, [pc, #432]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106b5e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8106b62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8106b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b66:	2b00      	cmp	r3, #0
 8106b68:	d103      	bne.n	8106b72 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8106b6a:	f7fd fe31 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 8106b6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8106b70:	e282      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8106b72:	4b66      	ldr	r3, [pc, #408]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106b78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106b7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106b80:	d112      	bne.n	8106ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8106b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106b84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8106b88:	d10e      	bne.n	8106ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106b8a:	4b60      	ldr	r3, [pc, #384]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106b90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8106b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106b98:	d102      	bne.n	8106ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8106b9a:	23fa      	movs	r3, #250	@ 0xfa
 8106b9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106b9e:	e26b      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8106ba0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8106ba4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106ba6:	e267      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8106ba8:	4b58      	ldr	r3, [pc, #352]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106baa:	681b      	ldr	r3, [r3, #0]
 8106bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106bb4:	d106      	bne.n	8106bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8106bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bb8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8106bbc:	d102      	bne.n	8106bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 8106bbe:	4b55      	ldr	r3, [pc, #340]	@ (8106d14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8106bc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8106bc2:	e259      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8106bc4:	4b51      	ldr	r3, [pc, #324]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106bca:	f003 0302 	and.w	r3, r3, #2
 8106bce:	2b02      	cmp	r3, #2
 8106bd0:	d107      	bne.n	8106be2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8106bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106bd4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8106bd8:	d103      	bne.n	8106be2 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 8106bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8106be0:	e24a      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8106be2:	2300      	movs	r3, #0
 8106be4:	637b      	str	r3, [r7, #52]	@ 0x34
 8106be6:	e247      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8106be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106bec:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8106bf0:	430b      	orrs	r3, r1
 8106bf2:	d12d      	bne.n	8106c50 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8106bf4:	4b45      	ldr	r3, [pc, #276]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106bfa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8106bfe:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8106c00:	4b42      	ldr	r3, [pc, #264]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106c02:	681b      	ldr	r3, [r3, #0]
 8106c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106c08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c0c:	d105      	bne.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 8106c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c10:	2b00      	cmp	r3, #0
 8106c12:	d102      	bne.n	8106c1a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8106c14:	4b3f      	ldr	r3, [pc, #252]	@ (8106d14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8106c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c18:	e22e      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8106c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106c20:	d107      	bne.n	8106c32 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106c26:	4618      	mov	r0, r3
 8106c28:	f7fe fc70 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8106c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c30:	e222      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8106c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106c38:	d107      	bne.n	8106c4a <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106c3a:	f107 0318 	add.w	r3, r7, #24
 8106c3e:	4618      	mov	r0, r3
 8106c40:	f7fe fdbe 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8106c44:	69bb      	ldr	r3, [r7, #24]
 8106c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c48:	e216      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8106c4a:	2300      	movs	r3, #0
 8106c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c4e:	e213      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8106c50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106c54:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8106c58:	430b      	orrs	r3, r1
 8106c5a:	d15d      	bne.n	8106d18 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8106c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106c62:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8106c66:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8106c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c6a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106c6e:	d028      	beq.n	8106cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8106c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106c76:	d845      	bhi.n	8106d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8106c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106c7e:	d013      	beq.n	8106ca8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8106c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106c86:	d83d      	bhi.n	8106d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8106c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c8a:	2b00      	cmp	r3, #0
 8106c8c:	d004      	beq.n	8106c98 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8106c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106c90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106c94:	d004      	beq.n	8106ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8106c96:	e035      	b.n	8106d04 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8106c98:	f7fd fdae 	bl	81047f8 <HAL_RCC_GetPCLK2Freq>
 8106c9c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106c9e:	e1eb      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8106ca0:	f7fd fc7a 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106ca4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106ca6:	e1e7      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106ca8:	4b18      	ldr	r3, [pc, #96]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106caa:	681b      	ldr	r3, [r3, #0]
 8106cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106cb4:	d102      	bne.n	8106cbc <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8106cb6:	4b17      	ldr	r3, [pc, #92]	@ (8106d14 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8106cb8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106cba:	e1dd      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106cbc:	2300      	movs	r3, #0
 8106cbe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106cc0:	e1da      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8106cc2:	4b12      	ldr	r3, [pc, #72]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106cc4:	681b      	ldr	r3, [r3, #0]
 8106cc6:	f003 0320 	and.w	r3, r3, #32
 8106cca:	2b20      	cmp	r3, #32
 8106ccc:	d117      	bne.n	8106cfe <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106cce:	4b0f      	ldr	r3, [pc, #60]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106cd0:	689b      	ldr	r3, [r3, #8]
 8106cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106cd6:	2b00      	cmp	r3, #0
 8106cd8:	d005      	beq.n	8106ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8106cda:	4b0c      	ldr	r3, [pc, #48]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106cdc:	689b      	ldr	r3, [r3, #8]
 8106cde:	0e1b      	lsrs	r3, r3, #24
 8106ce0:	f003 030f 	and.w	r3, r3, #15
 8106ce4:	e006      	b.n	8106cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8106ce6:	4b09      	ldr	r3, [pc, #36]	@ (8106d0c <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8106ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106cec:	041b      	lsls	r3, r3, #16
 8106cee:	0e1b      	lsrs	r3, r3, #24
 8106cf0:	f003 030f 	and.w	r3, r3, #15
 8106cf4:	4a06      	ldr	r2, [pc, #24]	@ (8106d10 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8106cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106cfa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106cfc:	e1bc      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106cfe:	2300      	movs	r3, #0
 8106d00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106d02:	e1b9      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8106d04:	2300      	movs	r3, #0
 8106d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106d08:	e1b6      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8106d0a:	bf00      	nop
 8106d0c:	46020c00 	.word	0x46020c00
 8106d10:	08109300 	.word	0x08109300
 8106d14:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8106d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106d1c:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8106d20:	430b      	orrs	r3, r1
 8106d22:	d156      	bne.n	8106dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8106d24:	4ba5      	ldr	r3, [pc, #660]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8106d2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8106d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8106d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106d36:	d028      	beq.n	8106d8a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8106d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8106d3e:	d845      	bhi.n	8106dcc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8106d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106d46:	d013      	beq.n	8106d70 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8106d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106d4e:	d83d      	bhi.n	8106dcc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 8106d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d52:	2b00      	cmp	r3, #0
 8106d54:	d004      	beq.n	8106d60 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8106d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106d5c:	d004      	beq.n	8106d68 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 8106d5e:	e035      	b.n	8106dcc <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8106d60:	f7fd fd36 	bl	81047d0 <HAL_RCC_GetPCLK1Freq>
 8106d64:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106d66:	e187      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8106d68:	f7fd fc16 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106d6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106d6e:	e183      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106d70:	4b92      	ldr	r3, [pc, #584]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106d72:	681b      	ldr	r3, [r3, #0]
 8106d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106d7c:	d102      	bne.n	8106d84 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 8106d7e:	4b90      	ldr	r3, [pc, #576]	@ (8106fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8106d80:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106d82:	e179      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106d84:	2300      	movs	r3, #0
 8106d86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106d88:	e176      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8106d8a:	4b8c      	ldr	r3, [pc, #560]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106d8c:	681b      	ldr	r3, [r3, #0]
 8106d8e:	f003 0320 	and.w	r3, r3, #32
 8106d92:	2b20      	cmp	r3, #32
 8106d94:	d117      	bne.n	8106dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106d96:	4b89      	ldr	r3, [pc, #548]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106d98:	689b      	ldr	r3, [r3, #8]
 8106d9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106d9e:	2b00      	cmp	r3, #0
 8106da0:	d005      	beq.n	8106dae <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8106da2:	4b86      	ldr	r3, [pc, #536]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106da4:	689b      	ldr	r3, [r3, #8]
 8106da6:	0e1b      	lsrs	r3, r3, #24
 8106da8:	f003 030f 	and.w	r3, r3, #15
 8106dac:	e006      	b.n	8106dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 8106dae:	4b83      	ldr	r3, [pc, #524]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106db4:	041b      	lsls	r3, r3, #16
 8106db6:	0e1b      	lsrs	r3, r3, #24
 8106db8:	f003 030f 	and.w	r3, r3, #15
 8106dbc:	4a81      	ldr	r2, [pc, #516]	@ (8106fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8106dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106dc2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106dc4:	e158      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106dc6:	2300      	movs	r3, #0
 8106dc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106dca:	e155      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8106dcc:	2300      	movs	r3, #0
 8106dce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106dd0:	e152      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8106dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106dd6:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8106dda:	430b      	orrs	r3, r1
 8106ddc:	d177      	bne.n	8106ece <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8106dde:	4b77      	ldr	r3, [pc, #476]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8106de4:	f003 0318 	and.w	r3, r3, #24
 8106de8:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8106dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106dec:	2b18      	cmp	r3, #24
 8106dee:	d86b      	bhi.n	8106ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8106df0:	a201      	add	r2, pc, #4	@ (adr r2, 8106df8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8106df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106df6:	bf00      	nop
 8106df8:	08106e5d 	.word	0x08106e5d
 8106dfc:	08106ec9 	.word	0x08106ec9
 8106e00:	08106ec9 	.word	0x08106ec9
 8106e04:	08106ec9 	.word	0x08106ec9
 8106e08:	08106ec9 	.word	0x08106ec9
 8106e0c:	08106ec9 	.word	0x08106ec9
 8106e10:	08106ec9 	.word	0x08106ec9
 8106e14:	08106ec9 	.word	0x08106ec9
 8106e18:	08106e65 	.word	0x08106e65
 8106e1c:	08106ec9 	.word	0x08106ec9
 8106e20:	08106ec9 	.word	0x08106ec9
 8106e24:	08106ec9 	.word	0x08106ec9
 8106e28:	08106ec9 	.word	0x08106ec9
 8106e2c:	08106ec9 	.word	0x08106ec9
 8106e30:	08106ec9 	.word	0x08106ec9
 8106e34:	08106ec9 	.word	0x08106ec9
 8106e38:	08106e6d 	.word	0x08106e6d
 8106e3c:	08106ec9 	.word	0x08106ec9
 8106e40:	08106ec9 	.word	0x08106ec9
 8106e44:	08106ec9 	.word	0x08106ec9
 8106e48:	08106ec9 	.word	0x08106ec9
 8106e4c:	08106ec9 	.word	0x08106ec9
 8106e50:	08106ec9 	.word	0x08106ec9
 8106e54:	08106ec9 	.word	0x08106ec9
 8106e58:	08106e87 	.word	0x08106e87
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8106e5c:	f7fd fce0 	bl	8104820 <HAL_RCC_GetPCLK3Freq>
 8106e60:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106e62:	e109      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8106e64:	f7fd fb98 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106e68:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106e6a:	e105      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8106e6c:	4b53      	ldr	r3, [pc, #332]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106e6e:	681b      	ldr	r3, [r3, #0]
 8106e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8106e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106e78:	d102      	bne.n	8106e80 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8106e7a:	4b51      	ldr	r3, [pc, #324]	@ (8106fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8106e7c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106e7e:	e0fb      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106e80:	2300      	movs	r3, #0
 8106e82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106e84:	e0f8      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8106e86:	4b4d      	ldr	r3, [pc, #308]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106e88:	681b      	ldr	r3, [r3, #0]
 8106e8a:	f003 0320 	and.w	r3, r3, #32
 8106e8e:	2b20      	cmp	r3, #32
 8106e90:	d117      	bne.n	8106ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106e92:	4b4a      	ldr	r3, [pc, #296]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106e94:	689b      	ldr	r3, [r3, #8]
 8106e96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106e9a:	2b00      	cmp	r3, #0
 8106e9c:	d005      	beq.n	8106eaa <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 8106e9e:	4b47      	ldr	r3, [pc, #284]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106ea0:	689b      	ldr	r3, [r3, #8]
 8106ea2:	0e1b      	lsrs	r3, r3, #24
 8106ea4:	f003 030f 	and.w	r3, r3, #15
 8106ea8:	e006      	b.n	8106eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8106eaa:	4b44      	ldr	r3, [pc, #272]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106eb0:	041b      	lsls	r3, r3, #16
 8106eb2:	0e1b      	lsrs	r3, r3, #24
 8106eb4:	f003 030f 	and.w	r3, r3, #15
 8106eb8:	4a42      	ldr	r2, [pc, #264]	@ (8106fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8106eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106ebe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106ec0:	e0da      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106ec2:	2300      	movs	r3, #0
 8106ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106ec6:	e0d7      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8106ec8:	2300      	movs	r3, #0
 8106eca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106ecc:	e0d4      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8106ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106ed2:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8106ed6:	430b      	orrs	r3, r1
 8106ed8:	d155      	bne.n	8106f86 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8106eda:	4b38      	ldr	r3, [pc, #224]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106edc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8106ee0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8106ee4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8106ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ee8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106eec:	d013      	beq.n	8106f16 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 8106eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ef0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106ef4:	d844      	bhi.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8106ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106ef8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106efc:	d013      	beq.n	8106f26 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8106efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f00:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106f04:	d83c      	bhi.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8106f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f08:	2b00      	cmp	r3, #0
 8106f0a:	d014      	beq.n	8106f36 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8106f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106f0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106f12:	d014      	beq.n	8106f3e <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8106f14:	e034      	b.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f16:	f107 0318 	add.w	r3, r7, #24
 8106f1a:	4618      	mov	r0, r3
 8106f1c:	f7fe fc50 	bl	81057c0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8106f20:	69fb      	ldr	r3, [r7, #28]
 8106f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106f24:	e0a8      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106f26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106f2a:	4618      	mov	r0, r3
 8106f2c:	f7fe faee 	bl	810550c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8106f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106f32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106f34:	e0a0      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8106f36:	f7fd fb2f 	bl	8104598 <HAL_RCC_GetSysClockFreq>
 8106f3a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8106f3c:	e09c      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8106f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106f40:	681b      	ldr	r3, [r3, #0]
 8106f42:	f003 0320 	and.w	r3, r3, #32
 8106f46:	2b20      	cmp	r3, #32
 8106f48:	d117      	bne.n	8106f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8106f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106f4c:	689b      	ldr	r3, [r3, #8]
 8106f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8106f52:	2b00      	cmp	r3, #0
 8106f54:	d005      	beq.n	8106f62 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8106f56:	4b19      	ldr	r3, [pc, #100]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106f58:	689b      	ldr	r3, [r3, #8]
 8106f5a:	0e1b      	lsrs	r3, r3, #24
 8106f5c:	f003 030f 	and.w	r3, r3, #15
 8106f60:	e006      	b.n	8106f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8106f62:	4b16      	ldr	r3, [pc, #88]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8106f68:	041b      	lsls	r3, r3, #16
 8106f6a:	0e1b      	lsrs	r3, r3, #24
 8106f6c:	f003 030f 	and.w	r3, r3, #15
 8106f70:	4a14      	ldr	r2, [pc, #80]	@ (8106fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8106f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8106f76:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8106f78:	e07e      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8106f7a:	2300      	movs	r3, #0
 8106f7c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106f7e:	e07b      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8106f80:	2300      	movs	r3, #0
 8106f82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8106f84:	e078      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8106f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106f8a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8106f8e:	430b      	orrs	r3, r1
 8106f90:	d138      	bne.n	8107004 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8106f92:	4b0a      	ldr	r3, [pc, #40]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8106f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8106f9c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8106f9e:	4b07      	ldr	r3, [pc, #28]	@ (8106fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8106fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106fa4:	f003 0302 	and.w	r3, r3, #2
 8106fa8:	2b02      	cmp	r3, #2
 8106faa:	d10d      	bne.n	8106fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8106fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fae:	2b00      	cmp	r3, #0
 8106fb0:	d10a      	bne.n	8106fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8106fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8106fb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8106fb8:	e05e      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8106fba:	bf00      	nop
 8106fbc:	46020c00 	.word	0x46020c00
 8106fc0:	00f42400 	.word	0x00f42400
 8106fc4:	08109300 	.word	0x08109300
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8106fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8107084 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8106fca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106fd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106fd6:	d112      	bne.n	8106ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8106fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106fde:	d10e      	bne.n	8106ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106fe0:	4b28      	ldr	r3, [pc, #160]	@ (8107084 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8106fe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8106fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8106fea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106fee:	d102      	bne.n	8106ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8106ff0:	23fa      	movs	r3, #250	@ 0xfa
 8106ff2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106ff4:	e040      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8106ff6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8106ffa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8106ffc:	e03c      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8106ffe:	2300      	movs	r3, #0
 8107000:	637b      	str	r3, [r7, #52]	@ 0x34
 8107002:	e039      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8107004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107008:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810700c:	430b      	orrs	r3, r1
 810700e:	d131      	bne.n	8107074 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8107010:	4b1c      	ldr	r3, [pc, #112]	@ (8107084 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8107012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8107016:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 810701a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 810701c:	4b19      	ldr	r3, [pc, #100]	@ (8107084 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8107024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107028:	d105      	bne.n	8107036 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 810702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810702c:	2b00      	cmp	r3, #0
 810702e:	d102      	bne.n	8107036 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8107030:	4b15      	ldr	r3, [pc, #84]	@ (8107088 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8107032:	637b      	str	r3, [r7, #52]	@ 0x34
 8107034:	e020      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8107036:	4b13      	ldr	r3, [pc, #76]	@ (8107084 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8107038:	681b      	ldr	r3, [r3, #0]
 810703a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810703e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107042:	d106      	bne.n	8107052 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8107044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810704a:	d102      	bne.n	8107052 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 810704c:	4b0f      	ldr	r3, [pc, #60]	@ (810708c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 810704e:	637b      	str	r3, [r7, #52]	@ 0x34
 8107050:	e012      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8107052:	4b0c      	ldr	r3, [pc, #48]	@ (8107084 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8107054:	681b      	ldr	r3, [r3, #0]
 8107056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810705a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810705e:	d106      	bne.n	810706e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8107060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107066:	d102      	bne.n	810706e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8107068:	4b09      	ldr	r3, [pc, #36]	@ (8107090 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 810706a:	637b      	str	r3, [r7, #52]	@ 0x34
 810706c:	e004      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 810706e:	2300      	movs	r3, #0
 8107070:	637b      	str	r3, [r7, #52]	@ 0x34
 8107072:	e001      	b.n	8107078 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8107074:	2300      	movs	r3, #0
 8107076:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8107078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 810707a:	4618      	mov	r0, r3
 810707c:	3738      	adds	r7, #56	@ 0x38
 810707e:	46bd      	mov	sp, r7
 8107080:	bd80      	pop	{r7, pc}
 8107082:	bf00      	nop
 8107084:	46020c00 	.word	0x46020c00
 8107088:	02dc6c00 	.word	0x02dc6c00
 810708c:	016e3600 	.word	0x016e3600
 8107090:	00f42400 	.word	0x00f42400

08107094 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8107094:	b580      	push	{r7, lr}
 8107096:	b084      	sub	sp, #16
 8107098:	af00      	add	r7, sp, #0
 810709a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 810709c:	4b47      	ldr	r3, [pc, #284]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 810709e:	681b      	ldr	r3, [r3, #0]
 81070a0:	4a46      	ldr	r2, [pc, #280]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 81070a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81070a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 81070a8:	f7fa fc0c 	bl	81018c4 <HAL_GetTick>
 81070ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81070ae:	e008      	b.n	81070c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81070b0:	f7fa fc08 	bl	81018c4 <HAL_GetTick>
 81070b4:	4602      	mov	r2, r0
 81070b6:	68fb      	ldr	r3, [r7, #12]
 81070b8:	1ad3      	subs	r3, r2, r3
 81070ba:	2b02      	cmp	r3, #2
 81070bc:	d901      	bls.n	81070c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 81070be:	2303      	movs	r3, #3
 81070c0:	e077      	b.n	81071b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81070c2:	4b3e      	ldr	r3, [pc, #248]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 81070c4:	681b      	ldr	r3, [r3, #0]
 81070c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81070ca:	2b00      	cmp	r3, #0
 81070cc:	d1f0      	bne.n	81070b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 81070ce:	4b3b      	ldr	r3, [pc, #236]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 81070d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81070d2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81070d6:	f023 0303 	bic.w	r3, r3, #3
 81070da:	687a      	ldr	r2, [r7, #4]
 81070dc:	6811      	ldr	r1, [r2, #0]
 81070de:	687a      	ldr	r2, [r7, #4]
 81070e0:	6852      	ldr	r2, [r2, #4]
 81070e2:	3a01      	subs	r2, #1
 81070e4:	0212      	lsls	r2, r2, #8
 81070e6:	430a      	orrs	r2, r1
 81070e8:	4934      	ldr	r1, [pc, #208]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 81070ea:	4313      	orrs	r3, r2
 81070ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
 81070ee:	4b33      	ldr	r3, [pc, #204]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 81070f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81070f2:	4b33      	ldr	r3, [pc, #204]	@ (81071c0 <RCCEx_PLL2_Config+0x12c>)
 81070f4:	4013      	ands	r3, r2
 81070f6:	687a      	ldr	r2, [r7, #4]
 81070f8:	6892      	ldr	r2, [r2, #8]
 81070fa:	3a01      	subs	r2, #1
 81070fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8107100:	687a      	ldr	r2, [r7, #4]
 8107102:	68d2      	ldr	r2, [r2, #12]
 8107104:	3a01      	subs	r2, #1
 8107106:	0252      	lsls	r2, r2, #9
 8107108:	b292      	uxth	r2, r2
 810710a:	4311      	orrs	r1, r2
 810710c:	687a      	ldr	r2, [r7, #4]
 810710e:	6912      	ldr	r2, [r2, #16]
 8107110:	3a01      	subs	r2, #1
 8107112:	0412      	lsls	r2, r2, #16
 8107114:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8107118:	4311      	orrs	r1, r2
 810711a:	687a      	ldr	r2, [r7, #4]
 810711c:	6952      	ldr	r2, [r2, #20]
 810711e:	3a01      	subs	r2, #1
 8107120:	0612      	lsls	r2, r2, #24
 8107122:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8107126:	430a      	orrs	r2, r1
 8107128:	4924      	ldr	r1, [pc, #144]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 810712a:	4313      	orrs	r3, r2
 810712c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 810712e:	4b23      	ldr	r3, [pc, #140]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107132:	f023 020c 	bic.w	r2, r3, #12
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	699b      	ldr	r3, [r3, #24]
 810713a:	4920      	ldr	r1, [pc, #128]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 810713c:	4313      	orrs	r3, r2
 810713e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8107140:	4b1e      	ldr	r3, [pc, #120]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107144:	687b      	ldr	r3, [r7, #4]
 8107146:	6a1b      	ldr	r3, [r3, #32]
 8107148:	491c      	ldr	r1, [pc, #112]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 810714a:	4313      	orrs	r3, r2
 810714c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 810714e:	4b1b      	ldr	r3, [pc, #108]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107152:	4a1a      	ldr	r2, [pc, #104]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107154:	f023 0310 	bic.w	r3, r3, #16
 8107158:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810715a:	4b18      	ldr	r3, [pc, #96]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 810715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810715e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107162:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107166:	687a      	ldr	r2, [r7, #4]
 8107168:	69d2      	ldr	r2, [r2, #28]
 810716a:	00d2      	lsls	r2, r2, #3
 810716c:	4913      	ldr	r1, [pc, #76]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 810716e:	4313      	orrs	r3, r2
 8107170:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8107172:	4b12      	ldr	r3, [pc, #72]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107176:	4a11      	ldr	r2, [pc, #68]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107178:	f043 0310 	orr.w	r3, r3, #16
 810717c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 810717e:	4b0f      	ldr	r3, [pc, #60]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107180:	681b      	ldr	r3, [r3, #0]
 8107182:	4a0e      	ldr	r2, [pc, #56]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 8107184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8107188:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 810718a:	f7fa fb9b 	bl	81018c4 <HAL_GetTick>
 810718e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8107190:	e008      	b.n	81071a4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8107192:	f7fa fb97 	bl	81018c4 <HAL_GetTick>
 8107196:	4602      	mov	r2, r0
 8107198:	68fb      	ldr	r3, [r7, #12]
 810719a:	1ad3      	subs	r3, r2, r3
 810719c:	2b02      	cmp	r3, #2
 810719e:	d901      	bls.n	81071a4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 81071a0:	2303      	movs	r3, #3
 81071a2:	e006      	b.n	81071b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81071a4:	4b05      	ldr	r3, [pc, #20]	@ (81071bc <RCCEx_PLL2_Config+0x128>)
 81071a6:	681b      	ldr	r3, [r3, #0]
 81071a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81071ac:	2b00      	cmp	r3, #0
 81071ae:	d0f0      	beq.n	8107192 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 81071b0:	2300      	movs	r3, #0

}
 81071b2:	4618      	mov	r0, r3
 81071b4:	3710      	adds	r7, #16
 81071b6:	46bd      	mov	sp, r7
 81071b8:	bd80      	pop	{r7, pc}
 81071ba:	bf00      	nop
 81071bc:	46020c00 	.word	0x46020c00
 81071c0:	80800000 	.word	0x80800000

081071c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 81071c4:	b580      	push	{r7, lr}
 81071c6:	b084      	sub	sp, #16
 81071c8:	af00      	add	r7, sp, #0
 81071ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 81071cc:	4b47      	ldr	r3, [pc, #284]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81071ce:	681b      	ldr	r3, [r3, #0]
 81071d0:	4a46      	ldr	r2, [pc, #280]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81071d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81071d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 81071d8:	f7fa fb74 	bl	81018c4 <HAL_GetTick>
 81071dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81071de:	e008      	b.n	81071f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81071e0:	f7fa fb70 	bl	81018c4 <HAL_GetTick>
 81071e4:	4602      	mov	r2, r0
 81071e6:	68fb      	ldr	r3, [r7, #12]
 81071e8:	1ad3      	subs	r3, r2, r3
 81071ea:	2b02      	cmp	r3, #2
 81071ec:	d901      	bls.n	81071f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 81071ee:	2303      	movs	r3, #3
 81071f0:	e077      	b.n	81072e2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81071f2:	4b3e      	ldr	r3, [pc, #248]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81071f4:	681b      	ldr	r3, [r3, #0]
 81071f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81071fa:	2b00      	cmp	r3, #0
 81071fc:	d1f0      	bne.n	81071e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 81071fe:	4b3b      	ldr	r3, [pc, #236]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 8107200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107202:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8107206:	f023 0303 	bic.w	r3, r3, #3
 810720a:	687a      	ldr	r2, [r7, #4]
 810720c:	6811      	ldr	r1, [r2, #0]
 810720e:	687a      	ldr	r2, [r7, #4]
 8107210:	6852      	ldr	r2, [r2, #4]
 8107212:	3a01      	subs	r2, #1
 8107214:	0212      	lsls	r2, r2, #8
 8107216:	430a      	orrs	r2, r1
 8107218:	4934      	ldr	r1, [pc, #208]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 810721a:	4313      	orrs	r3, r2
 810721c:	630b      	str	r3, [r1, #48]	@ 0x30
 810721e:	4b33      	ldr	r3, [pc, #204]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 8107220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8107222:	4b33      	ldr	r3, [pc, #204]	@ (81072f0 <RCCEx_PLL3_Config+0x12c>)
 8107224:	4013      	ands	r3, r2
 8107226:	687a      	ldr	r2, [r7, #4]
 8107228:	6892      	ldr	r2, [r2, #8]
 810722a:	3a01      	subs	r2, #1
 810722c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8107230:	687a      	ldr	r2, [r7, #4]
 8107232:	68d2      	ldr	r2, [r2, #12]
 8107234:	3a01      	subs	r2, #1
 8107236:	0252      	lsls	r2, r2, #9
 8107238:	b292      	uxth	r2, r2
 810723a:	4311      	orrs	r1, r2
 810723c:	687a      	ldr	r2, [r7, #4]
 810723e:	6912      	ldr	r2, [r2, #16]
 8107240:	3a01      	subs	r2, #1
 8107242:	0412      	lsls	r2, r2, #16
 8107244:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8107248:	4311      	orrs	r1, r2
 810724a:	687a      	ldr	r2, [r7, #4]
 810724c:	6952      	ldr	r2, [r2, #20]
 810724e:	3a01      	subs	r2, #1
 8107250:	0612      	lsls	r2, r2, #24
 8107252:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8107256:	430a      	orrs	r2, r1
 8107258:	4924      	ldr	r1, [pc, #144]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 810725a:	4313      	orrs	r3, r2
 810725c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 810725e:	4b23      	ldr	r3, [pc, #140]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 8107260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107262:	f023 020c 	bic.w	r2, r3, #12
 8107266:	687b      	ldr	r3, [r7, #4]
 8107268:	699b      	ldr	r3, [r3, #24]
 810726a:	4920      	ldr	r1, [pc, #128]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 810726c:	4313      	orrs	r3, r2
 810726e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8107270:	4b1e      	ldr	r3, [pc, #120]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 8107272:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8107274:	687b      	ldr	r3, [r7, #4]
 8107276:	6a1b      	ldr	r3, [r3, #32]
 8107278:	491c      	ldr	r1, [pc, #112]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 810727a:	4313      	orrs	r3, r2
 810727c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 810727e:	4b1b      	ldr	r3, [pc, #108]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 8107280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107282:	4a1a      	ldr	r2, [pc, #104]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 8107284:	f023 0310 	bic.w	r3, r3, #16
 8107288:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810728a:	4b18      	ldr	r3, [pc, #96]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 810728c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810728e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107292:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107296:	687a      	ldr	r2, [r7, #4]
 8107298:	69d2      	ldr	r2, [r2, #28]
 810729a:	00d2      	lsls	r2, r2, #3
 810729c:	4913      	ldr	r1, [pc, #76]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 810729e:	4313      	orrs	r3, r2
 81072a0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 81072a2:	4b12      	ldr	r3, [pc, #72]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81072a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81072a6:	4a11      	ldr	r2, [pc, #68]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81072a8:	f043 0310 	orr.w	r3, r3, #16
 81072ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 81072ae:	4b0f      	ldr	r3, [pc, #60]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81072b0:	681b      	ldr	r3, [r3, #0]
 81072b2:	4a0e      	ldr	r2, [pc, #56]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81072b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81072b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 81072ba:	f7fa fb03 	bl	81018c4 <HAL_GetTick>
 81072be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81072c0:	e008      	b.n	81072d4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 81072c2:	f7fa faff 	bl	81018c4 <HAL_GetTick>
 81072c6:	4602      	mov	r2, r0
 81072c8:	68fb      	ldr	r3, [r7, #12]
 81072ca:	1ad3      	subs	r3, r2, r3
 81072cc:	2b02      	cmp	r3, #2
 81072ce:	d901      	bls.n	81072d4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 81072d0:	2303      	movs	r3, #3
 81072d2:	e006      	b.n	81072e2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81072d4:	4b05      	ldr	r3, [pc, #20]	@ (81072ec <RCCEx_PLL3_Config+0x128>)
 81072d6:	681b      	ldr	r3, [r3, #0]
 81072d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072dc:	2b00      	cmp	r3, #0
 81072de:	d0f0      	beq.n	81072c2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 81072e0:	2300      	movs	r3, #0
}
 81072e2:	4618      	mov	r0, r3
 81072e4:	3710      	adds	r7, #16
 81072e6:	46bd      	mov	sp, r7
 81072e8:	bd80      	pop	{r7, pc}
 81072ea:	bf00      	nop
 81072ec:	46020c00 	.word	0x46020c00
 81072f0:	80800000 	.word	0x80800000

081072f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81072f4:	b580      	push	{r7, lr}
 81072f6:	b082      	sub	sp, #8
 81072f8:	af00      	add	r7, sp, #0
 81072fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81072fc:	687b      	ldr	r3, [r7, #4]
 81072fe:	2b00      	cmp	r3, #0
 8107300:	d101      	bne.n	8107306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107302:	2301      	movs	r3, #1
 8107304:	e049      	b.n	810739a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107306:	687b      	ldr	r3, [r7, #4]
 8107308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810730c:	b2db      	uxtb	r3, r3
 810730e:	2b00      	cmp	r3, #0
 8107310:	d106      	bne.n	8107320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107312:	687b      	ldr	r3, [r7, #4]
 8107314:	2200      	movs	r2, #0
 8107316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810731a:	6878      	ldr	r0, [r7, #4]
 810731c:	f000 f841 	bl	81073a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107320:	687b      	ldr	r3, [r7, #4]
 8107322:	2202      	movs	r2, #2
 8107324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107328:	687b      	ldr	r3, [r7, #4]
 810732a:	681a      	ldr	r2, [r3, #0]
 810732c:	687b      	ldr	r3, [r7, #4]
 810732e:	3304      	adds	r3, #4
 8107330:	4619      	mov	r1, r3
 8107332:	4610      	mov	r0, r2
 8107334:	f000 fa58 	bl	81077e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	2201      	movs	r2, #1
 810733c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107340:	687b      	ldr	r3, [r7, #4]
 8107342:	2201      	movs	r2, #1
 8107344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107348:	687b      	ldr	r3, [r7, #4]
 810734a:	2201      	movs	r2, #1
 810734c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107350:	687b      	ldr	r3, [r7, #4]
 8107352:	2201      	movs	r2, #1
 8107354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107358:	687b      	ldr	r3, [r7, #4]
 810735a:	2201      	movs	r2, #1
 810735c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107360:	687b      	ldr	r3, [r7, #4]
 8107362:	2201      	movs	r2, #1
 8107364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107368:	687b      	ldr	r3, [r7, #4]
 810736a:	2201      	movs	r2, #1
 810736c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107370:	687b      	ldr	r3, [r7, #4]
 8107372:	2201      	movs	r2, #1
 8107374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107378:	687b      	ldr	r3, [r7, #4]
 810737a:	2201      	movs	r2, #1
 810737c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107380:	687b      	ldr	r3, [r7, #4]
 8107382:	2201      	movs	r2, #1
 8107384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107388:	687b      	ldr	r3, [r7, #4]
 810738a:	2201      	movs	r2, #1
 810738c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107390:	687b      	ldr	r3, [r7, #4]
 8107392:	2201      	movs	r2, #1
 8107394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107398:	2300      	movs	r3, #0
}
 810739a:	4618      	mov	r0, r3
 810739c:	3708      	adds	r7, #8
 810739e:	46bd      	mov	sp, r7
 81073a0:	bd80      	pop	{r7, pc}

081073a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81073a2:	b480      	push	{r7}
 81073a4:	b083      	sub	sp, #12
 81073a6:	af00      	add	r7, sp, #0
 81073a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81073aa:	bf00      	nop
 81073ac:	370c      	adds	r7, #12
 81073ae:	46bd      	mov	sp, r7
 81073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073b4:	4770      	bx	lr
	...

081073b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81073b8:	b480      	push	{r7}
 81073ba:	b085      	sub	sp, #20
 81073bc:	af00      	add	r7, sp, #0
 81073be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81073c0:	687b      	ldr	r3, [r7, #4]
 81073c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 81073c6:	b2db      	uxtb	r3, r3
 81073c8:	2b01      	cmp	r3, #1
 81073ca:	d001      	beq.n	81073d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81073cc:	2301      	movs	r3, #1
 81073ce:	e072      	b.n	81074b6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81073d0:	687b      	ldr	r3, [r7, #4]
 81073d2:	2202      	movs	r2, #2
 81073d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81073d8:	687b      	ldr	r3, [r7, #4]
 81073da:	681b      	ldr	r3, [r3, #0]
 81073dc:	68da      	ldr	r2, [r3, #12]
 81073de:	687b      	ldr	r3, [r7, #4]
 81073e0:	681b      	ldr	r3, [r3, #0]
 81073e2:	f042 0201 	orr.w	r2, r2, #1
 81073e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81073e8:	687b      	ldr	r3, [r7, #4]
 81073ea:	681b      	ldr	r3, [r3, #0]
 81073ec:	4a35      	ldr	r2, [pc, #212]	@ (81074c4 <HAL_TIM_Base_Start_IT+0x10c>)
 81073ee:	4293      	cmp	r3, r2
 81073f0:	d040      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 81073f2:	687b      	ldr	r3, [r7, #4]
 81073f4:	681b      	ldr	r3, [r3, #0]
 81073f6:	4a34      	ldr	r2, [pc, #208]	@ (81074c8 <HAL_TIM_Base_Start_IT+0x110>)
 81073f8:	4293      	cmp	r3, r2
 81073fa:	d03b      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107404:	d036      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107406:	687b      	ldr	r3, [r7, #4]
 8107408:	681b      	ldr	r3, [r3, #0]
 810740a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810740e:	d031      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	681b      	ldr	r3, [r3, #0]
 8107414:	4a2d      	ldr	r2, [pc, #180]	@ (81074cc <HAL_TIM_Base_Start_IT+0x114>)
 8107416:	4293      	cmp	r3, r2
 8107418:	d02c      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	681b      	ldr	r3, [r3, #0]
 810741e:	4a2c      	ldr	r2, [pc, #176]	@ (81074d0 <HAL_TIM_Base_Start_IT+0x118>)
 8107420:	4293      	cmp	r3, r2
 8107422:	d027      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107424:	687b      	ldr	r3, [r7, #4]
 8107426:	681b      	ldr	r3, [r3, #0]
 8107428:	4a2a      	ldr	r2, [pc, #168]	@ (81074d4 <HAL_TIM_Base_Start_IT+0x11c>)
 810742a:	4293      	cmp	r3, r2
 810742c:	d022      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 810742e:	687b      	ldr	r3, [r7, #4]
 8107430:	681b      	ldr	r3, [r3, #0]
 8107432:	4a29      	ldr	r2, [pc, #164]	@ (81074d8 <HAL_TIM_Base_Start_IT+0x120>)
 8107434:	4293      	cmp	r3, r2
 8107436:	d01d      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	4a27      	ldr	r2, [pc, #156]	@ (81074dc <HAL_TIM_Base_Start_IT+0x124>)
 810743e:	4293      	cmp	r3, r2
 8107440:	d018      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	681b      	ldr	r3, [r3, #0]
 8107446:	4a26      	ldr	r2, [pc, #152]	@ (81074e0 <HAL_TIM_Base_Start_IT+0x128>)
 8107448:	4293      	cmp	r3, r2
 810744a:	d013      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 810744c:	687b      	ldr	r3, [r7, #4]
 810744e:	681b      	ldr	r3, [r3, #0]
 8107450:	4a24      	ldr	r2, [pc, #144]	@ (81074e4 <HAL_TIM_Base_Start_IT+0x12c>)
 8107452:	4293      	cmp	r3, r2
 8107454:	d00e      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107456:	687b      	ldr	r3, [r7, #4]
 8107458:	681b      	ldr	r3, [r3, #0]
 810745a:	4a23      	ldr	r2, [pc, #140]	@ (81074e8 <HAL_TIM_Base_Start_IT+0x130>)
 810745c:	4293      	cmp	r3, r2
 810745e:	d009      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	681b      	ldr	r3, [r3, #0]
 8107464:	4a21      	ldr	r2, [pc, #132]	@ (81074ec <HAL_TIM_Base_Start_IT+0x134>)
 8107466:	4293      	cmp	r3, r2
 8107468:	d004      	beq.n	8107474 <HAL_TIM_Base_Start_IT+0xbc>
 810746a:	687b      	ldr	r3, [r7, #4]
 810746c:	681b      	ldr	r3, [r3, #0]
 810746e:	4a20      	ldr	r2, [pc, #128]	@ (81074f0 <HAL_TIM_Base_Start_IT+0x138>)
 8107470:	4293      	cmp	r3, r2
 8107472:	d115      	bne.n	81074a0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107474:	687b      	ldr	r3, [r7, #4]
 8107476:	681b      	ldr	r3, [r3, #0]
 8107478:	689a      	ldr	r2, [r3, #8]
 810747a:	4b1e      	ldr	r3, [pc, #120]	@ (81074f4 <HAL_TIM_Base_Start_IT+0x13c>)
 810747c:	4013      	ands	r3, r2
 810747e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107480:	68fb      	ldr	r3, [r7, #12]
 8107482:	2b06      	cmp	r3, #6
 8107484:	d015      	beq.n	81074b2 <HAL_TIM_Base_Start_IT+0xfa>
 8107486:	68fb      	ldr	r3, [r7, #12]
 8107488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810748c:	d011      	beq.n	81074b2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	681b      	ldr	r3, [r3, #0]
 8107492:	681a      	ldr	r2, [r3, #0]
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	681b      	ldr	r3, [r3, #0]
 8107498:	f042 0201 	orr.w	r2, r2, #1
 810749c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810749e:	e008      	b.n	81074b2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81074a0:	687b      	ldr	r3, [r7, #4]
 81074a2:	681b      	ldr	r3, [r3, #0]
 81074a4:	681a      	ldr	r2, [r3, #0]
 81074a6:	687b      	ldr	r3, [r7, #4]
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	f042 0201 	orr.w	r2, r2, #1
 81074ae:	601a      	str	r2, [r3, #0]
 81074b0:	e000      	b.n	81074b4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81074b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81074b4:	2300      	movs	r3, #0
}
 81074b6:	4618      	mov	r0, r3
 81074b8:	3714      	adds	r7, #20
 81074ba:	46bd      	mov	sp, r7
 81074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074c0:	4770      	bx	lr
 81074c2:	bf00      	nop
 81074c4:	40012c00 	.word	0x40012c00
 81074c8:	50012c00 	.word	0x50012c00
 81074cc:	40000400 	.word	0x40000400
 81074d0:	50000400 	.word	0x50000400
 81074d4:	40000800 	.word	0x40000800
 81074d8:	50000800 	.word	0x50000800
 81074dc:	40000c00 	.word	0x40000c00
 81074e0:	50000c00 	.word	0x50000c00
 81074e4:	40013400 	.word	0x40013400
 81074e8:	50013400 	.word	0x50013400
 81074ec:	40014000 	.word	0x40014000
 81074f0:	50014000 	.word	0x50014000
 81074f4:	00010007 	.word	0x00010007

081074f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81074f8:	b580      	push	{r7, lr}
 81074fa:	b084      	sub	sp, #16
 81074fc:	af00      	add	r7, sp, #0
 81074fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	681b      	ldr	r3, [r3, #0]
 8107504:	68db      	ldr	r3, [r3, #12]
 8107506:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8107508:	687b      	ldr	r3, [r7, #4]
 810750a:	681b      	ldr	r3, [r3, #0]
 810750c:	691b      	ldr	r3, [r3, #16]
 810750e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8107510:	68bb      	ldr	r3, [r7, #8]
 8107512:	f003 0302 	and.w	r3, r3, #2
 8107516:	2b00      	cmp	r3, #0
 8107518:	d020      	beq.n	810755c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810751a:	68fb      	ldr	r3, [r7, #12]
 810751c:	f003 0302 	and.w	r3, r3, #2
 8107520:	2b00      	cmp	r3, #0
 8107522:	d01b      	beq.n	810755c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8107524:	687b      	ldr	r3, [r7, #4]
 8107526:	681b      	ldr	r3, [r3, #0]
 8107528:	f06f 0202 	mvn.w	r2, #2
 810752c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810752e:	687b      	ldr	r3, [r7, #4]
 8107530:	2201      	movs	r2, #1
 8107532:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107534:	687b      	ldr	r3, [r7, #4]
 8107536:	681b      	ldr	r3, [r3, #0]
 8107538:	699b      	ldr	r3, [r3, #24]
 810753a:	f003 0303 	and.w	r3, r3, #3
 810753e:	2b00      	cmp	r3, #0
 8107540:	d003      	beq.n	810754a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107542:	6878      	ldr	r0, [r7, #4]
 8107544:	f000 f931 	bl	81077aa <HAL_TIM_IC_CaptureCallback>
 8107548:	e005      	b.n	8107556 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810754a:	6878      	ldr	r0, [r7, #4]
 810754c:	f000 f923 	bl	8107796 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107550:	6878      	ldr	r0, [r7, #4]
 8107552:	f000 f934 	bl	81077be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107556:	687b      	ldr	r3, [r7, #4]
 8107558:	2200      	movs	r2, #0
 810755a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810755c:	68bb      	ldr	r3, [r7, #8]
 810755e:	f003 0304 	and.w	r3, r3, #4
 8107562:	2b00      	cmp	r3, #0
 8107564:	d020      	beq.n	81075a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8107566:	68fb      	ldr	r3, [r7, #12]
 8107568:	f003 0304 	and.w	r3, r3, #4
 810756c:	2b00      	cmp	r3, #0
 810756e:	d01b      	beq.n	81075a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8107570:	687b      	ldr	r3, [r7, #4]
 8107572:	681b      	ldr	r3, [r3, #0]
 8107574:	f06f 0204 	mvn.w	r2, #4
 8107578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810757a:	687b      	ldr	r3, [r7, #4]
 810757c:	2202      	movs	r2, #2
 810757e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8107580:	687b      	ldr	r3, [r7, #4]
 8107582:	681b      	ldr	r3, [r3, #0]
 8107584:	699b      	ldr	r3, [r3, #24]
 8107586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810758a:	2b00      	cmp	r3, #0
 810758c:	d003      	beq.n	8107596 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810758e:	6878      	ldr	r0, [r7, #4]
 8107590:	f000 f90b 	bl	81077aa <HAL_TIM_IC_CaptureCallback>
 8107594:	e005      	b.n	81075a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107596:	6878      	ldr	r0, [r7, #4]
 8107598:	f000 f8fd 	bl	8107796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810759c:	6878      	ldr	r0, [r7, #4]
 810759e:	f000 f90e 	bl	81077be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81075a2:	687b      	ldr	r3, [r7, #4]
 81075a4:	2200      	movs	r2, #0
 81075a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81075a8:	68bb      	ldr	r3, [r7, #8]
 81075aa:	f003 0308 	and.w	r3, r3, #8
 81075ae:	2b00      	cmp	r3, #0
 81075b0:	d020      	beq.n	81075f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81075b2:	68fb      	ldr	r3, [r7, #12]
 81075b4:	f003 0308 	and.w	r3, r3, #8
 81075b8:	2b00      	cmp	r3, #0
 81075ba:	d01b      	beq.n	81075f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81075bc:	687b      	ldr	r3, [r7, #4]
 81075be:	681b      	ldr	r3, [r3, #0]
 81075c0:	f06f 0208 	mvn.w	r2, #8
 81075c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81075c6:	687b      	ldr	r3, [r7, #4]
 81075c8:	2204      	movs	r2, #4
 81075ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81075cc:	687b      	ldr	r3, [r7, #4]
 81075ce:	681b      	ldr	r3, [r3, #0]
 81075d0:	69db      	ldr	r3, [r3, #28]
 81075d2:	f003 0303 	and.w	r3, r3, #3
 81075d6:	2b00      	cmp	r3, #0
 81075d8:	d003      	beq.n	81075e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81075da:	6878      	ldr	r0, [r7, #4]
 81075dc:	f000 f8e5 	bl	81077aa <HAL_TIM_IC_CaptureCallback>
 81075e0:	e005      	b.n	81075ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81075e2:	6878      	ldr	r0, [r7, #4]
 81075e4:	f000 f8d7 	bl	8107796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81075e8:	6878      	ldr	r0, [r7, #4]
 81075ea:	f000 f8e8 	bl	81077be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81075ee:	687b      	ldr	r3, [r7, #4]
 81075f0:	2200      	movs	r2, #0
 81075f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81075f4:	68bb      	ldr	r3, [r7, #8]
 81075f6:	f003 0310 	and.w	r3, r3, #16
 81075fa:	2b00      	cmp	r3, #0
 81075fc:	d020      	beq.n	8107640 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81075fe:	68fb      	ldr	r3, [r7, #12]
 8107600:	f003 0310 	and.w	r3, r3, #16
 8107604:	2b00      	cmp	r3, #0
 8107606:	d01b      	beq.n	8107640 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8107608:	687b      	ldr	r3, [r7, #4]
 810760a:	681b      	ldr	r3, [r3, #0]
 810760c:	f06f 0210 	mvn.w	r2, #16
 8107610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8107612:	687b      	ldr	r3, [r7, #4]
 8107614:	2208      	movs	r2, #8
 8107616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	681b      	ldr	r3, [r3, #0]
 810761c:	69db      	ldr	r3, [r3, #28]
 810761e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8107622:	2b00      	cmp	r3, #0
 8107624:	d003      	beq.n	810762e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107626:	6878      	ldr	r0, [r7, #4]
 8107628:	f000 f8bf 	bl	81077aa <HAL_TIM_IC_CaptureCallback>
 810762c:	e005      	b.n	810763a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810762e:	6878      	ldr	r0, [r7, #4]
 8107630:	f000 f8b1 	bl	8107796 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107634:	6878      	ldr	r0, [r7, #4]
 8107636:	f000 f8c2 	bl	81077be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810763a:	687b      	ldr	r3, [r7, #4]
 810763c:	2200      	movs	r2, #0
 810763e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8107640:	68bb      	ldr	r3, [r7, #8]
 8107642:	f003 0301 	and.w	r3, r3, #1
 8107646:	2b00      	cmp	r3, #0
 8107648:	d00c      	beq.n	8107664 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810764a:	68fb      	ldr	r3, [r7, #12]
 810764c:	f003 0301 	and.w	r3, r3, #1
 8107650:	2b00      	cmp	r3, #0
 8107652:	d007      	beq.n	8107664 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8107654:	687b      	ldr	r3, [r7, #4]
 8107656:	681b      	ldr	r3, [r3, #0]
 8107658:	f06f 0201 	mvn.w	r2, #1
 810765c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810765e:	6878      	ldr	r0, [r7, #4]
 8107660:	f7f9 fc1e 	bl	8100ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107664:	68bb      	ldr	r3, [r7, #8]
 8107666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810766a:	2b00      	cmp	r3, #0
 810766c:	d104      	bne.n	8107678 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810766e:	68bb      	ldr	r3, [r7, #8]
 8107670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107674:	2b00      	cmp	r3, #0
 8107676:	d00c      	beq.n	8107692 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8107678:	68fb      	ldr	r3, [r7, #12]
 810767a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810767e:	2b00      	cmp	r3, #0
 8107680:	d007      	beq.n	8107692 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8107682:	687b      	ldr	r3, [r7, #4]
 8107684:	681b      	ldr	r3, [r3, #0]
 8107686:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 810768a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810768c:	6878      	ldr	r0, [r7, #4]
 810768e:	f000 f9b5 	bl	81079fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8107692:	68bb      	ldr	r3, [r7, #8]
 8107694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107698:	2b00      	cmp	r3, #0
 810769a:	d00c      	beq.n	81076b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 810769c:	68fb      	ldr	r3, [r7, #12]
 810769e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81076a2:	2b00      	cmp	r3, #0
 81076a4:	d007      	beq.n	81076b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81076a6:	687b      	ldr	r3, [r7, #4]
 81076a8:	681b      	ldr	r3, [r3, #0]
 81076aa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 81076ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81076b0:	6878      	ldr	r0, [r7, #4]
 81076b2:	f000 f9ad 	bl	8107a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81076b6:	68bb      	ldr	r3, [r7, #8]
 81076b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81076bc:	2b00      	cmp	r3, #0
 81076be:	d00c      	beq.n	81076da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81076c0:	68fb      	ldr	r3, [r7, #12]
 81076c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81076c6:	2b00      	cmp	r3, #0
 81076c8:	d007      	beq.n	81076da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81076ca:	687b      	ldr	r3, [r7, #4]
 81076cc:	681b      	ldr	r3, [r3, #0]
 81076ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81076d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81076d4:	6878      	ldr	r0, [r7, #4]
 81076d6:	f000 f87c 	bl	81077d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81076da:	68bb      	ldr	r3, [r7, #8]
 81076dc:	f003 0320 	and.w	r3, r3, #32
 81076e0:	2b00      	cmp	r3, #0
 81076e2:	d00c      	beq.n	81076fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81076e4:	68fb      	ldr	r3, [r7, #12]
 81076e6:	f003 0320 	and.w	r3, r3, #32
 81076ea:	2b00      	cmp	r3, #0
 81076ec:	d007      	beq.n	81076fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81076ee:	687b      	ldr	r3, [r7, #4]
 81076f0:	681b      	ldr	r3, [r3, #0]
 81076f2:	f06f 0220 	mvn.w	r2, #32
 81076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81076f8:	6878      	ldr	r0, [r7, #4]
 81076fa:	f000 f975 	bl	81079e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 81076fe:	68bb      	ldr	r3, [r7, #8]
 8107700:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8107704:	2b00      	cmp	r3, #0
 8107706:	d00c      	beq.n	8107722 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8107708:	68fb      	ldr	r3, [r7, #12]
 810770a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810770e:	2b00      	cmp	r3, #0
 8107710:	d007      	beq.n	8107722 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8107712:	687b      	ldr	r3, [r7, #4]
 8107714:	681b      	ldr	r3, [r3, #0]
 8107716:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 810771a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 810771c:	6878      	ldr	r0, [r7, #4]
 810771e:	f000 f981 	bl	8107a24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8107722:	68bb      	ldr	r3, [r7, #8]
 8107724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8107728:	2b00      	cmp	r3, #0
 810772a:	d00c      	beq.n	8107746 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 810772c:	68fb      	ldr	r3, [r7, #12]
 810772e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8107732:	2b00      	cmp	r3, #0
 8107734:	d007      	beq.n	8107746 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8107736:	687b      	ldr	r3, [r7, #4]
 8107738:	681b      	ldr	r3, [r3, #0]
 810773a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 810773e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8107740:	6878      	ldr	r0, [r7, #4]
 8107742:	f000 f979 	bl	8107a38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8107746:	68bb      	ldr	r3, [r7, #8]
 8107748:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810774c:	2b00      	cmp	r3, #0
 810774e:	d00c      	beq.n	810776a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8107750:	68fb      	ldr	r3, [r7, #12]
 8107752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8107756:	2b00      	cmp	r3, #0
 8107758:	d007      	beq.n	810776a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 810775a:	687b      	ldr	r3, [r7, #4]
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8107762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8107764:	6878      	ldr	r0, [r7, #4]
 8107766:	f000 f971 	bl	8107a4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 810776a:	68bb      	ldr	r3, [r7, #8]
 810776c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8107770:	2b00      	cmp	r3, #0
 8107772:	d00c      	beq.n	810778e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8107774:	68fb      	ldr	r3, [r7, #12]
 8107776:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810777a:	2b00      	cmp	r3, #0
 810777c:	d007      	beq.n	810778e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 810777e:	687b      	ldr	r3, [r7, #4]
 8107780:	681b      	ldr	r3, [r3, #0]
 8107782:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8107786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8107788:	6878      	ldr	r0, [r7, #4]
 810778a:	f000 f969 	bl	8107a60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810778e:	bf00      	nop
 8107790:	3710      	adds	r7, #16
 8107792:	46bd      	mov	sp, r7
 8107794:	bd80      	pop	{r7, pc}

08107796 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107796:	b480      	push	{r7}
 8107798:	b083      	sub	sp, #12
 810779a:	af00      	add	r7, sp, #0
 810779c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810779e:	bf00      	nop
 81077a0:	370c      	adds	r7, #12
 81077a2:	46bd      	mov	sp, r7
 81077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077a8:	4770      	bx	lr

081077aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 81077aa:	b480      	push	{r7}
 81077ac:	b083      	sub	sp, #12
 81077ae:	af00      	add	r7, sp, #0
 81077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 81077b2:	bf00      	nop
 81077b4:	370c      	adds	r7, #12
 81077b6:	46bd      	mov	sp, r7
 81077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077bc:	4770      	bx	lr

081077be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 81077be:	b480      	push	{r7}
 81077c0:	b083      	sub	sp, #12
 81077c2:	af00      	add	r7, sp, #0
 81077c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 81077c6:	bf00      	nop
 81077c8:	370c      	adds	r7, #12
 81077ca:	46bd      	mov	sp, r7
 81077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077d0:	4770      	bx	lr

081077d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 81077d2:	b480      	push	{r7}
 81077d4:	b083      	sub	sp, #12
 81077d6:	af00      	add	r7, sp, #0
 81077d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81077da:	bf00      	nop
 81077dc:	370c      	adds	r7, #12
 81077de:	46bd      	mov	sp, r7
 81077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81077e4:	4770      	bx	lr
	...

081077e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 81077e8:	b480      	push	{r7}
 81077ea:	b085      	sub	sp, #20
 81077ec:	af00      	add	r7, sp, #0
 81077ee:	6078      	str	r0, [r7, #4]
 81077f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81077f2:	687b      	ldr	r3, [r7, #4]
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81077f8:	687b      	ldr	r3, [r7, #4]
 81077fa:	4a6b      	ldr	r2, [pc, #428]	@ (81079a8 <TIM_Base_SetConfig+0x1c0>)
 81077fc:	4293      	cmp	r3, r2
 81077fe:	d02b      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107800:	687b      	ldr	r3, [r7, #4]
 8107802:	4a6a      	ldr	r2, [pc, #424]	@ (81079ac <TIM_Base_SetConfig+0x1c4>)
 8107804:	4293      	cmp	r3, r2
 8107806:	d027      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107808:	687b      	ldr	r3, [r7, #4]
 810780a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810780e:	d023      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107810:	687b      	ldr	r3, [r7, #4]
 8107812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107816:	d01f      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107818:	687b      	ldr	r3, [r7, #4]
 810781a:	4a65      	ldr	r2, [pc, #404]	@ (81079b0 <TIM_Base_SetConfig+0x1c8>)
 810781c:	4293      	cmp	r3, r2
 810781e:	d01b      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107820:	687b      	ldr	r3, [r7, #4]
 8107822:	4a64      	ldr	r2, [pc, #400]	@ (81079b4 <TIM_Base_SetConfig+0x1cc>)
 8107824:	4293      	cmp	r3, r2
 8107826:	d017      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107828:	687b      	ldr	r3, [r7, #4]
 810782a:	4a63      	ldr	r2, [pc, #396]	@ (81079b8 <TIM_Base_SetConfig+0x1d0>)
 810782c:	4293      	cmp	r3, r2
 810782e:	d013      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107830:	687b      	ldr	r3, [r7, #4]
 8107832:	4a62      	ldr	r2, [pc, #392]	@ (81079bc <TIM_Base_SetConfig+0x1d4>)
 8107834:	4293      	cmp	r3, r2
 8107836:	d00f      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107838:	687b      	ldr	r3, [r7, #4]
 810783a:	4a61      	ldr	r2, [pc, #388]	@ (81079c0 <TIM_Base_SetConfig+0x1d8>)
 810783c:	4293      	cmp	r3, r2
 810783e:	d00b      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107840:	687b      	ldr	r3, [r7, #4]
 8107842:	4a60      	ldr	r2, [pc, #384]	@ (81079c4 <TIM_Base_SetConfig+0x1dc>)
 8107844:	4293      	cmp	r3, r2
 8107846:	d007      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107848:	687b      	ldr	r3, [r7, #4]
 810784a:	4a5f      	ldr	r2, [pc, #380]	@ (81079c8 <TIM_Base_SetConfig+0x1e0>)
 810784c:	4293      	cmp	r3, r2
 810784e:	d003      	beq.n	8107858 <TIM_Base_SetConfig+0x70>
 8107850:	687b      	ldr	r3, [r7, #4]
 8107852:	4a5e      	ldr	r2, [pc, #376]	@ (81079cc <TIM_Base_SetConfig+0x1e4>)
 8107854:	4293      	cmp	r3, r2
 8107856:	d108      	bne.n	810786a <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107858:	68fb      	ldr	r3, [r7, #12]
 810785a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810785e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107860:	683b      	ldr	r3, [r7, #0]
 8107862:	685b      	ldr	r3, [r3, #4]
 8107864:	68fa      	ldr	r2, [r7, #12]
 8107866:	4313      	orrs	r3, r2
 8107868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810786a:	687b      	ldr	r3, [r7, #4]
 810786c:	4a4e      	ldr	r2, [pc, #312]	@ (81079a8 <TIM_Base_SetConfig+0x1c0>)
 810786e:	4293      	cmp	r3, r2
 8107870:	d043      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	4a4d      	ldr	r2, [pc, #308]	@ (81079ac <TIM_Base_SetConfig+0x1c4>)
 8107876:	4293      	cmp	r3, r2
 8107878:	d03f      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 810787a:	687b      	ldr	r3, [r7, #4]
 810787c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107880:	d03b      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 8107882:	687b      	ldr	r3, [r7, #4]
 8107884:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107888:	d037      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 810788a:	687b      	ldr	r3, [r7, #4]
 810788c:	4a48      	ldr	r2, [pc, #288]	@ (81079b0 <TIM_Base_SetConfig+0x1c8>)
 810788e:	4293      	cmp	r3, r2
 8107890:	d033      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 8107892:	687b      	ldr	r3, [r7, #4]
 8107894:	4a47      	ldr	r2, [pc, #284]	@ (81079b4 <TIM_Base_SetConfig+0x1cc>)
 8107896:	4293      	cmp	r3, r2
 8107898:	d02f      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 810789a:	687b      	ldr	r3, [r7, #4]
 810789c:	4a46      	ldr	r2, [pc, #280]	@ (81079b8 <TIM_Base_SetConfig+0x1d0>)
 810789e:	4293      	cmp	r3, r2
 81078a0:	d02b      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078a2:	687b      	ldr	r3, [r7, #4]
 81078a4:	4a45      	ldr	r2, [pc, #276]	@ (81079bc <TIM_Base_SetConfig+0x1d4>)
 81078a6:	4293      	cmp	r3, r2
 81078a8:	d027      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078aa:	687b      	ldr	r3, [r7, #4]
 81078ac:	4a44      	ldr	r2, [pc, #272]	@ (81079c0 <TIM_Base_SetConfig+0x1d8>)
 81078ae:	4293      	cmp	r3, r2
 81078b0:	d023      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078b2:	687b      	ldr	r3, [r7, #4]
 81078b4:	4a43      	ldr	r2, [pc, #268]	@ (81079c4 <TIM_Base_SetConfig+0x1dc>)
 81078b6:	4293      	cmp	r3, r2
 81078b8:	d01f      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078ba:	687b      	ldr	r3, [r7, #4]
 81078bc:	4a42      	ldr	r2, [pc, #264]	@ (81079c8 <TIM_Base_SetConfig+0x1e0>)
 81078be:	4293      	cmp	r3, r2
 81078c0:	d01b      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078c2:	687b      	ldr	r3, [r7, #4]
 81078c4:	4a41      	ldr	r2, [pc, #260]	@ (81079cc <TIM_Base_SetConfig+0x1e4>)
 81078c6:	4293      	cmp	r3, r2
 81078c8:	d017      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078ca:	687b      	ldr	r3, [r7, #4]
 81078cc:	4a40      	ldr	r2, [pc, #256]	@ (81079d0 <TIM_Base_SetConfig+0x1e8>)
 81078ce:	4293      	cmp	r3, r2
 81078d0:	d013      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078d2:	687b      	ldr	r3, [r7, #4]
 81078d4:	4a3f      	ldr	r2, [pc, #252]	@ (81079d4 <TIM_Base_SetConfig+0x1ec>)
 81078d6:	4293      	cmp	r3, r2
 81078d8:	d00f      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078da:	687b      	ldr	r3, [r7, #4]
 81078dc:	4a3e      	ldr	r2, [pc, #248]	@ (81079d8 <TIM_Base_SetConfig+0x1f0>)
 81078de:	4293      	cmp	r3, r2
 81078e0:	d00b      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078e2:	687b      	ldr	r3, [r7, #4]
 81078e4:	4a3d      	ldr	r2, [pc, #244]	@ (81079dc <TIM_Base_SetConfig+0x1f4>)
 81078e6:	4293      	cmp	r3, r2
 81078e8:	d007      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078ea:	687b      	ldr	r3, [r7, #4]
 81078ec:	4a3c      	ldr	r2, [pc, #240]	@ (81079e0 <TIM_Base_SetConfig+0x1f8>)
 81078ee:	4293      	cmp	r3, r2
 81078f0:	d003      	beq.n	81078fa <TIM_Base_SetConfig+0x112>
 81078f2:	687b      	ldr	r3, [r7, #4]
 81078f4:	4a3b      	ldr	r2, [pc, #236]	@ (81079e4 <TIM_Base_SetConfig+0x1fc>)
 81078f6:	4293      	cmp	r3, r2
 81078f8:	d108      	bne.n	810790c <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81078fa:	68fb      	ldr	r3, [r7, #12]
 81078fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8107900:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107902:	683b      	ldr	r3, [r7, #0]
 8107904:	68db      	ldr	r3, [r3, #12]
 8107906:	68fa      	ldr	r2, [r7, #12]
 8107908:	4313      	orrs	r3, r2
 810790a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810790c:	68fb      	ldr	r3, [r7, #12]
 810790e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8107912:	683b      	ldr	r3, [r7, #0]
 8107914:	695b      	ldr	r3, [r3, #20]
 8107916:	4313      	orrs	r3, r2
 8107918:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810791a:	683b      	ldr	r3, [r7, #0]
 810791c:	689a      	ldr	r2, [r3, #8]
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107922:	683b      	ldr	r3, [r7, #0]
 8107924:	681a      	ldr	r2, [r3, #0]
 8107926:	687b      	ldr	r3, [r7, #4]
 8107928:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	4a1e      	ldr	r2, [pc, #120]	@ (81079a8 <TIM_Base_SetConfig+0x1c0>)
 810792e:	4293      	cmp	r3, r2
 8107930:	d023      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 8107932:	687b      	ldr	r3, [r7, #4]
 8107934:	4a1d      	ldr	r2, [pc, #116]	@ (81079ac <TIM_Base_SetConfig+0x1c4>)
 8107936:	4293      	cmp	r3, r2
 8107938:	d01f      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 810793a:	687b      	ldr	r3, [r7, #4]
 810793c:	4a22      	ldr	r2, [pc, #136]	@ (81079c8 <TIM_Base_SetConfig+0x1e0>)
 810793e:	4293      	cmp	r3, r2
 8107940:	d01b      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 8107942:	687b      	ldr	r3, [r7, #4]
 8107944:	4a21      	ldr	r2, [pc, #132]	@ (81079cc <TIM_Base_SetConfig+0x1e4>)
 8107946:	4293      	cmp	r3, r2
 8107948:	d017      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 810794a:	687b      	ldr	r3, [r7, #4]
 810794c:	4a20      	ldr	r2, [pc, #128]	@ (81079d0 <TIM_Base_SetConfig+0x1e8>)
 810794e:	4293      	cmp	r3, r2
 8107950:	d013      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	4a1f      	ldr	r2, [pc, #124]	@ (81079d4 <TIM_Base_SetConfig+0x1ec>)
 8107956:	4293      	cmp	r3, r2
 8107958:	d00f      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 810795a:	687b      	ldr	r3, [r7, #4]
 810795c:	4a1e      	ldr	r2, [pc, #120]	@ (81079d8 <TIM_Base_SetConfig+0x1f0>)
 810795e:	4293      	cmp	r3, r2
 8107960:	d00b      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 8107962:	687b      	ldr	r3, [r7, #4]
 8107964:	4a1d      	ldr	r2, [pc, #116]	@ (81079dc <TIM_Base_SetConfig+0x1f4>)
 8107966:	4293      	cmp	r3, r2
 8107968:	d007      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 810796a:	687b      	ldr	r3, [r7, #4]
 810796c:	4a1c      	ldr	r2, [pc, #112]	@ (81079e0 <TIM_Base_SetConfig+0x1f8>)
 810796e:	4293      	cmp	r3, r2
 8107970:	d003      	beq.n	810797a <TIM_Base_SetConfig+0x192>
 8107972:	687b      	ldr	r3, [r7, #4]
 8107974:	4a1b      	ldr	r2, [pc, #108]	@ (81079e4 <TIM_Base_SetConfig+0x1fc>)
 8107976:	4293      	cmp	r3, r2
 8107978:	d103      	bne.n	8107982 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810797a:	683b      	ldr	r3, [r7, #0]
 810797c:	691a      	ldr	r2, [r3, #16]
 810797e:	687b      	ldr	r3, [r7, #4]
 8107980:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8107982:	687b      	ldr	r3, [r7, #4]
 8107984:	681b      	ldr	r3, [r3, #0]
 8107986:	f043 0204 	orr.w	r2, r3, #4
 810798a:	687b      	ldr	r3, [r7, #4]
 810798c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810798e:	687b      	ldr	r3, [r7, #4]
 8107990:	2201      	movs	r2, #1
 8107992:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8107994:	687b      	ldr	r3, [r7, #4]
 8107996:	68fa      	ldr	r2, [r7, #12]
 8107998:	601a      	str	r2, [r3, #0]
}
 810799a:	bf00      	nop
 810799c:	3714      	adds	r7, #20
 810799e:	46bd      	mov	sp, r7
 81079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079a4:	4770      	bx	lr
 81079a6:	bf00      	nop
 81079a8:	40012c00 	.word	0x40012c00
 81079ac:	50012c00 	.word	0x50012c00
 81079b0:	40000400 	.word	0x40000400
 81079b4:	50000400 	.word	0x50000400
 81079b8:	40000800 	.word	0x40000800
 81079bc:	50000800 	.word	0x50000800
 81079c0:	40000c00 	.word	0x40000c00
 81079c4:	50000c00 	.word	0x50000c00
 81079c8:	40013400 	.word	0x40013400
 81079cc:	50013400 	.word	0x50013400
 81079d0:	40014000 	.word	0x40014000
 81079d4:	50014000 	.word	0x50014000
 81079d8:	40014400 	.word	0x40014400
 81079dc:	50014400 	.word	0x50014400
 81079e0:	40014800 	.word	0x40014800
 81079e4:	50014800 	.word	0x50014800

081079e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81079e8:	b480      	push	{r7}
 81079ea:	b083      	sub	sp, #12
 81079ec:	af00      	add	r7, sp, #0
 81079ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81079f0:	bf00      	nop
 81079f2:	370c      	adds	r7, #12
 81079f4:	46bd      	mov	sp, r7
 81079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81079fa:	4770      	bx	lr

081079fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81079fc:	b480      	push	{r7}
 81079fe:	b083      	sub	sp, #12
 8107a00:	af00      	add	r7, sp, #0
 8107a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107a04:	bf00      	nop
 8107a06:	370c      	adds	r7, #12
 8107a08:	46bd      	mov	sp, r7
 8107a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a0e:	4770      	bx	lr

08107a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107a10:	b480      	push	{r7}
 8107a12:	b083      	sub	sp, #12
 8107a14:	af00      	add	r7, sp, #0
 8107a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8107a18:	bf00      	nop
 8107a1a:	370c      	adds	r7, #12
 8107a1c:	46bd      	mov	sp, r7
 8107a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a22:	4770      	bx	lr

08107a24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8107a24:	b480      	push	{r7}
 8107a26:	b083      	sub	sp, #12
 8107a28:	af00      	add	r7, sp, #0
 8107a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8107a2c:	bf00      	nop
 8107a2e:	370c      	adds	r7, #12
 8107a30:	46bd      	mov	sp, r7
 8107a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a36:	4770      	bx	lr

08107a38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8107a38:	b480      	push	{r7}
 8107a3a:	b083      	sub	sp, #12
 8107a3c:	af00      	add	r7, sp, #0
 8107a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8107a40:	bf00      	nop
 8107a42:	370c      	adds	r7, #12
 8107a44:	46bd      	mov	sp, r7
 8107a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a4a:	4770      	bx	lr

08107a4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8107a4c:	b480      	push	{r7}
 8107a4e:	b083      	sub	sp, #12
 8107a50:	af00      	add	r7, sp, #0
 8107a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8107a54:	bf00      	nop
 8107a56:	370c      	adds	r7, #12
 8107a58:	46bd      	mov	sp, r7
 8107a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a5e:	4770      	bx	lr

08107a60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8107a60:	b480      	push	{r7}
 8107a62:	b083      	sub	sp, #12
 8107a64:	af00      	add	r7, sp, #0
 8107a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8107a68:	bf00      	nop
 8107a6a:	370c      	adds	r7, #12
 8107a6c:	46bd      	mov	sp, r7
 8107a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107a72:	4770      	bx	lr

08107a74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8107a74:	b580      	push	{r7, lr}
 8107a76:	b082      	sub	sp, #8
 8107a78:	af00      	add	r7, sp, #0
 8107a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8107a7c:	687b      	ldr	r3, [r7, #4]
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	d101      	bne.n	8107a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8107a82:	2301      	movs	r3, #1
 8107a84:	e042      	b.n	8107b0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8107a86:	687b      	ldr	r3, [r7, #4]
 8107a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107a8c:	2b00      	cmp	r3, #0
 8107a8e:	d106      	bne.n	8107a9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8107a90:	687b      	ldr	r3, [r7, #4]
 8107a92:	2200      	movs	r2, #0
 8107a94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8107a98:	6878      	ldr	r0, [r7, #4]
 8107a9a:	f000 f83b 	bl	8107b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8107a9e:	687b      	ldr	r3, [r7, #4]
 8107aa0:	2224      	movs	r2, #36	@ 0x24
 8107aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8107aa6:	687b      	ldr	r3, [r7, #4]
 8107aa8:	681b      	ldr	r3, [r3, #0]
 8107aaa:	681a      	ldr	r2, [r3, #0]
 8107aac:	687b      	ldr	r3, [r7, #4]
 8107aae:	681b      	ldr	r3, [r3, #0]
 8107ab0:	f022 0201 	bic.w	r2, r2, #1
 8107ab4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107aba:	2b00      	cmp	r3, #0
 8107abc:	d002      	beq.n	8107ac4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8107abe:	6878      	ldr	r0, [r7, #4]
 8107ac0:	f000 fa72 	bl	8107fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8107ac4:	6878      	ldr	r0, [r7, #4]
 8107ac6:	f000 f8cd 	bl	8107c64 <UART_SetConfig>
 8107aca:	4603      	mov	r3, r0
 8107acc:	2b01      	cmp	r3, #1
 8107ace:	d101      	bne.n	8107ad4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8107ad0:	2301      	movs	r3, #1
 8107ad2:	e01b      	b.n	8107b0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8107ad4:	687b      	ldr	r3, [r7, #4]
 8107ad6:	681b      	ldr	r3, [r3, #0]
 8107ad8:	685a      	ldr	r2, [r3, #4]
 8107ada:	687b      	ldr	r3, [r7, #4]
 8107adc:	681b      	ldr	r3, [r3, #0]
 8107ade:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8107ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8107ae4:	687b      	ldr	r3, [r7, #4]
 8107ae6:	681b      	ldr	r3, [r3, #0]
 8107ae8:	689a      	ldr	r2, [r3, #8]
 8107aea:	687b      	ldr	r3, [r7, #4]
 8107aec:	681b      	ldr	r3, [r3, #0]
 8107aee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8107af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8107af4:	687b      	ldr	r3, [r7, #4]
 8107af6:	681b      	ldr	r3, [r3, #0]
 8107af8:	681a      	ldr	r2, [r3, #0]
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	681b      	ldr	r3, [r3, #0]
 8107afe:	f042 0201 	orr.w	r2, r2, #1
 8107b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8107b04:	6878      	ldr	r0, [r7, #4]
 8107b06:	f000 faf1 	bl	81080ec <UART_CheckIdleState>
 8107b0a:	4603      	mov	r3, r0
}
 8107b0c:	4618      	mov	r0, r3
 8107b0e:	3708      	adds	r7, #8
 8107b10:	46bd      	mov	sp, r7
 8107b12:	bd80      	pop	{r7, pc}

08107b14 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8107b14:	b480      	push	{r7}
 8107b16:	b083      	sub	sp, #12
 8107b18:	af00      	add	r7, sp, #0
 8107b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8107b1c:	bf00      	nop
 8107b1e:	370c      	adds	r7, #12
 8107b20:	46bd      	mov	sp, r7
 8107b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b26:	4770      	bx	lr

08107b28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8107b28:	b580      	push	{r7, lr}
 8107b2a:	b08a      	sub	sp, #40	@ 0x28
 8107b2c:	af02      	add	r7, sp, #8
 8107b2e:	60f8      	str	r0, [r7, #12]
 8107b30:	60b9      	str	r1, [r7, #8]
 8107b32:	603b      	str	r3, [r7, #0]
 8107b34:	4613      	mov	r3, r2
 8107b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8107b38:	68fb      	ldr	r3, [r7, #12]
 8107b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8107b3e:	2b20      	cmp	r3, #32
 8107b40:	f040 808b 	bne.w	8107c5a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8107b44:	68bb      	ldr	r3, [r7, #8]
 8107b46:	2b00      	cmp	r3, #0
 8107b48:	d002      	beq.n	8107b50 <HAL_UART_Transmit+0x28>
 8107b4a:	88fb      	ldrh	r3, [r7, #6]
 8107b4c:	2b00      	cmp	r3, #0
 8107b4e:	d101      	bne.n	8107b54 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8107b50:	2301      	movs	r3, #1
 8107b52:	e083      	b.n	8107c5c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8107b54:	68fb      	ldr	r3, [r7, #12]
 8107b56:	681b      	ldr	r3, [r3, #0]
 8107b58:	689b      	ldr	r3, [r3, #8]
 8107b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8107b5e:	2b80      	cmp	r3, #128	@ 0x80
 8107b60:	d107      	bne.n	8107b72 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8107b62:	68fb      	ldr	r3, [r7, #12]
 8107b64:	681b      	ldr	r3, [r3, #0]
 8107b66:	689a      	ldr	r2, [r3, #8]
 8107b68:	68fb      	ldr	r3, [r7, #12]
 8107b6a:	681b      	ldr	r3, [r3, #0]
 8107b6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8107b70:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107b72:	68fb      	ldr	r3, [r7, #12]
 8107b74:	2200      	movs	r2, #0
 8107b76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8107b7a:	68fb      	ldr	r3, [r7, #12]
 8107b7c:	2221      	movs	r2, #33	@ 0x21
 8107b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8107b82:	f7f9 fe9f 	bl	81018c4 <HAL_GetTick>
 8107b86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8107b88:	68fb      	ldr	r3, [r7, #12]
 8107b8a:	88fa      	ldrh	r2, [r7, #6]
 8107b8c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8107b90:	68fb      	ldr	r3, [r7, #12]
 8107b92:	88fa      	ldrh	r2, [r7, #6]
 8107b94:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8107b98:	68fb      	ldr	r3, [r7, #12]
 8107b9a:	689b      	ldr	r3, [r3, #8]
 8107b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8107ba0:	d108      	bne.n	8107bb4 <HAL_UART_Transmit+0x8c>
 8107ba2:	68fb      	ldr	r3, [r7, #12]
 8107ba4:	691b      	ldr	r3, [r3, #16]
 8107ba6:	2b00      	cmp	r3, #0
 8107ba8:	d104      	bne.n	8107bb4 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8107baa:	2300      	movs	r3, #0
 8107bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8107bae:	68bb      	ldr	r3, [r7, #8]
 8107bb0:	61bb      	str	r3, [r7, #24]
 8107bb2:	e003      	b.n	8107bbc <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8107bb4:	68bb      	ldr	r3, [r7, #8]
 8107bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8107bb8:	2300      	movs	r3, #0
 8107bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8107bbc:	e030      	b.n	8107c20 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8107bbe:	683b      	ldr	r3, [r7, #0]
 8107bc0:	9300      	str	r3, [sp, #0]
 8107bc2:	697b      	ldr	r3, [r7, #20]
 8107bc4:	2200      	movs	r2, #0
 8107bc6:	2180      	movs	r1, #128	@ 0x80
 8107bc8:	68f8      	ldr	r0, [r7, #12]
 8107bca:	f000 fb39 	bl	8108240 <UART_WaitOnFlagUntilTimeout>
 8107bce:	4603      	mov	r3, r0
 8107bd0:	2b00      	cmp	r3, #0
 8107bd2:	d005      	beq.n	8107be0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8107bd4:	68fb      	ldr	r3, [r7, #12]
 8107bd6:	2220      	movs	r2, #32
 8107bd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8107bdc:	2303      	movs	r3, #3
 8107bde:	e03d      	b.n	8107c5c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8107be0:	69fb      	ldr	r3, [r7, #28]
 8107be2:	2b00      	cmp	r3, #0
 8107be4:	d10b      	bne.n	8107bfe <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8107be6:	69bb      	ldr	r3, [r7, #24]
 8107be8:	881b      	ldrh	r3, [r3, #0]
 8107bea:	461a      	mov	r2, r3
 8107bec:	68fb      	ldr	r3, [r7, #12]
 8107bee:	681b      	ldr	r3, [r3, #0]
 8107bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8107bf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8107bf6:	69bb      	ldr	r3, [r7, #24]
 8107bf8:	3302      	adds	r3, #2
 8107bfa:	61bb      	str	r3, [r7, #24]
 8107bfc:	e007      	b.n	8107c0e <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8107bfe:	69fb      	ldr	r3, [r7, #28]
 8107c00:	781a      	ldrb	r2, [r3, #0]
 8107c02:	68fb      	ldr	r3, [r7, #12]
 8107c04:	681b      	ldr	r3, [r3, #0]
 8107c06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8107c08:	69fb      	ldr	r3, [r7, #28]
 8107c0a:	3301      	adds	r3, #1
 8107c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8107c0e:	68fb      	ldr	r3, [r7, #12]
 8107c10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8107c14:	b29b      	uxth	r3, r3
 8107c16:	3b01      	subs	r3, #1
 8107c18:	b29a      	uxth	r2, r3
 8107c1a:	68fb      	ldr	r3, [r7, #12]
 8107c1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8107c20:	68fb      	ldr	r3, [r7, #12]
 8107c22:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8107c26:	b29b      	uxth	r3, r3
 8107c28:	2b00      	cmp	r3, #0
 8107c2a:	d1c8      	bne.n	8107bbe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8107c2c:	683b      	ldr	r3, [r7, #0]
 8107c2e:	9300      	str	r3, [sp, #0]
 8107c30:	697b      	ldr	r3, [r7, #20]
 8107c32:	2200      	movs	r2, #0
 8107c34:	2140      	movs	r1, #64	@ 0x40
 8107c36:	68f8      	ldr	r0, [r7, #12]
 8107c38:	f000 fb02 	bl	8108240 <UART_WaitOnFlagUntilTimeout>
 8107c3c:	4603      	mov	r3, r0
 8107c3e:	2b00      	cmp	r3, #0
 8107c40:	d005      	beq.n	8107c4e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8107c42:	68fb      	ldr	r3, [r7, #12]
 8107c44:	2220      	movs	r2, #32
 8107c46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8107c4a:	2303      	movs	r3, #3
 8107c4c:	e006      	b.n	8107c5c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8107c4e:	68fb      	ldr	r3, [r7, #12]
 8107c50:	2220      	movs	r2, #32
 8107c52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8107c56:	2300      	movs	r3, #0
 8107c58:	e000      	b.n	8107c5c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8107c5a:	2302      	movs	r3, #2
  }
}
 8107c5c:	4618      	mov	r0, r3
 8107c5e:	3720      	adds	r7, #32
 8107c60:	46bd      	mov	sp, r7
 8107c62:	bd80      	pop	{r7, pc}

08107c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8107c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8107c68:	b094      	sub	sp, #80	@ 0x50
 8107c6a:	af00      	add	r7, sp, #0
 8107c6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8107c6e:	2300      	movs	r3, #0
 8107c70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8107c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c76:	681a      	ldr	r2, [r3, #0]
 8107c78:	4b7e      	ldr	r3, [pc, #504]	@ (8107e74 <UART_SetConfig+0x210>)
 8107c7a:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8107c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c7e:	689a      	ldr	r2, [r3, #8]
 8107c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c82:	691b      	ldr	r3, [r3, #16]
 8107c84:	431a      	orrs	r2, r3
 8107c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c88:	695b      	ldr	r3, [r3, #20]
 8107c8a:	431a      	orrs	r2, r3
 8107c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c8e:	69db      	ldr	r3, [r3, #28]
 8107c90:	4313      	orrs	r3, r2
 8107c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8107c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107c96:	681b      	ldr	r3, [r3, #0]
 8107c98:	681b      	ldr	r3, [r3, #0]
 8107c9a:	4977      	ldr	r1, [pc, #476]	@ (8107e78 <UART_SetConfig+0x214>)
 8107c9c:	4019      	ands	r1, r3
 8107c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ca0:	681a      	ldr	r2, [r3, #0]
 8107ca2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107ca4:	430b      	orrs	r3, r1
 8107ca6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8107ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107caa:	681b      	ldr	r3, [r3, #0]
 8107cac:	685b      	ldr	r3, [r3, #4]
 8107cae:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8107cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cb4:	68d9      	ldr	r1, [r3, #12]
 8107cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cb8:	681a      	ldr	r2, [r3, #0]
 8107cba:	ea40 0301 	orr.w	r3, r0, r1
 8107cbe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8107cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cc2:	699b      	ldr	r3, [r3, #24]
 8107cc4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8107cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cc8:	681a      	ldr	r2, [r3, #0]
 8107cca:	4b6a      	ldr	r3, [pc, #424]	@ (8107e74 <UART_SetConfig+0x210>)
 8107ccc:	429a      	cmp	r2, r3
 8107cce:	d009      	beq.n	8107ce4 <UART_SetConfig+0x80>
 8107cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cd2:	681a      	ldr	r2, [r3, #0]
 8107cd4:	4b69      	ldr	r3, [pc, #420]	@ (8107e7c <UART_SetConfig+0x218>)
 8107cd6:	429a      	cmp	r2, r3
 8107cd8:	d004      	beq.n	8107ce4 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8107cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cdc:	6a1a      	ldr	r2, [r3, #32]
 8107cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107ce0:	4313      	orrs	r3, r2
 8107ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8107ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ce6:	681b      	ldr	r3, [r3, #0]
 8107ce8:	689b      	ldr	r3, [r3, #8]
 8107cea:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8107cee:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8107cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cf4:	681a      	ldr	r2, [r3, #0]
 8107cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8107cf8:	430b      	orrs	r3, r1
 8107cfa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8107cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107cfe:	681b      	ldr	r3, [r3, #0]
 8107d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107d02:	f023 000f 	bic.w	r0, r3, #15
 8107d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d08:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8107d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d0c:	681a      	ldr	r2, [r3, #0]
 8107d0e:	ea40 0301 	orr.w	r3, r0, r1
 8107d12:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8107d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d16:	681a      	ldr	r2, [r3, #0]
 8107d18:	4b59      	ldr	r3, [pc, #356]	@ (8107e80 <UART_SetConfig+0x21c>)
 8107d1a:	429a      	cmp	r2, r3
 8107d1c:	d102      	bne.n	8107d24 <UART_SetConfig+0xc0>
 8107d1e:	2301      	movs	r3, #1
 8107d20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107d22:	e029      	b.n	8107d78 <UART_SetConfig+0x114>
 8107d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d26:	681a      	ldr	r2, [r3, #0]
 8107d28:	4b56      	ldr	r3, [pc, #344]	@ (8107e84 <UART_SetConfig+0x220>)
 8107d2a:	429a      	cmp	r2, r3
 8107d2c:	d102      	bne.n	8107d34 <UART_SetConfig+0xd0>
 8107d2e:	2302      	movs	r3, #2
 8107d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107d32:	e021      	b.n	8107d78 <UART_SetConfig+0x114>
 8107d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d36:	681a      	ldr	r2, [r3, #0]
 8107d38:	4b53      	ldr	r3, [pc, #332]	@ (8107e88 <UART_SetConfig+0x224>)
 8107d3a:	429a      	cmp	r2, r3
 8107d3c:	d102      	bne.n	8107d44 <UART_SetConfig+0xe0>
 8107d3e:	2304      	movs	r3, #4
 8107d40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107d42:	e019      	b.n	8107d78 <UART_SetConfig+0x114>
 8107d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d46:	681a      	ldr	r2, [r3, #0]
 8107d48:	4b50      	ldr	r3, [pc, #320]	@ (8107e8c <UART_SetConfig+0x228>)
 8107d4a:	429a      	cmp	r2, r3
 8107d4c:	d102      	bne.n	8107d54 <UART_SetConfig+0xf0>
 8107d4e:	2308      	movs	r3, #8
 8107d50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107d52:	e011      	b.n	8107d78 <UART_SetConfig+0x114>
 8107d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d56:	681a      	ldr	r2, [r3, #0]
 8107d58:	4b4d      	ldr	r3, [pc, #308]	@ (8107e90 <UART_SetConfig+0x22c>)
 8107d5a:	429a      	cmp	r2, r3
 8107d5c:	d102      	bne.n	8107d64 <UART_SetConfig+0x100>
 8107d5e:	2310      	movs	r3, #16
 8107d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107d62:	e009      	b.n	8107d78 <UART_SetConfig+0x114>
 8107d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d66:	681a      	ldr	r2, [r3, #0]
 8107d68:	4b42      	ldr	r3, [pc, #264]	@ (8107e74 <UART_SetConfig+0x210>)
 8107d6a:	429a      	cmp	r2, r3
 8107d6c:	d102      	bne.n	8107d74 <UART_SetConfig+0x110>
 8107d6e:	2320      	movs	r3, #32
 8107d70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8107d72:	e001      	b.n	8107d78 <UART_SetConfig+0x114>
 8107d74:	2300      	movs	r3, #0
 8107d76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8107d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d7a:	681a      	ldr	r2, [r3, #0]
 8107d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8107e74 <UART_SetConfig+0x210>)
 8107d7e:	429a      	cmp	r2, r3
 8107d80:	d005      	beq.n	8107d8e <UART_SetConfig+0x12a>
 8107d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107d84:	681a      	ldr	r2, [r3, #0]
 8107d86:	4b3d      	ldr	r3, [pc, #244]	@ (8107e7c <UART_SetConfig+0x218>)
 8107d88:	429a      	cmp	r2, r3
 8107d8a:	f040 8085 	bne.w	8107e98 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8107d8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8107d90:	2200      	movs	r2, #0
 8107d92:	623b      	str	r3, [r7, #32]
 8107d94:	627a      	str	r2, [r7, #36]	@ 0x24
 8107d96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8107d9a:	f7fd ffc5 	bl	8105d28 <HAL_RCCEx_GetPeriphCLKFreq>
 8107d9e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8107da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107da2:	2b00      	cmp	r3, #0
 8107da4:	f000 80e8 	beq.w	8107f78 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8107da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107dac:	4a39      	ldr	r2, [pc, #228]	@ (8107e94 <UART_SetConfig+0x230>)
 8107dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107db2:	461a      	mov	r2, r3
 8107db4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8107dba:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107dbe:	685a      	ldr	r2, [r3, #4]
 8107dc0:	4613      	mov	r3, r2
 8107dc2:	005b      	lsls	r3, r3, #1
 8107dc4:	4413      	add	r3, r2
 8107dc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8107dc8:	429a      	cmp	r2, r3
 8107dca:	d305      	bcc.n	8107dd8 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8107dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107dce:	685b      	ldr	r3, [r3, #4]
 8107dd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8107dd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8107dd4:	429a      	cmp	r2, r3
 8107dd6:	d903      	bls.n	8107de0 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8107dd8:	2301      	movs	r3, #1
 8107dda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8107dde:	e048      	b.n	8107e72 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107de2:	2200      	movs	r2, #0
 8107de4:	61bb      	str	r3, [r7, #24]
 8107de6:	61fa      	str	r2, [r7, #28]
 8107de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107dec:	4a29      	ldr	r2, [pc, #164]	@ (8107e94 <UART_SetConfig+0x230>)
 8107dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107df2:	b29b      	uxth	r3, r3
 8107df4:	2200      	movs	r2, #0
 8107df6:	613b      	str	r3, [r7, #16]
 8107df8:	617a      	str	r2, [r7, #20]
 8107dfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8107dfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8107e02:	f7f8 fa39 	bl	8100278 <__aeabi_uldivmod>
 8107e06:	4602      	mov	r2, r0
 8107e08:	460b      	mov	r3, r1
 8107e0a:	4610      	mov	r0, r2
 8107e0c:	4619      	mov	r1, r3
 8107e0e:	f04f 0200 	mov.w	r2, #0
 8107e12:	f04f 0300 	mov.w	r3, #0
 8107e16:	020b      	lsls	r3, r1, #8
 8107e18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8107e1c:	0202      	lsls	r2, r0, #8
 8107e1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8107e20:	6849      	ldr	r1, [r1, #4]
 8107e22:	0849      	lsrs	r1, r1, #1
 8107e24:	2000      	movs	r0, #0
 8107e26:	460c      	mov	r4, r1
 8107e28:	4605      	mov	r5, r0
 8107e2a:	eb12 0804 	adds.w	r8, r2, r4
 8107e2e:	eb43 0905 	adc.w	r9, r3, r5
 8107e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107e34:	685b      	ldr	r3, [r3, #4]
 8107e36:	2200      	movs	r2, #0
 8107e38:	60bb      	str	r3, [r7, #8]
 8107e3a:	60fa      	str	r2, [r7, #12]
 8107e3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8107e40:	4640      	mov	r0, r8
 8107e42:	4649      	mov	r1, r9
 8107e44:	f7f8 fa18 	bl	8100278 <__aeabi_uldivmod>
 8107e48:	4602      	mov	r2, r0
 8107e4a:	460b      	mov	r3, r1
 8107e4c:	4613      	mov	r3, r2
 8107e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8107e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107e52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107e56:	d308      	bcc.n	8107e6a <UART_SetConfig+0x206>
 8107e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107e5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8107e5e:	d204      	bcs.n	8107e6a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8107e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107e62:	681b      	ldr	r3, [r3, #0]
 8107e64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8107e66:	60da      	str	r2, [r3, #12]
 8107e68:	e003      	b.n	8107e72 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8107e6a:	2301      	movs	r3, #1
 8107e6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8107e70:	e082      	b.n	8107f78 <UART_SetConfig+0x314>
 8107e72:	e081      	b.n	8107f78 <UART_SetConfig+0x314>
 8107e74:	46002400 	.word	0x46002400
 8107e78:	cfff69f3 	.word	0xcfff69f3
 8107e7c:	56002400 	.word	0x56002400
 8107e80:	40013800 	.word	0x40013800
 8107e84:	40004400 	.word	0x40004400
 8107e88:	40004800 	.word	0x40004800
 8107e8c:	40004c00 	.word	0x40004c00
 8107e90:	40005000 	.word	0x40005000
 8107e94:	081093dc 	.word	0x081093dc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8107e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107e9a:	69db      	ldr	r3, [r3, #28]
 8107e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8107ea0:	d13c      	bne.n	8107f1c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8107ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8107ea4:	2200      	movs	r2, #0
 8107ea6:	603b      	str	r3, [r7, #0]
 8107ea8:	607a      	str	r2, [r7, #4]
 8107eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8107eae:	f7fd ff3b 	bl	8105d28 <HAL_RCCEx_GetPeriphCLKFreq>
 8107eb2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8107eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107eb6:	2b00      	cmp	r3, #0
 8107eb8:	d05e      	beq.n	8107f78 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107ebe:	4a39      	ldr	r2, [pc, #228]	@ (8107fa4 <UART_SetConfig+0x340>)
 8107ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107ec4:	461a      	mov	r2, r3
 8107ec6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107ec8:	fbb3 f3f2 	udiv	r3, r3, r2
 8107ecc:	005a      	lsls	r2, r3, #1
 8107ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ed0:	685b      	ldr	r3, [r3, #4]
 8107ed2:	085b      	lsrs	r3, r3, #1
 8107ed4:	441a      	add	r2, r3
 8107ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107ed8:	685b      	ldr	r3, [r3, #4]
 8107eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8107ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107ee2:	2b0f      	cmp	r3, #15
 8107ee4:	d916      	bls.n	8107f14 <UART_SetConfig+0x2b0>
 8107ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107eec:	d212      	bcs.n	8107f14 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8107eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107ef0:	b29b      	uxth	r3, r3
 8107ef2:	f023 030f 	bic.w	r3, r3, #15
 8107ef6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8107ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107efa:	085b      	lsrs	r3, r3, #1
 8107efc:	b29b      	uxth	r3, r3
 8107efe:	f003 0307 	and.w	r3, r3, #7
 8107f02:	b29a      	uxth	r2, r3
 8107f04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8107f06:	4313      	orrs	r3, r2
 8107f08:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8107f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f0c:	681b      	ldr	r3, [r3, #0]
 8107f0e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8107f10:	60da      	str	r2, [r3, #12]
 8107f12:	e031      	b.n	8107f78 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8107f14:	2301      	movs	r3, #1
 8107f16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8107f1a:	e02d      	b.n	8107f78 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8107f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8107f1e:	2200      	movs	r2, #0
 8107f20:	469a      	mov	sl, r3
 8107f22:	4693      	mov	fp, r2
 8107f24:	4650      	mov	r0, sl
 8107f26:	4659      	mov	r1, fp
 8107f28:	f7fd fefe 	bl	8105d28 <HAL_RCCEx_GetPeriphCLKFreq>
 8107f2c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8107f2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107f30:	2b00      	cmp	r3, #0
 8107f32:	d021      	beq.n	8107f78 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8107f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8107f38:	4a1a      	ldr	r2, [pc, #104]	@ (8107fa4 <UART_SetConfig+0x340>)
 8107f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8107f3e:	461a      	mov	r2, r3
 8107f40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8107f42:	fbb3 f2f2 	udiv	r2, r3, r2
 8107f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f48:	685b      	ldr	r3, [r3, #4]
 8107f4a:	085b      	lsrs	r3, r3, #1
 8107f4c:	441a      	add	r2, r3
 8107f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f50:	685b      	ldr	r3, [r3, #4]
 8107f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8107f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8107f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107f5a:	2b0f      	cmp	r3, #15
 8107f5c:	d909      	bls.n	8107f72 <UART_SetConfig+0x30e>
 8107f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107f64:	d205      	bcs.n	8107f72 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8107f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8107f68:	b29a      	uxth	r2, r3
 8107f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f6c:	681b      	ldr	r3, [r3, #0]
 8107f6e:	60da      	str	r2, [r3, #12]
 8107f70:	e002      	b.n	8107f78 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8107f72:	2301      	movs	r3, #1
 8107f74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8107f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f7a:	2201      	movs	r2, #1
 8107f7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8107f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f82:	2201      	movs	r2, #1
 8107f84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8107f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f8a:	2200      	movs	r2, #0
 8107f8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8107f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8107f90:	2200      	movs	r2, #0
 8107f92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8107f94:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8107f98:	4618      	mov	r0, r3
 8107f9a:	3750      	adds	r7, #80	@ 0x50
 8107f9c:	46bd      	mov	sp, r7
 8107f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107fa2:	bf00      	nop
 8107fa4:	081093dc 	.word	0x081093dc

08107fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107fa8:	b480      	push	{r7}
 8107faa:	b083      	sub	sp, #12
 8107fac:	af00      	add	r7, sp, #0
 8107fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107fb0:	687b      	ldr	r3, [r7, #4]
 8107fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107fb4:	f003 0308 	and.w	r3, r3, #8
 8107fb8:	2b00      	cmp	r3, #0
 8107fba:	d00a      	beq.n	8107fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	685b      	ldr	r3, [r3, #4]
 8107fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8107fca:	687b      	ldr	r3, [r7, #4]
 8107fcc:	681b      	ldr	r3, [r3, #0]
 8107fce:	430a      	orrs	r2, r1
 8107fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8107fd2:	687b      	ldr	r3, [r7, #4]
 8107fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107fd6:	f003 0301 	and.w	r3, r3, #1
 8107fda:	2b00      	cmp	r3, #0
 8107fdc:	d00a      	beq.n	8107ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	681b      	ldr	r3, [r3, #0]
 8107fe2:	685b      	ldr	r3, [r3, #4]
 8107fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8107fe8:	687b      	ldr	r3, [r7, #4]
 8107fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8107fec:	687b      	ldr	r3, [r7, #4]
 8107fee:	681b      	ldr	r3, [r3, #0]
 8107ff0:	430a      	orrs	r2, r1
 8107ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107ff8:	f003 0302 	and.w	r3, r3, #2
 8107ffc:	2b00      	cmp	r3, #0
 8107ffe:	d00a      	beq.n	8108016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8108000:	687b      	ldr	r3, [r7, #4]
 8108002:	681b      	ldr	r3, [r3, #0]
 8108004:	685b      	ldr	r3, [r3, #4]
 8108006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810800a:	687b      	ldr	r3, [r7, #4]
 810800c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810800e:	687b      	ldr	r3, [r7, #4]
 8108010:	681b      	ldr	r3, [r3, #0]
 8108012:	430a      	orrs	r2, r1
 8108014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8108016:	687b      	ldr	r3, [r7, #4]
 8108018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810801a:	f003 0304 	and.w	r3, r3, #4
 810801e:	2b00      	cmp	r3, #0
 8108020:	d00a      	beq.n	8108038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8108022:	687b      	ldr	r3, [r7, #4]
 8108024:	681b      	ldr	r3, [r3, #0]
 8108026:	685b      	ldr	r3, [r3, #4]
 8108028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	681b      	ldr	r3, [r3, #0]
 8108034:	430a      	orrs	r2, r1
 8108036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8108038:	687b      	ldr	r3, [r7, #4]
 810803a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810803c:	f003 0310 	and.w	r3, r3, #16
 8108040:	2b00      	cmp	r3, #0
 8108042:	d00a      	beq.n	810805a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	689b      	ldr	r3, [r3, #8]
 810804a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810804e:	687b      	ldr	r3, [r7, #4]
 8108050:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8108052:	687b      	ldr	r3, [r7, #4]
 8108054:	681b      	ldr	r3, [r3, #0]
 8108056:	430a      	orrs	r2, r1
 8108058:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810805a:	687b      	ldr	r3, [r7, #4]
 810805c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810805e:	f003 0320 	and.w	r3, r3, #32
 8108062:	2b00      	cmp	r3, #0
 8108064:	d00a      	beq.n	810807c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8108066:	687b      	ldr	r3, [r7, #4]
 8108068:	681b      	ldr	r3, [r3, #0]
 810806a:	689b      	ldr	r3, [r3, #8]
 810806c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8108074:	687b      	ldr	r3, [r7, #4]
 8108076:	681b      	ldr	r3, [r3, #0]
 8108078:	430a      	orrs	r2, r1
 810807a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108084:	2b00      	cmp	r3, #0
 8108086:	d01a      	beq.n	81080be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8108088:	687b      	ldr	r3, [r7, #4]
 810808a:	681b      	ldr	r3, [r3, #0]
 810808c:	685b      	ldr	r3, [r3, #4]
 810808e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8108092:	687b      	ldr	r3, [r7, #4]
 8108094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8108096:	687b      	ldr	r3, [r7, #4]
 8108098:	681b      	ldr	r3, [r3, #0]
 810809a:	430a      	orrs	r2, r1
 810809c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810809e:	687b      	ldr	r3, [r7, #4]
 81080a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81080a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81080a6:	d10a      	bne.n	81080be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81080a8:	687b      	ldr	r3, [r7, #4]
 81080aa:	681b      	ldr	r3, [r3, #0]
 81080ac:	685b      	ldr	r3, [r3, #4]
 81080ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 81080b2:	687b      	ldr	r3, [r7, #4]
 81080b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 81080b6:	687b      	ldr	r3, [r7, #4]
 81080b8:	681b      	ldr	r3, [r3, #0]
 81080ba:	430a      	orrs	r2, r1
 81080bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81080be:	687b      	ldr	r3, [r7, #4]
 81080c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81080c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81080c6:	2b00      	cmp	r3, #0
 81080c8:	d00a      	beq.n	81080e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81080ca:	687b      	ldr	r3, [r7, #4]
 81080cc:	681b      	ldr	r3, [r3, #0]
 81080ce:	685b      	ldr	r3, [r3, #4]
 81080d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81080d8:	687b      	ldr	r3, [r7, #4]
 81080da:	681b      	ldr	r3, [r3, #0]
 81080dc:	430a      	orrs	r2, r1
 81080de:	605a      	str	r2, [r3, #4]
  }
}
 81080e0:	bf00      	nop
 81080e2:	370c      	adds	r7, #12
 81080e4:	46bd      	mov	sp, r7
 81080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81080ea:	4770      	bx	lr

081080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81080ec:	b580      	push	{r7, lr}
 81080ee:	b098      	sub	sp, #96	@ 0x60
 81080f0:	af02      	add	r7, sp, #8
 81080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81080f4:	687b      	ldr	r3, [r7, #4]
 81080f6:	2200      	movs	r2, #0
 81080f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81080fc:	f7f9 fbe2 	bl	81018c4 <HAL_GetTick>
 8108100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8108102:	687b      	ldr	r3, [r7, #4]
 8108104:	681b      	ldr	r3, [r3, #0]
 8108106:	681b      	ldr	r3, [r3, #0]
 8108108:	f003 0308 	and.w	r3, r3, #8
 810810c:	2b08      	cmp	r3, #8
 810810e:	d12f      	bne.n	8108170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8108110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8108114:	9300      	str	r3, [sp, #0]
 8108116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8108118:	2200      	movs	r2, #0
 810811a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810811e:	6878      	ldr	r0, [r7, #4]
 8108120:	f000 f88e 	bl	8108240 <UART_WaitOnFlagUntilTimeout>
 8108124:	4603      	mov	r3, r0
 8108126:	2b00      	cmp	r3, #0
 8108128:	d022      	beq.n	8108170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810812a:	687b      	ldr	r3, [r7, #4]
 810812c:	681b      	ldr	r3, [r3, #0]
 810812e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108132:	e853 3f00 	ldrex	r3, [r3]
 8108136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8108138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810813a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810813e:	653b      	str	r3, [r7, #80]	@ 0x50
 8108140:	687b      	ldr	r3, [r7, #4]
 8108142:	681b      	ldr	r3, [r3, #0]
 8108144:	461a      	mov	r2, r3
 8108146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8108148:	647b      	str	r3, [r7, #68]	@ 0x44
 810814a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810814c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810814e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8108150:	e841 2300 	strex	r3, r2, [r1]
 8108154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8108156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8108158:	2b00      	cmp	r3, #0
 810815a:	d1e6      	bne.n	810812a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	2220      	movs	r2, #32
 8108160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8108164:	687b      	ldr	r3, [r7, #4]
 8108166:	2200      	movs	r2, #0
 8108168:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810816c:	2303      	movs	r3, #3
 810816e:	e063      	b.n	8108238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8108170:	687b      	ldr	r3, [r7, #4]
 8108172:	681b      	ldr	r3, [r3, #0]
 8108174:	681b      	ldr	r3, [r3, #0]
 8108176:	f003 0304 	and.w	r3, r3, #4
 810817a:	2b04      	cmp	r3, #4
 810817c:	d149      	bne.n	8108212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810817e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8108182:	9300      	str	r3, [sp, #0]
 8108184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8108186:	2200      	movs	r2, #0
 8108188:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810818c:	6878      	ldr	r0, [r7, #4]
 810818e:	f000 f857 	bl	8108240 <UART_WaitOnFlagUntilTimeout>
 8108192:	4603      	mov	r3, r0
 8108194:	2b00      	cmp	r3, #0
 8108196:	d03c      	beq.n	8108212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108198:	687b      	ldr	r3, [r7, #4]
 810819a:	681b      	ldr	r3, [r3, #0]
 810819c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810819e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81081a0:	e853 3f00 	ldrex	r3, [r3]
 81081a4:	623b      	str	r3, [r7, #32]
   return(result);
 81081a6:	6a3b      	ldr	r3, [r7, #32]
 81081a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81081ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81081ae:	687b      	ldr	r3, [r7, #4]
 81081b0:	681b      	ldr	r3, [r3, #0]
 81081b2:	461a      	mov	r2, r3
 81081b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81081b6:	633b      	str	r3, [r7, #48]	@ 0x30
 81081b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81081ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81081bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81081be:	e841 2300 	strex	r3, r2, [r1]
 81081c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 81081c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81081c6:	2b00      	cmp	r3, #0
 81081c8:	d1e6      	bne.n	8108198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81081ca:	687b      	ldr	r3, [r7, #4]
 81081cc:	681b      	ldr	r3, [r3, #0]
 81081ce:	3308      	adds	r3, #8
 81081d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81081d2:	693b      	ldr	r3, [r7, #16]
 81081d4:	e853 3f00 	ldrex	r3, [r3]
 81081d8:	60fb      	str	r3, [r7, #12]
   return(result);
 81081da:	68fb      	ldr	r3, [r7, #12]
 81081dc:	f023 0301 	bic.w	r3, r3, #1
 81081e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 81081e2:	687b      	ldr	r3, [r7, #4]
 81081e4:	681b      	ldr	r3, [r3, #0]
 81081e6:	3308      	adds	r3, #8
 81081e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81081ea:	61fa      	str	r2, [r7, #28]
 81081ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81081ee:	69b9      	ldr	r1, [r7, #24]
 81081f0:	69fa      	ldr	r2, [r7, #28]
 81081f2:	e841 2300 	strex	r3, r2, [r1]
 81081f6:	617b      	str	r3, [r7, #20]
   return(result);
 81081f8:	697b      	ldr	r3, [r7, #20]
 81081fa:	2b00      	cmp	r3, #0
 81081fc:	d1e5      	bne.n	81081ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81081fe:	687b      	ldr	r3, [r7, #4]
 8108200:	2220      	movs	r2, #32
 8108202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	2200      	movs	r2, #0
 810820a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810820e:	2303      	movs	r3, #3
 8108210:	e012      	b.n	8108238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8108212:	687b      	ldr	r3, [r7, #4]
 8108214:	2220      	movs	r2, #32
 8108216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	2220      	movs	r2, #32
 810821e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8108222:	687b      	ldr	r3, [r7, #4]
 8108224:	2200      	movs	r2, #0
 8108226:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8108228:	687b      	ldr	r3, [r7, #4]
 810822a:	2200      	movs	r2, #0
 810822c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810822e:	687b      	ldr	r3, [r7, #4]
 8108230:	2200      	movs	r2, #0
 8108232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8108236:	2300      	movs	r3, #0
}
 8108238:	4618      	mov	r0, r3
 810823a:	3758      	adds	r7, #88	@ 0x58
 810823c:	46bd      	mov	sp, r7
 810823e:	bd80      	pop	{r7, pc}

08108240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8108240:	b580      	push	{r7, lr}
 8108242:	b084      	sub	sp, #16
 8108244:	af00      	add	r7, sp, #0
 8108246:	60f8      	str	r0, [r7, #12]
 8108248:	60b9      	str	r1, [r7, #8]
 810824a:	603b      	str	r3, [r7, #0]
 810824c:	4613      	mov	r3, r2
 810824e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8108250:	e04f      	b.n	81082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8108252:	69bb      	ldr	r3, [r7, #24]
 8108254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108258:	d04b      	beq.n	81082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810825a:	f7f9 fb33 	bl	81018c4 <HAL_GetTick>
 810825e:	4602      	mov	r2, r0
 8108260:	683b      	ldr	r3, [r7, #0]
 8108262:	1ad3      	subs	r3, r2, r3
 8108264:	69ba      	ldr	r2, [r7, #24]
 8108266:	429a      	cmp	r2, r3
 8108268:	d302      	bcc.n	8108270 <UART_WaitOnFlagUntilTimeout+0x30>
 810826a:	69bb      	ldr	r3, [r7, #24]
 810826c:	2b00      	cmp	r3, #0
 810826e:	d101      	bne.n	8108274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8108270:	2303      	movs	r3, #3
 8108272:	e04e      	b.n	8108312 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8108274:	68fb      	ldr	r3, [r7, #12]
 8108276:	681b      	ldr	r3, [r3, #0]
 8108278:	681b      	ldr	r3, [r3, #0]
 810827a:	f003 0304 	and.w	r3, r3, #4
 810827e:	2b00      	cmp	r3, #0
 8108280:	d037      	beq.n	81082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8108282:	68bb      	ldr	r3, [r7, #8]
 8108284:	2b80      	cmp	r3, #128	@ 0x80
 8108286:	d034      	beq.n	81082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8108288:	68bb      	ldr	r3, [r7, #8]
 810828a:	2b40      	cmp	r3, #64	@ 0x40
 810828c:	d031      	beq.n	81082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810828e:	68fb      	ldr	r3, [r7, #12]
 8108290:	681b      	ldr	r3, [r3, #0]
 8108292:	69db      	ldr	r3, [r3, #28]
 8108294:	f003 0308 	and.w	r3, r3, #8
 8108298:	2b08      	cmp	r3, #8
 810829a:	d110      	bne.n	81082be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810829c:	68fb      	ldr	r3, [r7, #12]
 810829e:	681b      	ldr	r3, [r3, #0]
 81082a0:	2208      	movs	r2, #8
 81082a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81082a4:	68f8      	ldr	r0, [r7, #12]
 81082a6:	f000 f838 	bl	810831a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 81082aa:	68fb      	ldr	r3, [r7, #12]
 81082ac:	2208      	movs	r2, #8
 81082ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81082b2:	68fb      	ldr	r3, [r7, #12]
 81082b4:	2200      	movs	r2, #0
 81082b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 81082ba:	2301      	movs	r3, #1
 81082bc:	e029      	b.n	8108312 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81082be:	68fb      	ldr	r3, [r7, #12]
 81082c0:	681b      	ldr	r3, [r3, #0]
 81082c2:	69db      	ldr	r3, [r3, #28]
 81082c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81082c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81082cc:	d111      	bne.n	81082f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81082ce:	68fb      	ldr	r3, [r7, #12]
 81082d0:	681b      	ldr	r3, [r3, #0]
 81082d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81082d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81082d8:	68f8      	ldr	r0, [r7, #12]
 81082da:	f000 f81e 	bl	810831a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81082de:	68fb      	ldr	r3, [r7, #12]
 81082e0:	2220      	movs	r2, #32
 81082e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81082e6:	68fb      	ldr	r3, [r7, #12]
 81082e8:	2200      	movs	r2, #0
 81082ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81082ee:	2303      	movs	r3, #3
 81082f0:	e00f      	b.n	8108312 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81082f2:	68fb      	ldr	r3, [r7, #12]
 81082f4:	681b      	ldr	r3, [r3, #0]
 81082f6:	69da      	ldr	r2, [r3, #28]
 81082f8:	68bb      	ldr	r3, [r7, #8]
 81082fa:	4013      	ands	r3, r2
 81082fc:	68ba      	ldr	r2, [r7, #8]
 81082fe:	429a      	cmp	r2, r3
 8108300:	bf0c      	ite	eq
 8108302:	2301      	moveq	r3, #1
 8108304:	2300      	movne	r3, #0
 8108306:	b2db      	uxtb	r3, r3
 8108308:	461a      	mov	r2, r3
 810830a:	79fb      	ldrb	r3, [r7, #7]
 810830c:	429a      	cmp	r2, r3
 810830e:	d0a0      	beq.n	8108252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8108310:	2300      	movs	r3, #0
}
 8108312:	4618      	mov	r0, r3
 8108314:	3710      	adds	r7, #16
 8108316:	46bd      	mov	sp, r7
 8108318:	bd80      	pop	{r7, pc}

0810831a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810831a:	b480      	push	{r7}
 810831c:	b095      	sub	sp, #84	@ 0x54
 810831e:	af00      	add	r7, sp, #0
 8108320:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8108322:	687b      	ldr	r3, [r7, #4]
 8108324:	681b      	ldr	r3, [r3, #0]
 8108326:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8108328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810832a:	e853 3f00 	ldrex	r3, [r3]
 810832e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8108330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8108332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8108336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8108338:	687b      	ldr	r3, [r7, #4]
 810833a:	681b      	ldr	r3, [r3, #0]
 810833c:	461a      	mov	r2, r3
 810833e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8108340:	643b      	str	r3, [r7, #64]	@ 0x40
 8108342:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8108344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8108346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8108348:	e841 2300 	strex	r3, r2, [r1]
 810834c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8108350:	2b00      	cmp	r3, #0
 8108352:	d1e6      	bne.n	8108322 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8108354:	687b      	ldr	r3, [r7, #4]
 8108356:	681b      	ldr	r3, [r3, #0]
 8108358:	3308      	adds	r3, #8
 810835a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810835c:	6a3b      	ldr	r3, [r7, #32]
 810835e:	e853 3f00 	ldrex	r3, [r3]
 8108362:	61fb      	str	r3, [r7, #28]
   return(result);
 8108364:	69fb      	ldr	r3, [r7, #28]
 8108366:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810836a:	f023 0301 	bic.w	r3, r3, #1
 810836e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8108370:	687b      	ldr	r3, [r7, #4]
 8108372:	681b      	ldr	r3, [r3, #0]
 8108374:	3308      	adds	r3, #8
 8108376:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8108378:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810837a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810837c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810837e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8108380:	e841 2300 	strex	r3, r2, [r1]
 8108384:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8108386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108388:	2b00      	cmp	r3, #0
 810838a:	d1e3      	bne.n	8108354 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108390:	2b01      	cmp	r3, #1
 8108392:	d118      	bne.n	81083c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8108394:	687b      	ldr	r3, [r7, #4]
 8108396:	681b      	ldr	r3, [r3, #0]
 8108398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810839a:	68fb      	ldr	r3, [r7, #12]
 810839c:	e853 3f00 	ldrex	r3, [r3]
 81083a0:	60bb      	str	r3, [r7, #8]
   return(result);
 81083a2:	68bb      	ldr	r3, [r7, #8]
 81083a4:	f023 0310 	bic.w	r3, r3, #16
 81083a8:	647b      	str	r3, [r7, #68]	@ 0x44
 81083aa:	687b      	ldr	r3, [r7, #4]
 81083ac:	681b      	ldr	r3, [r3, #0]
 81083ae:	461a      	mov	r2, r3
 81083b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81083b2:	61bb      	str	r3, [r7, #24]
 81083b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81083b6:	6979      	ldr	r1, [r7, #20]
 81083b8:	69ba      	ldr	r2, [r7, #24]
 81083ba:	e841 2300 	strex	r3, r2, [r1]
 81083be:	613b      	str	r3, [r7, #16]
   return(result);
 81083c0:	693b      	ldr	r3, [r7, #16]
 81083c2:	2b00      	cmp	r3, #0
 81083c4:	d1e6      	bne.n	8108394 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81083c6:	687b      	ldr	r3, [r7, #4]
 81083c8:	2220      	movs	r2, #32
 81083ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81083ce:	687b      	ldr	r3, [r7, #4]
 81083d0:	2200      	movs	r2, #0
 81083d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81083d4:	687b      	ldr	r3, [r7, #4]
 81083d6:	2200      	movs	r2, #0
 81083d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81083da:	bf00      	nop
 81083dc:	3754      	adds	r7, #84	@ 0x54
 81083de:	46bd      	mov	sp, r7
 81083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81083e4:	4770      	bx	lr
	...

081083e8 <malloc>:
 81083e8:	4b02      	ldr	r3, [pc, #8]	@ (81083f4 <malloc+0xc>)
 81083ea:	4601      	mov	r1, r0
 81083ec:	6818      	ldr	r0, [r3, #0]
 81083ee:	f000 b82d 	b.w	810844c <_malloc_r>
 81083f2:	bf00      	nop
 81083f4:	20000050 	.word	0x20000050

081083f8 <free>:
 81083f8:	4b02      	ldr	r3, [pc, #8]	@ (8108404 <free+0xc>)
 81083fa:	4601      	mov	r1, r0
 81083fc:	6818      	ldr	r0, [r3, #0]
 81083fe:	f000 baf5 	b.w	81089ec <_free_r>
 8108402:	bf00      	nop
 8108404:	20000050 	.word	0x20000050

08108408 <sbrk_aligned>:
 8108408:	b570      	push	{r4, r5, r6, lr}
 810840a:	4e0f      	ldr	r6, [pc, #60]	@ (8108448 <sbrk_aligned+0x40>)
 810840c:	460c      	mov	r4, r1
 810840e:	4605      	mov	r5, r0
 8108410:	6831      	ldr	r1, [r6, #0]
 8108412:	b911      	cbnz	r1, 810841a <sbrk_aligned+0x12>
 8108414:	f000 fa8e 	bl	8108934 <_sbrk_r>
 8108418:	6030      	str	r0, [r6, #0]
 810841a:	4621      	mov	r1, r4
 810841c:	4628      	mov	r0, r5
 810841e:	f000 fa89 	bl	8108934 <_sbrk_r>
 8108422:	1c43      	adds	r3, r0, #1
 8108424:	d103      	bne.n	810842e <sbrk_aligned+0x26>
 8108426:	f04f 34ff 	mov.w	r4, #4294967295
 810842a:	4620      	mov	r0, r4
 810842c:	bd70      	pop	{r4, r5, r6, pc}
 810842e:	1cc4      	adds	r4, r0, #3
 8108430:	f024 0403 	bic.w	r4, r4, #3
 8108434:	42a0      	cmp	r0, r4
 8108436:	d0f8      	beq.n	810842a <sbrk_aligned+0x22>
 8108438:	1a21      	subs	r1, r4, r0
 810843a:	4628      	mov	r0, r5
 810843c:	f000 fa7a 	bl	8108934 <_sbrk_r>
 8108440:	3001      	adds	r0, #1
 8108442:	d1f2      	bne.n	810842a <sbrk_aligned+0x22>
 8108444:	e7ef      	b.n	8108426 <sbrk_aligned+0x1e>
 8108446:	bf00      	nop
 8108448:	2000024c 	.word	0x2000024c

0810844c <_malloc_r>:
 810844c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108450:	1ccd      	adds	r5, r1, #3
 8108452:	4606      	mov	r6, r0
 8108454:	f025 0503 	bic.w	r5, r5, #3
 8108458:	3508      	adds	r5, #8
 810845a:	2d0c      	cmp	r5, #12
 810845c:	bf38      	it	cc
 810845e:	250c      	movcc	r5, #12
 8108460:	2d00      	cmp	r5, #0
 8108462:	db01      	blt.n	8108468 <_malloc_r+0x1c>
 8108464:	42a9      	cmp	r1, r5
 8108466:	d904      	bls.n	8108472 <_malloc_r+0x26>
 8108468:	230c      	movs	r3, #12
 810846a:	6033      	str	r3, [r6, #0]
 810846c:	2000      	movs	r0, #0
 810846e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8108548 <_malloc_r+0xfc>
 8108476:	f000 f869 	bl	810854c <__malloc_lock>
 810847a:	f8d8 3000 	ldr.w	r3, [r8]
 810847e:	461c      	mov	r4, r3
 8108480:	bb44      	cbnz	r4, 81084d4 <_malloc_r+0x88>
 8108482:	4629      	mov	r1, r5
 8108484:	4630      	mov	r0, r6
 8108486:	f7ff ffbf 	bl	8108408 <sbrk_aligned>
 810848a:	1c43      	adds	r3, r0, #1
 810848c:	4604      	mov	r4, r0
 810848e:	d158      	bne.n	8108542 <_malloc_r+0xf6>
 8108490:	f8d8 4000 	ldr.w	r4, [r8]
 8108494:	4627      	mov	r7, r4
 8108496:	2f00      	cmp	r7, #0
 8108498:	d143      	bne.n	8108522 <_malloc_r+0xd6>
 810849a:	2c00      	cmp	r4, #0
 810849c:	d04b      	beq.n	8108536 <_malloc_r+0xea>
 810849e:	6823      	ldr	r3, [r4, #0]
 81084a0:	4639      	mov	r1, r7
 81084a2:	4630      	mov	r0, r6
 81084a4:	eb04 0903 	add.w	r9, r4, r3
 81084a8:	f000 fa44 	bl	8108934 <_sbrk_r>
 81084ac:	4581      	cmp	r9, r0
 81084ae:	d142      	bne.n	8108536 <_malloc_r+0xea>
 81084b0:	6821      	ldr	r1, [r4, #0]
 81084b2:	4630      	mov	r0, r6
 81084b4:	1a6d      	subs	r5, r5, r1
 81084b6:	4629      	mov	r1, r5
 81084b8:	f7ff ffa6 	bl	8108408 <sbrk_aligned>
 81084bc:	3001      	adds	r0, #1
 81084be:	d03a      	beq.n	8108536 <_malloc_r+0xea>
 81084c0:	6823      	ldr	r3, [r4, #0]
 81084c2:	442b      	add	r3, r5
 81084c4:	6023      	str	r3, [r4, #0]
 81084c6:	f8d8 3000 	ldr.w	r3, [r8]
 81084ca:	685a      	ldr	r2, [r3, #4]
 81084cc:	bb62      	cbnz	r2, 8108528 <_malloc_r+0xdc>
 81084ce:	f8c8 7000 	str.w	r7, [r8]
 81084d2:	e00f      	b.n	81084f4 <_malloc_r+0xa8>
 81084d4:	6822      	ldr	r2, [r4, #0]
 81084d6:	1b52      	subs	r2, r2, r5
 81084d8:	d420      	bmi.n	810851c <_malloc_r+0xd0>
 81084da:	2a0b      	cmp	r2, #11
 81084dc:	d917      	bls.n	810850e <_malloc_r+0xc2>
 81084de:	1961      	adds	r1, r4, r5
 81084e0:	42a3      	cmp	r3, r4
 81084e2:	6025      	str	r5, [r4, #0]
 81084e4:	bf18      	it	ne
 81084e6:	6059      	strne	r1, [r3, #4]
 81084e8:	6863      	ldr	r3, [r4, #4]
 81084ea:	bf08      	it	eq
 81084ec:	f8c8 1000 	streq.w	r1, [r8]
 81084f0:	5162      	str	r2, [r4, r5]
 81084f2:	604b      	str	r3, [r1, #4]
 81084f4:	4630      	mov	r0, r6
 81084f6:	f000 f82f 	bl	8108558 <__malloc_unlock>
 81084fa:	f104 000b 	add.w	r0, r4, #11
 81084fe:	1d23      	adds	r3, r4, #4
 8108500:	f020 0007 	bic.w	r0, r0, #7
 8108504:	1ac2      	subs	r2, r0, r3
 8108506:	bf1c      	itt	ne
 8108508:	1a1b      	subne	r3, r3, r0
 810850a:	50a3      	strne	r3, [r4, r2]
 810850c:	e7af      	b.n	810846e <_malloc_r+0x22>
 810850e:	6862      	ldr	r2, [r4, #4]
 8108510:	42a3      	cmp	r3, r4
 8108512:	bf0c      	ite	eq
 8108514:	f8c8 2000 	streq.w	r2, [r8]
 8108518:	605a      	strne	r2, [r3, #4]
 810851a:	e7eb      	b.n	81084f4 <_malloc_r+0xa8>
 810851c:	4623      	mov	r3, r4
 810851e:	6864      	ldr	r4, [r4, #4]
 8108520:	e7ae      	b.n	8108480 <_malloc_r+0x34>
 8108522:	463c      	mov	r4, r7
 8108524:	687f      	ldr	r7, [r7, #4]
 8108526:	e7b6      	b.n	8108496 <_malloc_r+0x4a>
 8108528:	461a      	mov	r2, r3
 810852a:	685b      	ldr	r3, [r3, #4]
 810852c:	42a3      	cmp	r3, r4
 810852e:	d1fb      	bne.n	8108528 <_malloc_r+0xdc>
 8108530:	2300      	movs	r3, #0
 8108532:	6053      	str	r3, [r2, #4]
 8108534:	e7de      	b.n	81084f4 <_malloc_r+0xa8>
 8108536:	230c      	movs	r3, #12
 8108538:	4630      	mov	r0, r6
 810853a:	6033      	str	r3, [r6, #0]
 810853c:	f000 f80c 	bl	8108558 <__malloc_unlock>
 8108540:	e794      	b.n	810846c <_malloc_r+0x20>
 8108542:	6005      	str	r5, [r0, #0]
 8108544:	e7d6      	b.n	81084f4 <_malloc_r+0xa8>
 8108546:	bf00      	nop
 8108548:	20000250 	.word	0x20000250

0810854c <__malloc_lock>:
 810854c:	4801      	ldr	r0, [pc, #4]	@ (8108554 <__malloc_lock+0x8>)
 810854e:	f000 ba3e 	b.w	81089ce <__retarget_lock_acquire_recursive>
 8108552:	bf00      	nop
 8108554:	20000394 	.word	0x20000394

08108558 <__malloc_unlock>:
 8108558:	4801      	ldr	r0, [pc, #4]	@ (8108560 <__malloc_unlock+0x8>)
 810855a:	f000 ba39 	b.w	81089d0 <__retarget_lock_release_recursive>
 810855e:	bf00      	nop
 8108560:	20000394 	.word	0x20000394

08108564 <std>:
 8108564:	2300      	movs	r3, #0
 8108566:	b510      	push	{r4, lr}
 8108568:	4604      	mov	r4, r0
 810856a:	6083      	str	r3, [r0, #8]
 810856c:	8181      	strh	r1, [r0, #12]
 810856e:	4619      	mov	r1, r3
 8108570:	6643      	str	r3, [r0, #100]	@ 0x64
 8108572:	81c2      	strh	r2, [r0, #14]
 8108574:	2208      	movs	r2, #8
 8108576:	6183      	str	r3, [r0, #24]
 8108578:	e9c0 3300 	strd	r3, r3, [r0]
 810857c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8108580:	305c      	adds	r0, #92	@ 0x5c
 8108582:	f000 f99b 	bl	81088bc <memset>
 8108586:	4b0d      	ldr	r3, [pc, #52]	@ (81085bc <std+0x58>)
 8108588:	6224      	str	r4, [r4, #32]
 810858a:	6263      	str	r3, [r4, #36]	@ 0x24
 810858c:	4b0c      	ldr	r3, [pc, #48]	@ (81085c0 <std+0x5c>)
 810858e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8108590:	4b0c      	ldr	r3, [pc, #48]	@ (81085c4 <std+0x60>)
 8108592:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8108594:	4b0c      	ldr	r3, [pc, #48]	@ (81085c8 <std+0x64>)
 8108596:	6323      	str	r3, [r4, #48]	@ 0x30
 8108598:	4b0c      	ldr	r3, [pc, #48]	@ (81085cc <std+0x68>)
 810859a:	429c      	cmp	r4, r3
 810859c:	d006      	beq.n	81085ac <std+0x48>
 810859e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 81085a2:	4294      	cmp	r4, r2
 81085a4:	d002      	beq.n	81085ac <std+0x48>
 81085a6:	33d0      	adds	r3, #208	@ 0xd0
 81085a8:	429c      	cmp	r4, r3
 81085aa:	d105      	bne.n	81085b8 <std+0x54>
 81085ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 81085b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81085b4:	f000 ba0a 	b.w	81089cc <__retarget_lock_init_recursive>
 81085b8:	bd10      	pop	{r4, pc}
 81085ba:	bf00      	nop
 81085bc:	0810870d 	.word	0x0810870d
 81085c0:	0810872f 	.word	0x0810872f
 81085c4:	08108767 	.word	0x08108767
 81085c8:	0810878b 	.word	0x0810878b
 81085cc:	20000254 	.word	0x20000254

081085d0 <stdio_exit_handler>:
 81085d0:	4a02      	ldr	r2, [pc, #8]	@ (81085dc <stdio_exit_handler+0xc>)
 81085d2:	4903      	ldr	r1, [pc, #12]	@ (81085e0 <stdio_exit_handler+0x10>)
 81085d4:	4803      	ldr	r0, [pc, #12]	@ (81085e4 <stdio_exit_handler+0x14>)
 81085d6:	f000 b869 	b.w	81086ac <_fwalk_sglue>
 81085da:	bf00      	nop
 81085dc:	20000044 	.word	0x20000044
 81085e0:	08109131 	.word	0x08109131
 81085e4:	20000054 	.word	0x20000054

081085e8 <cleanup_stdio>:
 81085e8:	6841      	ldr	r1, [r0, #4]
 81085ea:	4b0c      	ldr	r3, [pc, #48]	@ (810861c <cleanup_stdio+0x34>)
 81085ec:	4299      	cmp	r1, r3
 81085ee:	b510      	push	{r4, lr}
 81085f0:	4604      	mov	r4, r0
 81085f2:	d001      	beq.n	81085f8 <cleanup_stdio+0x10>
 81085f4:	f000 fd9c 	bl	8109130 <_fflush_r>
 81085f8:	68a1      	ldr	r1, [r4, #8]
 81085fa:	4b09      	ldr	r3, [pc, #36]	@ (8108620 <cleanup_stdio+0x38>)
 81085fc:	4299      	cmp	r1, r3
 81085fe:	d002      	beq.n	8108606 <cleanup_stdio+0x1e>
 8108600:	4620      	mov	r0, r4
 8108602:	f000 fd95 	bl	8109130 <_fflush_r>
 8108606:	68e1      	ldr	r1, [r4, #12]
 8108608:	4b06      	ldr	r3, [pc, #24]	@ (8108624 <cleanup_stdio+0x3c>)
 810860a:	4299      	cmp	r1, r3
 810860c:	d004      	beq.n	8108618 <cleanup_stdio+0x30>
 810860e:	4620      	mov	r0, r4
 8108610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108614:	f000 bd8c 	b.w	8109130 <_fflush_r>
 8108618:	bd10      	pop	{r4, pc}
 810861a:	bf00      	nop
 810861c:	20000254 	.word	0x20000254
 8108620:	200002bc 	.word	0x200002bc
 8108624:	20000324 	.word	0x20000324

08108628 <global_stdio_init.part.0>:
 8108628:	b510      	push	{r4, lr}
 810862a:	4b0b      	ldr	r3, [pc, #44]	@ (8108658 <global_stdio_init.part.0+0x30>)
 810862c:	2104      	movs	r1, #4
 810862e:	4c0b      	ldr	r4, [pc, #44]	@ (810865c <global_stdio_init.part.0+0x34>)
 8108630:	4a0b      	ldr	r2, [pc, #44]	@ (8108660 <global_stdio_init.part.0+0x38>)
 8108632:	4620      	mov	r0, r4
 8108634:	601a      	str	r2, [r3, #0]
 8108636:	2200      	movs	r2, #0
 8108638:	f7ff ff94 	bl	8108564 <std>
 810863c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8108640:	2201      	movs	r2, #1
 8108642:	2109      	movs	r1, #9
 8108644:	f7ff ff8e 	bl	8108564 <std>
 8108648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 810864c:	2202      	movs	r2, #2
 810864e:	2112      	movs	r1, #18
 8108650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108654:	f7ff bf86 	b.w	8108564 <std>
 8108658:	2000038c 	.word	0x2000038c
 810865c:	20000254 	.word	0x20000254
 8108660:	081085d1 	.word	0x081085d1

08108664 <__sfp_lock_acquire>:
 8108664:	4801      	ldr	r0, [pc, #4]	@ (810866c <__sfp_lock_acquire+0x8>)
 8108666:	f000 b9b2 	b.w	81089ce <__retarget_lock_acquire_recursive>
 810866a:	bf00      	nop
 810866c:	20000395 	.word	0x20000395

08108670 <__sfp_lock_release>:
 8108670:	4801      	ldr	r0, [pc, #4]	@ (8108678 <__sfp_lock_release+0x8>)
 8108672:	f000 b9ad 	b.w	81089d0 <__retarget_lock_release_recursive>
 8108676:	bf00      	nop
 8108678:	20000395 	.word	0x20000395

0810867c <__sinit>:
 810867c:	b510      	push	{r4, lr}
 810867e:	4604      	mov	r4, r0
 8108680:	f7ff fff0 	bl	8108664 <__sfp_lock_acquire>
 8108684:	6a23      	ldr	r3, [r4, #32]
 8108686:	b11b      	cbz	r3, 8108690 <__sinit+0x14>
 8108688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810868c:	f7ff bff0 	b.w	8108670 <__sfp_lock_release>
 8108690:	4b04      	ldr	r3, [pc, #16]	@ (81086a4 <__sinit+0x28>)
 8108692:	6223      	str	r3, [r4, #32]
 8108694:	4b04      	ldr	r3, [pc, #16]	@ (81086a8 <__sinit+0x2c>)
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	2b00      	cmp	r3, #0
 810869a:	d1f5      	bne.n	8108688 <__sinit+0xc>
 810869c:	f7ff ffc4 	bl	8108628 <global_stdio_init.part.0>
 81086a0:	e7f2      	b.n	8108688 <__sinit+0xc>
 81086a2:	bf00      	nop
 81086a4:	081085e9 	.word	0x081085e9
 81086a8:	2000038c 	.word	0x2000038c

081086ac <_fwalk_sglue>:
 81086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81086b0:	4607      	mov	r7, r0
 81086b2:	4688      	mov	r8, r1
 81086b4:	4614      	mov	r4, r2
 81086b6:	2600      	movs	r6, #0
 81086b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81086bc:	f1b9 0901 	subs.w	r9, r9, #1
 81086c0:	d505      	bpl.n	81086ce <_fwalk_sglue+0x22>
 81086c2:	6824      	ldr	r4, [r4, #0]
 81086c4:	2c00      	cmp	r4, #0
 81086c6:	d1f7      	bne.n	81086b8 <_fwalk_sglue+0xc>
 81086c8:	4630      	mov	r0, r6
 81086ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81086ce:	89ab      	ldrh	r3, [r5, #12]
 81086d0:	2b01      	cmp	r3, #1
 81086d2:	d907      	bls.n	81086e4 <_fwalk_sglue+0x38>
 81086d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81086d8:	3301      	adds	r3, #1
 81086da:	d003      	beq.n	81086e4 <_fwalk_sglue+0x38>
 81086dc:	4629      	mov	r1, r5
 81086de:	4638      	mov	r0, r7
 81086e0:	47c0      	blx	r8
 81086e2:	4306      	orrs	r6, r0
 81086e4:	3568      	adds	r5, #104	@ 0x68
 81086e6:	e7e9      	b.n	81086bc <_fwalk_sglue+0x10>

081086e8 <iprintf>:
 81086e8:	b40f      	push	{r0, r1, r2, r3}
 81086ea:	b507      	push	{r0, r1, r2, lr}
 81086ec:	4906      	ldr	r1, [pc, #24]	@ (8108708 <iprintf+0x20>)
 81086ee:	ab04      	add	r3, sp, #16
 81086f0:	6808      	ldr	r0, [r1, #0]
 81086f2:	f853 2b04 	ldr.w	r2, [r3], #4
 81086f6:	6881      	ldr	r1, [r0, #8]
 81086f8:	9301      	str	r3, [sp, #4]
 81086fa:	f000 f9eb 	bl	8108ad4 <_vfiprintf_r>
 81086fe:	b003      	add	sp, #12
 8108700:	f85d eb04 	ldr.w	lr, [sp], #4
 8108704:	b004      	add	sp, #16
 8108706:	4770      	bx	lr
 8108708:	20000050 	.word	0x20000050

0810870c <__sread>:
 810870c:	b510      	push	{r4, lr}
 810870e:	460c      	mov	r4, r1
 8108710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108714:	f000 f8fc 	bl	8108910 <_read_r>
 8108718:	2800      	cmp	r0, #0
 810871a:	bfab      	itete	ge
 810871c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 810871e:	89a3      	ldrhlt	r3, [r4, #12]
 8108720:	181b      	addge	r3, r3, r0
 8108722:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8108726:	bfac      	ite	ge
 8108728:	6563      	strge	r3, [r4, #84]	@ 0x54
 810872a:	81a3      	strhlt	r3, [r4, #12]
 810872c:	bd10      	pop	{r4, pc}

0810872e <__swrite>:
 810872e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108732:	461f      	mov	r7, r3
 8108734:	898b      	ldrh	r3, [r1, #12]
 8108736:	4605      	mov	r5, r0
 8108738:	460c      	mov	r4, r1
 810873a:	05db      	lsls	r3, r3, #23
 810873c:	4616      	mov	r6, r2
 810873e:	d505      	bpl.n	810874c <__swrite+0x1e>
 8108740:	2302      	movs	r3, #2
 8108742:	2200      	movs	r2, #0
 8108744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108748:	f000 f8d0 	bl	81088ec <_lseek_r>
 810874c:	89a3      	ldrh	r3, [r4, #12]
 810874e:	4632      	mov	r2, r6
 8108750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108754:	4628      	mov	r0, r5
 8108756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810875a:	81a3      	strh	r3, [r4, #12]
 810875c:	463b      	mov	r3, r7
 810875e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108762:	f000 b8f7 	b.w	8108954 <_write_r>

08108766 <__sseek>:
 8108766:	b510      	push	{r4, lr}
 8108768:	460c      	mov	r4, r1
 810876a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810876e:	f000 f8bd 	bl	81088ec <_lseek_r>
 8108772:	1c43      	adds	r3, r0, #1
 8108774:	89a3      	ldrh	r3, [r4, #12]
 8108776:	bf15      	itete	ne
 8108778:	6560      	strne	r0, [r4, #84]	@ 0x54
 810877a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 810877e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8108782:	81a3      	strheq	r3, [r4, #12]
 8108784:	bf18      	it	ne
 8108786:	81a3      	strhne	r3, [r4, #12]
 8108788:	bd10      	pop	{r4, pc}

0810878a <__sclose>:
 810878a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810878e:	f000 b89d 	b.w	81088cc <_close_r>

08108792 <__swbuf_r>:
 8108792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108794:	460e      	mov	r6, r1
 8108796:	4614      	mov	r4, r2
 8108798:	4605      	mov	r5, r0
 810879a:	b118      	cbz	r0, 81087a4 <__swbuf_r+0x12>
 810879c:	6a03      	ldr	r3, [r0, #32]
 810879e:	b90b      	cbnz	r3, 81087a4 <__swbuf_r+0x12>
 81087a0:	f7ff ff6c 	bl	810867c <__sinit>
 81087a4:	69a3      	ldr	r3, [r4, #24]
 81087a6:	60a3      	str	r3, [r4, #8]
 81087a8:	89a3      	ldrh	r3, [r4, #12]
 81087aa:	071a      	lsls	r2, r3, #28
 81087ac:	d501      	bpl.n	81087b2 <__swbuf_r+0x20>
 81087ae:	6923      	ldr	r3, [r4, #16]
 81087b0:	b943      	cbnz	r3, 81087c4 <__swbuf_r+0x32>
 81087b2:	4621      	mov	r1, r4
 81087b4:	4628      	mov	r0, r5
 81087b6:	f000 f82b 	bl	8108810 <__swsetup_r>
 81087ba:	b118      	cbz	r0, 81087c4 <__swbuf_r+0x32>
 81087bc:	f04f 37ff 	mov.w	r7, #4294967295
 81087c0:	4638      	mov	r0, r7
 81087c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81087c4:	6823      	ldr	r3, [r4, #0]
 81087c6:	b2f6      	uxtb	r6, r6
 81087c8:	6922      	ldr	r2, [r4, #16]
 81087ca:	4637      	mov	r7, r6
 81087cc:	1a98      	subs	r0, r3, r2
 81087ce:	6963      	ldr	r3, [r4, #20]
 81087d0:	4283      	cmp	r3, r0
 81087d2:	dc05      	bgt.n	81087e0 <__swbuf_r+0x4e>
 81087d4:	4621      	mov	r1, r4
 81087d6:	4628      	mov	r0, r5
 81087d8:	f000 fcaa 	bl	8109130 <_fflush_r>
 81087dc:	2800      	cmp	r0, #0
 81087de:	d1ed      	bne.n	81087bc <__swbuf_r+0x2a>
 81087e0:	68a3      	ldr	r3, [r4, #8]
 81087e2:	3b01      	subs	r3, #1
 81087e4:	60a3      	str	r3, [r4, #8]
 81087e6:	6823      	ldr	r3, [r4, #0]
 81087e8:	1c5a      	adds	r2, r3, #1
 81087ea:	6022      	str	r2, [r4, #0]
 81087ec:	701e      	strb	r6, [r3, #0]
 81087ee:	1c43      	adds	r3, r0, #1
 81087f0:	6962      	ldr	r2, [r4, #20]
 81087f2:	429a      	cmp	r2, r3
 81087f4:	d004      	beq.n	8108800 <__swbuf_r+0x6e>
 81087f6:	89a3      	ldrh	r3, [r4, #12]
 81087f8:	07db      	lsls	r3, r3, #31
 81087fa:	d5e1      	bpl.n	81087c0 <__swbuf_r+0x2e>
 81087fc:	2e0a      	cmp	r6, #10
 81087fe:	d1df      	bne.n	81087c0 <__swbuf_r+0x2e>
 8108800:	4621      	mov	r1, r4
 8108802:	4628      	mov	r0, r5
 8108804:	f000 fc94 	bl	8109130 <_fflush_r>
 8108808:	2800      	cmp	r0, #0
 810880a:	d0d9      	beq.n	81087c0 <__swbuf_r+0x2e>
 810880c:	e7d6      	b.n	81087bc <__swbuf_r+0x2a>
	...

08108810 <__swsetup_r>:
 8108810:	b538      	push	{r3, r4, r5, lr}
 8108812:	4b29      	ldr	r3, [pc, #164]	@ (81088b8 <__swsetup_r+0xa8>)
 8108814:	4605      	mov	r5, r0
 8108816:	460c      	mov	r4, r1
 8108818:	6818      	ldr	r0, [r3, #0]
 810881a:	b118      	cbz	r0, 8108824 <__swsetup_r+0x14>
 810881c:	6a03      	ldr	r3, [r0, #32]
 810881e:	b90b      	cbnz	r3, 8108824 <__swsetup_r+0x14>
 8108820:	f7ff ff2c 	bl	810867c <__sinit>
 8108824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108828:	0719      	lsls	r1, r3, #28
 810882a:	d422      	bmi.n	8108872 <__swsetup_r+0x62>
 810882c:	06da      	lsls	r2, r3, #27
 810882e:	d407      	bmi.n	8108840 <__swsetup_r+0x30>
 8108830:	2209      	movs	r2, #9
 8108832:	602a      	str	r2, [r5, #0]
 8108834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108838:	f04f 30ff 	mov.w	r0, #4294967295
 810883c:	81a3      	strh	r3, [r4, #12]
 810883e:	e033      	b.n	81088a8 <__swsetup_r+0x98>
 8108840:	0758      	lsls	r0, r3, #29
 8108842:	d512      	bpl.n	810886a <__swsetup_r+0x5a>
 8108844:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8108846:	b141      	cbz	r1, 810885a <__swsetup_r+0x4a>
 8108848:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810884c:	4299      	cmp	r1, r3
 810884e:	d002      	beq.n	8108856 <__swsetup_r+0x46>
 8108850:	4628      	mov	r0, r5
 8108852:	f000 f8cb 	bl	81089ec <_free_r>
 8108856:	2300      	movs	r3, #0
 8108858:	6363      	str	r3, [r4, #52]	@ 0x34
 810885a:	89a3      	ldrh	r3, [r4, #12]
 810885c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8108860:	81a3      	strh	r3, [r4, #12]
 8108862:	2300      	movs	r3, #0
 8108864:	6063      	str	r3, [r4, #4]
 8108866:	6923      	ldr	r3, [r4, #16]
 8108868:	6023      	str	r3, [r4, #0]
 810886a:	89a3      	ldrh	r3, [r4, #12]
 810886c:	f043 0308 	orr.w	r3, r3, #8
 8108870:	81a3      	strh	r3, [r4, #12]
 8108872:	6923      	ldr	r3, [r4, #16]
 8108874:	b94b      	cbnz	r3, 810888a <__swsetup_r+0x7a>
 8108876:	89a3      	ldrh	r3, [r4, #12]
 8108878:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 810887c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108880:	d003      	beq.n	810888a <__swsetup_r+0x7a>
 8108882:	4621      	mov	r1, r4
 8108884:	4628      	mov	r0, r5
 8108886:	f000 fca0 	bl	81091ca <__smakebuf_r>
 810888a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810888e:	f013 0201 	ands.w	r2, r3, #1
 8108892:	d00a      	beq.n	81088aa <__swsetup_r+0x9a>
 8108894:	2200      	movs	r2, #0
 8108896:	60a2      	str	r2, [r4, #8]
 8108898:	6962      	ldr	r2, [r4, #20]
 810889a:	4252      	negs	r2, r2
 810889c:	61a2      	str	r2, [r4, #24]
 810889e:	6922      	ldr	r2, [r4, #16]
 81088a0:	b942      	cbnz	r2, 81088b4 <__swsetup_r+0xa4>
 81088a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 81088a6:	d1c5      	bne.n	8108834 <__swsetup_r+0x24>
 81088a8:	bd38      	pop	{r3, r4, r5, pc}
 81088aa:	0799      	lsls	r1, r3, #30
 81088ac:	bf58      	it	pl
 81088ae:	6962      	ldrpl	r2, [r4, #20]
 81088b0:	60a2      	str	r2, [r4, #8]
 81088b2:	e7f4      	b.n	810889e <__swsetup_r+0x8e>
 81088b4:	2000      	movs	r0, #0
 81088b6:	e7f7      	b.n	81088a8 <__swsetup_r+0x98>
 81088b8:	20000050 	.word	0x20000050

081088bc <memset>:
 81088bc:	4402      	add	r2, r0
 81088be:	4603      	mov	r3, r0
 81088c0:	4293      	cmp	r3, r2
 81088c2:	d100      	bne.n	81088c6 <memset+0xa>
 81088c4:	4770      	bx	lr
 81088c6:	f803 1b01 	strb.w	r1, [r3], #1
 81088ca:	e7f9      	b.n	81088c0 <memset+0x4>

081088cc <_close_r>:
 81088cc:	b538      	push	{r3, r4, r5, lr}
 81088ce:	2300      	movs	r3, #0
 81088d0:	4d05      	ldr	r5, [pc, #20]	@ (81088e8 <_close_r+0x1c>)
 81088d2:	4604      	mov	r4, r0
 81088d4:	4608      	mov	r0, r1
 81088d6:	602b      	str	r3, [r5, #0]
 81088d8:	f7f8 fc91 	bl	81011fe <_close>
 81088dc:	1c43      	adds	r3, r0, #1
 81088de:	d102      	bne.n	81088e6 <_close_r+0x1a>
 81088e0:	682b      	ldr	r3, [r5, #0]
 81088e2:	b103      	cbz	r3, 81088e6 <_close_r+0x1a>
 81088e4:	6023      	str	r3, [r4, #0]
 81088e6:	bd38      	pop	{r3, r4, r5, pc}
 81088e8:	20000390 	.word	0x20000390

081088ec <_lseek_r>:
 81088ec:	b538      	push	{r3, r4, r5, lr}
 81088ee:	4604      	mov	r4, r0
 81088f0:	4d06      	ldr	r5, [pc, #24]	@ (810890c <_lseek_r+0x20>)
 81088f2:	4608      	mov	r0, r1
 81088f4:	4611      	mov	r1, r2
 81088f6:	2200      	movs	r2, #0
 81088f8:	602a      	str	r2, [r5, #0]
 81088fa:	461a      	mov	r2, r3
 81088fc:	f7f8 fca6 	bl	810124c <_lseek>
 8108900:	1c43      	adds	r3, r0, #1
 8108902:	d102      	bne.n	810890a <_lseek_r+0x1e>
 8108904:	682b      	ldr	r3, [r5, #0]
 8108906:	b103      	cbz	r3, 810890a <_lseek_r+0x1e>
 8108908:	6023      	str	r3, [r4, #0]
 810890a:	bd38      	pop	{r3, r4, r5, pc}
 810890c:	20000390 	.word	0x20000390

08108910 <_read_r>:
 8108910:	b538      	push	{r3, r4, r5, lr}
 8108912:	4604      	mov	r4, r0
 8108914:	4d06      	ldr	r5, [pc, #24]	@ (8108930 <_read_r+0x20>)
 8108916:	4608      	mov	r0, r1
 8108918:	4611      	mov	r1, r2
 810891a:	2200      	movs	r2, #0
 810891c:	602a      	str	r2, [r5, #0]
 810891e:	461a      	mov	r2, r3
 8108920:	f7f8 fc34 	bl	810118c <_read>
 8108924:	1c43      	adds	r3, r0, #1
 8108926:	d102      	bne.n	810892e <_read_r+0x1e>
 8108928:	682b      	ldr	r3, [r5, #0]
 810892a:	b103      	cbz	r3, 810892e <_read_r+0x1e>
 810892c:	6023      	str	r3, [r4, #0]
 810892e:	bd38      	pop	{r3, r4, r5, pc}
 8108930:	20000390 	.word	0x20000390

08108934 <_sbrk_r>:
 8108934:	b538      	push	{r3, r4, r5, lr}
 8108936:	2300      	movs	r3, #0
 8108938:	4d05      	ldr	r5, [pc, #20]	@ (8108950 <_sbrk_r+0x1c>)
 810893a:	4604      	mov	r4, r0
 810893c:	4608      	mov	r0, r1
 810893e:	602b      	str	r3, [r5, #0]
 8108940:	f7f8 fc92 	bl	8101268 <_sbrk>
 8108944:	1c43      	adds	r3, r0, #1
 8108946:	d102      	bne.n	810894e <_sbrk_r+0x1a>
 8108948:	682b      	ldr	r3, [r5, #0]
 810894a:	b103      	cbz	r3, 810894e <_sbrk_r+0x1a>
 810894c:	6023      	str	r3, [r4, #0]
 810894e:	bd38      	pop	{r3, r4, r5, pc}
 8108950:	20000390 	.word	0x20000390

08108954 <_write_r>:
 8108954:	b538      	push	{r3, r4, r5, lr}
 8108956:	4604      	mov	r4, r0
 8108958:	4d06      	ldr	r5, [pc, #24]	@ (8108974 <_write_r+0x20>)
 810895a:	4608      	mov	r0, r1
 810895c:	4611      	mov	r1, r2
 810895e:	2200      	movs	r2, #0
 8108960:	602a      	str	r2, [r5, #0]
 8108962:	461a      	mov	r2, r3
 8108964:	f7f8 fc2f 	bl	81011c6 <_write>
 8108968:	1c43      	adds	r3, r0, #1
 810896a:	d102      	bne.n	8108972 <_write_r+0x1e>
 810896c:	682b      	ldr	r3, [r5, #0]
 810896e:	b103      	cbz	r3, 8108972 <_write_r+0x1e>
 8108970:	6023      	str	r3, [r4, #0]
 8108972:	bd38      	pop	{r3, r4, r5, pc}
 8108974:	20000390 	.word	0x20000390

08108978 <__errno>:
 8108978:	4b01      	ldr	r3, [pc, #4]	@ (8108980 <__errno+0x8>)
 810897a:	6818      	ldr	r0, [r3, #0]
 810897c:	4770      	bx	lr
 810897e:	bf00      	nop
 8108980:	20000050 	.word	0x20000050

08108984 <__libc_init_array>:
 8108984:	b570      	push	{r4, r5, r6, lr}
 8108986:	4d0d      	ldr	r5, [pc, #52]	@ (81089bc <__libc_init_array+0x38>)
 8108988:	2600      	movs	r6, #0
 810898a:	4c0d      	ldr	r4, [pc, #52]	@ (81089c0 <__libc_init_array+0x3c>)
 810898c:	1b64      	subs	r4, r4, r5
 810898e:	10a4      	asrs	r4, r4, #2
 8108990:	42a6      	cmp	r6, r4
 8108992:	d109      	bne.n	81089a8 <__libc_init_array+0x24>
 8108994:	4d0b      	ldr	r5, [pc, #44]	@ (81089c4 <__libc_init_array+0x40>)
 8108996:	2600      	movs	r6, #0
 8108998:	4c0b      	ldr	r4, [pc, #44]	@ (81089c8 <__libc_init_array+0x44>)
 810899a:	f000 fc83 	bl	81092a4 <_init>
 810899e:	1b64      	subs	r4, r4, r5
 81089a0:	10a4      	asrs	r4, r4, #2
 81089a2:	42a6      	cmp	r6, r4
 81089a4:	d105      	bne.n	81089b2 <__libc_init_array+0x2e>
 81089a6:	bd70      	pop	{r4, r5, r6, pc}
 81089a8:	f855 3b04 	ldr.w	r3, [r5], #4
 81089ac:	3601      	adds	r6, #1
 81089ae:	4798      	blx	r3
 81089b0:	e7ee      	b.n	8108990 <__libc_init_array+0xc>
 81089b2:	f855 3b04 	ldr.w	r3, [r5], #4
 81089b6:	3601      	adds	r6, #1
 81089b8:	4798      	blx	r3
 81089ba:	e7f2      	b.n	81089a2 <__libc_init_array+0x1e>
 81089bc:	08109430 	.word	0x08109430
 81089c0:	08109430 	.word	0x08109430
 81089c4:	08109430 	.word	0x08109430
 81089c8:	08109434 	.word	0x08109434

081089cc <__retarget_lock_init_recursive>:
 81089cc:	4770      	bx	lr

081089ce <__retarget_lock_acquire_recursive>:
 81089ce:	4770      	bx	lr

081089d0 <__retarget_lock_release_recursive>:
 81089d0:	4770      	bx	lr

081089d2 <memcpy>:
 81089d2:	440a      	add	r2, r1
 81089d4:	1e43      	subs	r3, r0, #1
 81089d6:	4291      	cmp	r1, r2
 81089d8:	d100      	bne.n	81089dc <memcpy+0xa>
 81089da:	4770      	bx	lr
 81089dc:	b510      	push	{r4, lr}
 81089de:	f811 4b01 	ldrb.w	r4, [r1], #1
 81089e2:	4291      	cmp	r1, r2
 81089e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 81089e8:	d1f9      	bne.n	81089de <memcpy+0xc>
 81089ea:	bd10      	pop	{r4, pc}

081089ec <_free_r>:
 81089ec:	b538      	push	{r3, r4, r5, lr}
 81089ee:	4605      	mov	r5, r0
 81089f0:	2900      	cmp	r1, #0
 81089f2:	d041      	beq.n	8108a78 <_free_r+0x8c>
 81089f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81089f8:	1f0c      	subs	r4, r1, #4
 81089fa:	2b00      	cmp	r3, #0
 81089fc:	bfb8      	it	lt
 81089fe:	18e4      	addlt	r4, r4, r3
 8108a00:	f7ff fda4 	bl	810854c <__malloc_lock>
 8108a04:	4a1d      	ldr	r2, [pc, #116]	@ (8108a7c <_free_r+0x90>)
 8108a06:	6813      	ldr	r3, [r2, #0]
 8108a08:	b933      	cbnz	r3, 8108a18 <_free_r+0x2c>
 8108a0a:	6063      	str	r3, [r4, #4]
 8108a0c:	6014      	str	r4, [r2, #0]
 8108a0e:	4628      	mov	r0, r5
 8108a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108a14:	f7ff bda0 	b.w	8108558 <__malloc_unlock>
 8108a18:	42a3      	cmp	r3, r4
 8108a1a:	d908      	bls.n	8108a2e <_free_r+0x42>
 8108a1c:	6820      	ldr	r0, [r4, #0]
 8108a1e:	1821      	adds	r1, r4, r0
 8108a20:	428b      	cmp	r3, r1
 8108a22:	bf01      	itttt	eq
 8108a24:	6819      	ldreq	r1, [r3, #0]
 8108a26:	685b      	ldreq	r3, [r3, #4]
 8108a28:	1809      	addeq	r1, r1, r0
 8108a2a:	6021      	streq	r1, [r4, #0]
 8108a2c:	e7ed      	b.n	8108a0a <_free_r+0x1e>
 8108a2e:	461a      	mov	r2, r3
 8108a30:	685b      	ldr	r3, [r3, #4]
 8108a32:	b10b      	cbz	r3, 8108a38 <_free_r+0x4c>
 8108a34:	42a3      	cmp	r3, r4
 8108a36:	d9fa      	bls.n	8108a2e <_free_r+0x42>
 8108a38:	6811      	ldr	r1, [r2, #0]
 8108a3a:	1850      	adds	r0, r2, r1
 8108a3c:	42a0      	cmp	r0, r4
 8108a3e:	d10b      	bne.n	8108a58 <_free_r+0x6c>
 8108a40:	6820      	ldr	r0, [r4, #0]
 8108a42:	4401      	add	r1, r0
 8108a44:	1850      	adds	r0, r2, r1
 8108a46:	6011      	str	r1, [r2, #0]
 8108a48:	4283      	cmp	r3, r0
 8108a4a:	d1e0      	bne.n	8108a0e <_free_r+0x22>
 8108a4c:	6818      	ldr	r0, [r3, #0]
 8108a4e:	685b      	ldr	r3, [r3, #4]
 8108a50:	4408      	add	r0, r1
 8108a52:	6053      	str	r3, [r2, #4]
 8108a54:	6010      	str	r0, [r2, #0]
 8108a56:	e7da      	b.n	8108a0e <_free_r+0x22>
 8108a58:	d902      	bls.n	8108a60 <_free_r+0x74>
 8108a5a:	230c      	movs	r3, #12
 8108a5c:	602b      	str	r3, [r5, #0]
 8108a5e:	e7d6      	b.n	8108a0e <_free_r+0x22>
 8108a60:	6820      	ldr	r0, [r4, #0]
 8108a62:	1821      	adds	r1, r4, r0
 8108a64:	428b      	cmp	r3, r1
 8108a66:	bf02      	ittt	eq
 8108a68:	6819      	ldreq	r1, [r3, #0]
 8108a6a:	685b      	ldreq	r3, [r3, #4]
 8108a6c:	1809      	addeq	r1, r1, r0
 8108a6e:	6063      	str	r3, [r4, #4]
 8108a70:	bf08      	it	eq
 8108a72:	6021      	streq	r1, [r4, #0]
 8108a74:	6054      	str	r4, [r2, #4]
 8108a76:	e7ca      	b.n	8108a0e <_free_r+0x22>
 8108a78:	bd38      	pop	{r3, r4, r5, pc}
 8108a7a:	bf00      	nop
 8108a7c:	20000250 	.word	0x20000250

08108a80 <__sfputc_r>:
 8108a80:	6893      	ldr	r3, [r2, #8]
 8108a82:	3b01      	subs	r3, #1
 8108a84:	2b00      	cmp	r3, #0
 8108a86:	6093      	str	r3, [r2, #8]
 8108a88:	b410      	push	{r4}
 8108a8a:	da08      	bge.n	8108a9e <__sfputc_r+0x1e>
 8108a8c:	6994      	ldr	r4, [r2, #24]
 8108a8e:	42a3      	cmp	r3, r4
 8108a90:	db01      	blt.n	8108a96 <__sfputc_r+0x16>
 8108a92:	290a      	cmp	r1, #10
 8108a94:	d103      	bne.n	8108a9e <__sfputc_r+0x1e>
 8108a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108a9a:	f7ff be7a 	b.w	8108792 <__swbuf_r>
 8108a9e:	6813      	ldr	r3, [r2, #0]
 8108aa0:	1c58      	adds	r0, r3, #1
 8108aa2:	6010      	str	r0, [r2, #0]
 8108aa4:	4608      	mov	r0, r1
 8108aa6:	7019      	strb	r1, [r3, #0]
 8108aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108aac:	4770      	bx	lr

08108aae <__sfputs_r>:
 8108aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108ab0:	4606      	mov	r6, r0
 8108ab2:	460f      	mov	r7, r1
 8108ab4:	4614      	mov	r4, r2
 8108ab6:	18d5      	adds	r5, r2, r3
 8108ab8:	42ac      	cmp	r4, r5
 8108aba:	d101      	bne.n	8108ac0 <__sfputs_r+0x12>
 8108abc:	2000      	movs	r0, #0
 8108abe:	e007      	b.n	8108ad0 <__sfputs_r+0x22>
 8108ac0:	463a      	mov	r2, r7
 8108ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108ac6:	4630      	mov	r0, r6
 8108ac8:	f7ff ffda 	bl	8108a80 <__sfputc_r>
 8108acc:	1c43      	adds	r3, r0, #1
 8108ace:	d1f3      	bne.n	8108ab8 <__sfputs_r+0xa>
 8108ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08108ad4 <_vfiprintf_r>:
 8108ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108ad8:	460d      	mov	r5, r1
 8108ada:	b09d      	sub	sp, #116	@ 0x74
 8108adc:	4614      	mov	r4, r2
 8108ade:	4698      	mov	r8, r3
 8108ae0:	4606      	mov	r6, r0
 8108ae2:	b118      	cbz	r0, 8108aec <_vfiprintf_r+0x18>
 8108ae4:	6a03      	ldr	r3, [r0, #32]
 8108ae6:	b90b      	cbnz	r3, 8108aec <_vfiprintf_r+0x18>
 8108ae8:	f7ff fdc8 	bl	810867c <__sinit>
 8108aec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108aee:	07d9      	lsls	r1, r3, #31
 8108af0:	d405      	bmi.n	8108afe <_vfiprintf_r+0x2a>
 8108af2:	89ab      	ldrh	r3, [r5, #12]
 8108af4:	059a      	lsls	r2, r3, #22
 8108af6:	d402      	bmi.n	8108afe <_vfiprintf_r+0x2a>
 8108af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8108afa:	f7ff ff68 	bl	81089ce <__retarget_lock_acquire_recursive>
 8108afe:	89ab      	ldrh	r3, [r5, #12]
 8108b00:	071b      	lsls	r3, r3, #28
 8108b02:	d501      	bpl.n	8108b08 <_vfiprintf_r+0x34>
 8108b04:	692b      	ldr	r3, [r5, #16]
 8108b06:	b99b      	cbnz	r3, 8108b30 <_vfiprintf_r+0x5c>
 8108b08:	4629      	mov	r1, r5
 8108b0a:	4630      	mov	r0, r6
 8108b0c:	f7ff fe80 	bl	8108810 <__swsetup_r>
 8108b10:	b170      	cbz	r0, 8108b30 <_vfiprintf_r+0x5c>
 8108b12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108b14:	07dc      	lsls	r4, r3, #31
 8108b16:	d504      	bpl.n	8108b22 <_vfiprintf_r+0x4e>
 8108b18:	f04f 30ff 	mov.w	r0, #4294967295
 8108b1c:	b01d      	add	sp, #116	@ 0x74
 8108b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108b22:	89ab      	ldrh	r3, [r5, #12]
 8108b24:	0598      	lsls	r0, r3, #22
 8108b26:	d4f7      	bmi.n	8108b18 <_vfiprintf_r+0x44>
 8108b28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8108b2a:	f7ff ff51 	bl	81089d0 <__retarget_lock_release_recursive>
 8108b2e:	e7f3      	b.n	8108b18 <_vfiprintf_r+0x44>
 8108b30:	2300      	movs	r3, #0
 8108b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8108b36:	f04f 0901 	mov.w	r9, #1
 8108b3a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8108cf0 <_vfiprintf_r+0x21c>
 8108b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8108b40:	2320      	movs	r3, #32
 8108b42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8108b46:	2330      	movs	r3, #48	@ 0x30
 8108b48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8108b4c:	4623      	mov	r3, r4
 8108b4e:	469a      	mov	sl, r3
 8108b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108b54:	b10a      	cbz	r2, 8108b5a <_vfiprintf_r+0x86>
 8108b56:	2a25      	cmp	r2, #37	@ 0x25
 8108b58:	d1f9      	bne.n	8108b4e <_vfiprintf_r+0x7a>
 8108b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8108b5e:	d00b      	beq.n	8108b78 <_vfiprintf_r+0xa4>
 8108b60:	465b      	mov	r3, fp
 8108b62:	4622      	mov	r2, r4
 8108b64:	4629      	mov	r1, r5
 8108b66:	4630      	mov	r0, r6
 8108b68:	f7ff ffa1 	bl	8108aae <__sfputs_r>
 8108b6c:	3001      	adds	r0, #1
 8108b6e:	f000 80a7 	beq.w	8108cc0 <_vfiprintf_r+0x1ec>
 8108b72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8108b74:	445a      	add	r2, fp
 8108b76:	9209      	str	r2, [sp, #36]	@ 0x24
 8108b78:	f89a 3000 	ldrb.w	r3, [sl]
 8108b7c:	2b00      	cmp	r3, #0
 8108b7e:	f000 809f 	beq.w	8108cc0 <_vfiprintf_r+0x1ec>
 8108b82:	2300      	movs	r3, #0
 8108b84:	f04f 32ff 	mov.w	r2, #4294967295
 8108b88:	f10a 0a01 	add.w	sl, sl, #1
 8108b8c:	9304      	str	r3, [sp, #16]
 8108b8e:	9307      	str	r3, [sp, #28]
 8108b90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8108b94:	931a      	str	r3, [sp, #104]	@ 0x68
 8108b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8108b9a:	4654      	mov	r4, sl
 8108b9c:	2205      	movs	r2, #5
 8108b9e:	4854      	ldr	r0, [pc, #336]	@ (8108cf0 <_vfiprintf_r+0x21c>)
 8108ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108ba4:	f000 fb70 	bl	8109288 <memchr>
 8108ba8:	9a04      	ldr	r2, [sp, #16]
 8108baa:	b9d8      	cbnz	r0, 8108be4 <_vfiprintf_r+0x110>
 8108bac:	06d1      	lsls	r1, r2, #27
 8108bae:	bf44      	itt	mi
 8108bb0:	2320      	movmi	r3, #32
 8108bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108bb6:	0713      	lsls	r3, r2, #28
 8108bb8:	bf44      	itt	mi
 8108bba:	232b      	movmi	r3, #43	@ 0x2b
 8108bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8108bc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8108bc6:	d015      	beq.n	8108bf4 <_vfiprintf_r+0x120>
 8108bc8:	9a07      	ldr	r2, [sp, #28]
 8108bca:	4654      	mov	r4, sl
 8108bcc:	2000      	movs	r0, #0
 8108bce:	f04f 0c0a 	mov.w	ip, #10
 8108bd2:	4621      	mov	r1, r4
 8108bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108bd8:	3b30      	subs	r3, #48	@ 0x30
 8108bda:	2b09      	cmp	r3, #9
 8108bdc:	d94b      	bls.n	8108c76 <_vfiprintf_r+0x1a2>
 8108bde:	b1b0      	cbz	r0, 8108c0e <_vfiprintf_r+0x13a>
 8108be0:	9207      	str	r2, [sp, #28]
 8108be2:	e014      	b.n	8108c0e <_vfiprintf_r+0x13a>
 8108be4:	eba0 0308 	sub.w	r3, r0, r8
 8108be8:	46a2      	mov	sl, r4
 8108bea:	fa09 f303 	lsl.w	r3, r9, r3
 8108bee:	4313      	orrs	r3, r2
 8108bf0:	9304      	str	r3, [sp, #16]
 8108bf2:	e7d2      	b.n	8108b9a <_vfiprintf_r+0xc6>
 8108bf4:	9b03      	ldr	r3, [sp, #12]
 8108bf6:	1d19      	adds	r1, r3, #4
 8108bf8:	681b      	ldr	r3, [r3, #0]
 8108bfa:	2b00      	cmp	r3, #0
 8108bfc:	9103      	str	r1, [sp, #12]
 8108bfe:	bfbb      	ittet	lt
 8108c00:	425b      	neglt	r3, r3
 8108c02:	f042 0202 	orrlt.w	r2, r2, #2
 8108c06:	9307      	strge	r3, [sp, #28]
 8108c08:	9307      	strlt	r3, [sp, #28]
 8108c0a:	bfb8      	it	lt
 8108c0c:	9204      	strlt	r2, [sp, #16]
 8108c0e:	7823      	ldrb	r3, [r4, #0]
 8108c10:	2b2e      	cmp	r3, #46	@ 0x2e
 8108c12:	d10a      	bne.n	8108c2a <_vfiprintf_r+0x156>
 8108c14:	7863      	ldrb	r3, [r4, #1]
 8108c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8108c18:	d132      	bne.n	8108c80 <_vfiprintf_r+0x1ac>
 8108c1a:	9b03      	ldr	r3, [sp, #12]
 8108c1c:	3402      	adds	r4, #2
 8108c1e:	1d1a      	adds	r2, r3, #4
 8108c20:	681b      	ldr	r3, [r3, #0]
 8108c22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8108c26:	9203      	str	r2, [sp, #12]
 8108c28:	9305      	str	r3, [sp, #20]
 8108c2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8108d00 <_vfiprintf_r+0x22c>
 8108c2e:	2203      	movs	r2, #3
 8108c30:	7821      	ldrb	r1, [r4, #0]
 8108c32:	4650      	mov	r0, sl
 8108c34:	f000 fb28 	bl	8109288 <memchr>
 8108c38:	b138      	cbz	r0, 8108c4a <_vfiprintf_r+0x176>
 8108c3a:	eba0 000a 	sub.w	r0, r0, sl
 8108c3e:	2240      	movs	r2, #64	@ 0x40
 8108c40:	9b04      	ldr	r3, [sp, #16]
 8108c42:	3401      	adds	r4, #1
 8108c44:	4082      	lsls	r2, r0
 8108c46:	4313      	orrs	r3, r2
 8108c48:	9304      	str	r3, [sp, #16]
 8108c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108c4e:	2206      	movs	r2, #6
 8108c50:	4828      	ldr	r0, [pc, #160]	@ (8108cf4 <_vfiprintf_r+0x220>)
 8108c52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8108c56:	f000 fb17 	bl	8109288 <memchr>
 8108c5a:	2800      	cmp	r0, #0
 8108c5c:	d03f      	beq.n	8108cde <_vfiprintf_r+0x20a>
 8108c5e:	4b26      	ldr	r3, [pc, #152]	@ (8108cf8 <_vfiprintf_r+0x224>)
 8108c60:	bb1b      	cbnz	r3, 8108caa <_vfiprintf_r+0x1d6>
 8108c62:	9b03      	ldr	r3, [sp, #12]
 8108c64:	3307      	adds	r3, #7
 8108c66:	f023 0307 	bic.w	r3, r3, #7
 8108c6a:	3308      	adds	r3, #8
 8108c6c:	9303      	str	r3, [sp, #12]
 8108c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108c70:	443b      	add	r3, r7
 8108c72:	9309      	str	r3, [sp, #36]	@ 0x24
 8108c74:	e76a      	b.n	8108b4c <_vfiprintf_r+0x78>
 8108c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8108c7a:	460c      	mov	r4, r1
 8108c7c:	2001      	movs	r0, #1
 8108c7e:	e7a8      	b.n	8108bd2 <_vfiprintf_r+0xfe>
 8108c80:	2300      	movs	r3, #0
 8108c82:	3401      	adds	r4, #1
 8108c84:	f04f 0c0a 	mov.w	ip, #10
 8108c88:	4619      	mov	r1, r3
 8108c8a:	9305      	str	r3, [sp, #20]
 8108c8c:	4620      	mov	r0, r4
 8108c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108c92:	3a30      	subs	r2, #48	@ 0x30
 8108c94:	2a09      	cmp	r2, #9
 8108c96:	d903      	bls.n	8108ca0 <_vfiprintf_r+0x1cc>
 8108c98:	2b00      	cmp	r3, #0
 8108c9a:	d0c6      	beq.n	8108c2a <_vfiprintf_r+0x156>
 8108c9c:	9105      	str	r1, [sp, #20]
 8108c9e:	e7c4      	b.n	8108c2a <_vfiprintf_r+0x156>
 8108ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8108ca4:	4604      	mov	r4, r0
 8108ca6:	2301      	movs	r3, #1
 8108ca8:	e7f0      	b.n	8108c8c <_vfiprintf_r+0x1b8>
 8108caa:	ab03      	add	r3, sp, #12
 8108cac:	462a      	mov	r2, r5
 8108cae:	a904      	add	r1, sp, #16
 8108cb0:	4630      	mov	r0, r6
 8108cb2:	9300      	str	r3, [sp, #0]
 8108cb4:	4b11      	ldr	r3, [pc, #68]	@ (8108cfc <_vfiprintf_r+0x228>)
 8108cb6:	f3af 8000 	nop.w
 8108cba:	4607      	mov	r7, r0
 8108cbc:	1c78      	adds	r0, r7, #1
 8108cbe:	d1d6      	bne.n	8108c6e <_vfiprintf_r+0x19a>
 8108cc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108cc2:	07d9      	lsls	r1, r3, #31
 8108cc4:	d405      	bmi.n	8108cd2 <_vfiprintf_r+0x1fe>
 8108cc6:	89ab      	ldrh	r3, [r5, #12]
 8108cc8:	059a      	lsls	r2, r3, #22
 8108cca:	d402      	bmi.n	8108cd2 <_vfiprintf_r+0x1fe>
 8108ccc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8108cce:	f7ff fe7f 	bl	81089d0 <__retarget_lock_release_recursive>
 8108cd2:	89ab      	ldrh	r3, [r5, #12]
 8108cd4:	065b      	lsls	r3, r3, #25
 8108cd6:	f53f af1f 	bmi.w	8108b18 <_vfiprintf_r+0x44>
 8108cda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8108cdc:	e71e      	b.n	8108b1c <_vfiprintf_r+0x48>
 8108cde:	ab03      	add	r3, sp, #12
 8108ce0:	462a      	mov	r2, r5
 8108ce2:	a904      	add	r1, sp, #16
 8108ce4:	4630      	mov	r0, r6
 8108ce6:	9300      	str	r3, [sp, #0]
 8108ce8:	4b04      	ldr	r3, [pc, #16]	@ (8108cfc <_vfiprintf_r+0x228>)
 8108cea:	f000 f87d 	bl	8108de8 <_printf_i>
 8108cee:	e7e4      	b.n	8108cba <_vfiprintf_r+0x1e6>
 8108cf0:	081093f4 	.word	0x081093f4
 8108cf4:	081093fe 	.word	0x081093fe
 8108cf8:	00000000 	.word	0x00000000
 8108cfc:	08108aaf 	.word	0x08108aaf
 8108d00:	081093fa 	.word	0x081093fa

08108d04 <_printf_common>:
 8108d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108d08:	4616      	mov	r6, r2
 8108d0a:	4698      	mov	r8, r3
 8108d0c:	688a      	ldr	r2, [r1, #8]
 8108d0e:	4607      	mov	r7, r0
 8108d10:	690b      	ldr	r3, [r1, #16]
 8108d12:	460c      	mov	r4, r1
 8108d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8108d18:	4293      	cmp	r3, r2
 8108d1a:	bfb8      	it	lt
 8108d1c:	4613      	movlt	r3, r2
 8108d1e:	6033      	str	r3, [r6, #0]
 8108d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8108d24:	b10a      	cbz	r2, 8108d2a <_printf_common+0x26>
 8108d26:	3301      	adds	r3, #1
 8108d28:	6033      	str	r3, [r6, #0]
 8108d2a:	6823      	ldr	r3, [r4, #0]
 8108d2c:	0699      	lsls	r1, r3, #26
 8108d2e:	bf42      	ittt	mi
 8108d30:	6833      	ldrmi	r3, [r6, #0]
 8108d32:	3302      	addmi	r3, #2
 8108d34:	6033      	strmi	r3, [r6, #0]
 8108d36:	6825      	ldr	r5, [r4, #0]
 8108d38:	f015 0506 	ands.w	r5, r5, #6
 8108d3c:	d106      	bne.n	8108d4c <_printf_common+0x48>
 8108d3e:	f104 0a19 	add.w	sl, r4, #25
 8108d42:	68e3      	ldr	r3, [r4, #12]
 8108d44:	6832      	ldr	r2, [r6, #0]
 8108d46:	1a9b      	subs	r3, r3, r2
 8108d48:	42ab      	cmp	r3, r5
 8108d4a:	dc2b      	bgt.n	8108da4 <_printf_common+0xa0>
 8108d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8108d50:	6822      	ldr	r2, [r4, #0]
 8108d52:	3b00      	subs	r3, #0
 8108d54:	bf18      	it	ne
 8108d56:	2301      	movne	r3, #1
 8108d58:	0692      	lsls	r2, r2, #26
 8108d5a:	d430      	bmi.n	8108dbe <_printf_common+0xba>
 8108d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8108d60:	4641      	mov	r1, r8
 8108d62:	4638      	mov	r0, r7
 8108d64:	47c8      	blx	r9
 8108d66:	3001      	adds	r0, #1
 8108d68:	d023      	beq.n	8108db2 <_printf_common+0xae>
 8108d6a:	6823      	ldr	r3, [r4, #0]
 8108d6c:	341a      	adds	r4, #26
 8108d6e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8108d72:	f003 0306 	and.w	r3, r3, #6
 8108d76:	2b04      	cmp	r3, #4
 8108d78:	bf0a      	itet	eq
 8108d7a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8108d7e:	2500      	movne	r5, #0
 8108d80:	6833      	ldreq	r3, [r6, #0]
 8108d82:	f04f 0600 	mov.w	r6, #0
 8108d86:	bf08      	it	eq
 8108d88:	1aed      	subeq	r5, r5, r3
 8108d8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8108d8e:	bf08      	it	eq
 8108d90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108d94:	4293      	cmp	r3, r2
 8108d96:	bfc4      	itt	gt
 8108d98:	1a9b      	subgt	r3, r3, r2
 8108d9a:	18ed      	addgt	r5, r5, r3
 8108d9c:	42b5      	cmp	r5, r6
 8108d9e:	d11a      	bne.n	8108dd6 <_printf_common+0xd2>
 8108da0:	2000      	movs	r0, #0
 8108da2:	e008      	b.n	8108db6 <_printf_common+0xb2>
 8108da4:	2301      	movs	r3, #1
 8108da6:	4652      	mov	r2, sl
 8108da8:	4641      	mov	r1, r8
 8108daa:	4638      	mov	r0, r7
 8108dac:	47c8      	blx	r9
 8108dae:	3001      	adds	r0, #1
 8108db0:	d103      	bne.n	8108dba <_printf_common+0xb6>
 8108db2:	f04f 30ff 	mov.w	r0, #4294967295
 8108db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108dba:	3501      	adds	r5, #1
 8108dbc:	e7c1      	b.n	8108d42 <_printf_common+0x3e>
 8108dbe:	18e1      	adds	r1, r4, r3
 8108dc0:	1c5a      	adds	r2, r3, #1
 8108dc2:	2030      	movs	r0, #48	@ 0x30
 8108dc4:	3302      	adds	r3, #2
 8108dc6:	4422      	add	r2, r4
 8108dc8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8108dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8108dd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8108dd4:	e7c2      	b.n	8108d5c <_printf_common+0x58>
 8108dd6:	2301      	movs	r3, #1
 8108dd8:	4622      	mov	r2, r4
 8108dda:	4641      	mov	r1, r8
 8108ddc:	4638      	mov	r0, r7
 8108dde:	47c8      	blx	r9
 8108de0:	3001      	adds	r0, #1
 8108de2:	d0e6      	beq.n	8108db2 <_printf_common+0xae>
 8108de4:	3601      	adds	r6, #1
 8108de6:	e7d9      	b.n	8108d9c <_printf_common+0x98>

08108de8 <_printf_i>:
 8108de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108dec:	7e0f      	ldrb	r7, [r1, #24]
 8108dee:	4691      	mov	r9, r2
 8108df0:	4680      	mov	r8, r0
 8108df2:	460c      	mov	r4, r1
 8108df4:	2f78      	cmp	r7, #120	@ 0x78
 8108df6:	469a      	mov	sl, r3
 8108df8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8108dfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8108dfe:	d807      	bhi.n	8108e10 <_printf_i+0x28>
 8108e00:	2f62      	cmp	r7, #98	@ 0x62
 8108e02:	d80a      	bhi.n	8108e1a <_printf_i+0x32>
 8108e04:	2f00      	cmp	r7, #0
 8108e06:	f000 80d2 	beq.w	8108fae <_printf_i+0x1c6>
 8108e0a:	2f58      	cmp	r7, #88	@ 0x58
 8108e0c:	f000 80b9 	beq.w	8108f82 <_printf_i+0x19a>
 8108e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8108e14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8108e18:	e03a      	b.n	8108e90 <_printf_i+0xa8>
 8108e1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8108e1e:	2b15      	cmp	r3, #21
 8108e20:	d8f6      	bhi.n	8108e10 <_printf_i+0x28>
 8108e22:	a101      	add	r1, pc, #4	@ (adr r1, 8108e28 <_printf_i+0x40>)
 8108e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8108e28:	08108e81 	.word	0x08108e81
 8108e2c:	08108e95 	.word	0x08108e95
 8108e30:	08108e11 	.word	0x08108e11
 8108e34:	08108e11 	.word	0x08108e11
 8108e38:	08108e11 	.word	0x08108e11
 8108e3c:	08108e11 	.word	0x08108e11
 8108e40:	08108e95 	.word	0x08108e95
 8108e44:	08108e11 	.word	0x08108e11
 8108e48:	08108e11 	.word	0x08108e11
 8108e4c:	08108e11 	.word	0x08108e11
 8108e50:	08108e11 	.word	0x08108e11
 8108e54:	08108f95 	.word	0x08108f95
 8108e58:	08108ebf 	.word	0x08108ebf
 8108e5c:	08108f4f 	.word	0x08108f4f
 8108e60:	08108e11 	.word	0x08108e11
 8108e64:	08108e11 	.word	0x08108e11
 8108e68:	08108fb7 	.word	0x08108fb7
 8108e6c:	08108e11 	.word	0x08108e11
 8108e70:	08108ebf 	.word	0x08108ebf
 8108e74:	08108e11 	.word	0x08108e11
 8108e78:	08108e11 	.word	0x08108e11
 8108e7c:	08108f57 	.word	0x08108f57
 8108e80:	6833      	ldr	r3, [r6, #0]
 8108e82:	1d1a      	adds	r2, r3, #4
 8108e84:	681b      	ldr	r3, [r3, #0]
 8108e86:	6032      	str	r2, [r6, #0]
 8108e88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8108e8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8108e90:	2301      	movs	r3, #1
 8108e92:	e09d      	b.n	8108fd0 <_printf_i+0x1e8>
 8108e94:	6833      	ldr	r3, [r6, #0]
 8108e96:	6820      	ldr	r0, [r4, #0]
 8108e98:	1d19      	adds	r1, r3, #4
 8108e9a:	6031      	str	r1, [r6, #0]
 8108e9c:	0606      	lsls	r6, r0, #24
 8108e9e:	d501      	bpl.n	8108ea4 <_printf_i+0xbc>
 8108ea0:	681d      	ldr	r5, [r3, #0]
 8108ea2:	e003      	b.n	8108eac <_printf_i+0xc4>
 8108ea4:	0645      	lsls	r5, r0, #25
 8108ea6:	d5fb      	bpl.n	8108ea0 <_printf_i+0xb8>
 8108ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8108eac:	2d00      	cmp	r5, #0
 8108eae:	da03      	bge.n	8108eb8 <_printf_i+0xd0>
 8108eb0:	232d      	movs	r3, #45	@ 0x2d
 8108eb2:	426d      	negs	r5, r5
 8108eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8108eb8:	4859      	ldr	r0, [pc, #356]	@ (8109020 <_printf_i+0x238>)
 8108eba:	230a      	movs	r3, #10
 8108ebc:	e011      	b.n	8108ee2 <_printf_i+0xfa>
 8108ebe:	6821      	ldr	r1, [r4, #0]
 8108ec0:	6833      	ldr	r3, [r6, #0]
 8108ec2:	0608      	lsls	r0, r1, #24
 8108ec4:	f853 5b04 	ldr.w	r5, [r3], #4
 8108ec8:	d402      	bmi.n	8108ed0 <_printf_i+0xe8>
 8108eca:	0649      	lsls	r1, r1, #25
 8108ecc:	bf48      	it	mi
 8108ece:	b2ad      	uxthmi	r5, r5
 8108ed0:	2f6f      	cmp	r7, #111	@ 0x6f
 8108ed2:	6033      	str	r3, [r6, #0]
 8108ed4:	4852      	ldr	r0, [pc, #328]	@ (8109020 <_printf_i+0x238>)
 8108ed6:	bf14      	ite	ne
 8108ed8:	230a      	movne	r3, #10
 8108eda:	2308      	moveq	r3, #8
 8108edc:	2100      	movs	r1, #0
 8108ede:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8108ee2:	6866      	ldr	r6, [r4, #4]
 8108ee4:	2e00      	cmp	r6, #0
 8108ee6:	60a6      	str	r6, [r4, #8]
 8108ee8:	bfa2      	ittt	ge
 8108eea:	6821      	ldrge	r1, [r4, #0]
 8108eec:	f021 0104 	bicge.w	r1, r1, #4
 8108ef0:	6021      	strge	r1, [r4, #0]
 8108ef2:	b90d      	cbnz	r5, 8108ef8 <_printf_i+0x110>
 8108ef4:	2e00      	cmp	r6, #0
 8108ef6:	d04b      	beq.n	8108f90 <_printf_i+0x1a8>
 8108ef8:	4616      	mov	r6, r2
 8108efa:	fbb5 f1f3 	udiv	r1, r5, r3
 8108efe:	fb03 5711 	mls	r7, r3, r1, r5
 8108f02:	5dc7      	ldrb	r7, [r0, r7]
 8108f04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8108f08:	462f      	mov	r7, r5
 8108f0a:	460d      	mov	r5, r1
 8108f0c:	42bb      	cmp	r3, r7
 8108f0e:	d9f4      	bls.n	8108efa <_printf_i+0x112>
 8108f10:	2b08      	cmp	r3, #8
 8108f12:	d10b      	bne.n	8108f2c <_printf_i+0x144>
 8108f14:	6823      	ldr	r3, [r4, #0]
 8108f16:	07df      	lsls	r7, r3, #31
 8108f18:	d508      	bpl.n	8108f2c <_printf_i+0x144>
 8108f1a:	6923      	ldr	r3, [r4, #16]
 8108f1c:	6861      	ldr	r1, [r4, #4]
 8108f1e:	4299      	cmp	r1, r3
 8108f20:	bfde      	ittt	le
 8108f22:	2330      	movle	r3, #48	@ 0x30
 8108f24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8108f28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8108f2c:	1b92      	subs	r2, r2, r6
 8108f2e:	6122      	str	r2, [r4, #16]
 8108f30:	464b      	mov	r3, r9
 8108f32:	aa03      	add	r2, sp, #12
 8108f34:	4621      	mov	r1, r4
 8108f36:	4640      	mov	r0, r8
 8108f38:	f8cd a000 	str.w	sl, [sp]
 8108f3c:	f7ff fee2 	bl	8108d04 <_printf_common>
 8108f40:	3001      	adds	r0, #1
 8108f42:	d14a      	bne.n	8108fda <_printf_i+0x1f2>
 8108f44:	f04f 30ff 	mov.w	r0, #4294967295
 8108f48:	b004      	add	sp, #16
 8108f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108f4e:	6823      	ldr	r3, [r4, #0]
 8108f50:	f043 0320 	orr.w	r3, r3, #32
 8108f54:	6023      	str	r3, [r4, #0]
 8108f56:	2778      	movs	r7, #120	@ 0x78
 8108f58:	4832      	ldr	r0, [pc, #200]	@ (8109024 <_printf_i+0x23c>)
 8108f5a:	6823      	ldr	r3, [r4, #0]
 8108f5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8108f60:	061f      	lsls	r7, r3, #24
 8108f62:	6831      	ldr	r1, [r6, #0]
 8108f64:	f851 5b04 	ldr.w	r5, [r1], #4
 8108f68:	d402      	bmi.n	8108f70 <_printf_i+0x188>
 8108f6a:	065f      	lsls	r7, r3, #25
 8108f6c:	bf48      	it	mi
 8108f6e:	b2ad      	uxthmi	r5, r5
 8108f70:	6031      	str	r1, [r6, #0]
 8108f72:	07d9      	lsls	r1, r3, #31
 8108f74:	bf44      	itt	mi
 8108f76:	f043 0320 	orrmi.w	r3, r3, #32
 8108f7a:	6023      	strmi	r3, [r4, #0]
 8108f7c:	b11d      	cbz	r5, 8108f86 <_printf_i+0x19e>
 8108f7e:	2310      	movs	r3, #16
 8108f80:	e7ac      	b.n	8108edc <_printf_i+0xf4>
 8108f82:	4827      	ldr	r0, [pc, #156]	@ (8109020 <_printf_i+0x238>)
 8108f84:	e7e9      	b.n	8108f5a <_printf_i+0x172>
 8108f86:	6823      	ldr	r3, [r4, #0]
 8108f88:	f023 0320 	bic.w	r3, r3, #32
 8108f8c:	6023      	str	r3, [r4, #0]
 8108f8e:	e7f6      	b.n	8108f7e <_printf_i+0x196>
 8108f90:	4616      	mov	r6, r2
 8108f92:	e7bd      	b.n	8108f10 <_printf_i+0x128>
 8108f94:	6833      	ldr	r3, [r6, #0]
 8108f96:	6825      	ldr	r5, [r4, #0]
 8108f98:	1d18      	adds	r0, r3, #4
 8108f9a:	6961      	ldr	r1, [r4, #20]
 8108f9c:	6030      	str	r0, [r6, #0]
 8108f9e:	062e      	lsls	r6, r5, #24
 8108fa0:	681b      	ldr	r3, [r3, #0]
 8108fa2:	d501      	bpl.n	8108fa8 <_printf_i+0x1c0>
 8108fa4:	6019      	str	r1, [r3, #0]
 8108fa6:	e002      	b.n	8108fae <_printf_i+0x1c6>
 8108fa8:	0668      	lsls	r0, r5, #25
 8108faa:	d5fb      	bpl.n	8108fa4 <_printf_i+0x1bc>
 8108fac:	8019      	strh	r1, [r3, #0]
 8108fae:	2300      	movs	r3, #0
 8108fb0:	4616      	mov	r6, r2
 8108fb2:	6123      	str	r3, [r4, #16]
 8108fb4:	e7bc      	b.n	8108f30 <_printf_i+0x148>
 8108fb6:	6833      	ldr	r3, [r6, #0]
 8108fb8:	2100      	movs	r1, #0
 8108fba:	1d1a      	adds	r2, r3, #4
 8108fbc:	6032      	str	r2, [r6, #0]
 8108fbe:	681e      	ldr	r6, [r3, #0]
 8108fc0:	6862      	ldr	r2, [r4, #4]
 8108fc2:	4630      	mov	r0, r6
 8108fc4:	f000 f960 	bl	8109288 <memchr>
 8108fc8:	b108      	cbz	r0, 8108fce <_printf_i+0x1e6>
 8108fca:	1b80      	subs	r0, r0, r6
 8108fcc:	6060      	str	r0, [r4, #4]
 8108fce:	6863      	ldr	r3, [r4, #4]
 8108fd0:	6123      	str	r3, [r4, #16]
 8108fd2:	2300      	movs	r3, #0
 8108fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8108fd8:	e7aa      	b.n	8108f30 <_printf_i+0x148>
 8108fda:	6923      	ldr	r3, [r4, #16]
 8108fdc:	4632      	mov	r2, r6
 8108fde:	4649      	mov	r1, r9
 8108fe0:	4640      	mov	r0, r8
 8108fe2:	47d0      	blx	sl
 8108fe4:	3001      	adds	r0, #1
 8108fe6:	d0ad      	beq.n	8108f44 <_printf_i+0x15c>
 8108fe8:	6823      	ldr	r3, [r4, #0]
 8108fea:	079b      	lsls	r3, r3, #30
 8108fec:	d413      	bmi.n	8109016 <_printf_i+0x22e>
 8108fee:	68e0      	ldr	r0, [r4, #12]
 8108ff0:	9b03      	ldr	r3, [sp, #12]
 8108ff2:	4298      	cmp	r0, r3
 8108ff4:	bfb8      	it	lt
 8108ff6:	4618      	movlt	r0, r3
 8108ff8:	e7a6      	b.n	8108f48 <_printf_i+0x160>
 8108ffa:	2301      	movs	r3, #1
 8108ffc:	4632      	mov	r2, r6
 8108ffe:	4649      	mov	r1, r9
 8109000:	4640      	mov	r0, r8
 8109002:	47d0      	blx	sl
 8109004:	3001      	adds	r0, #1
 8109006:	d09d      	beq.n	8108f44 <_printf_i+0x15c>
 8109008:	3501      	adds	r5, #1
 810900a:	68e3      	ldr	r3, [r4, #12]
 810900c:	9903      	ldr	r1, [sp, #12]
 810900e:	1a5b      	subs	r3, r3, r1
 8109010:	42ab      	cmp	r3, r5
 8109012:	dcf2      	bgt.n	8108ffa <_printf_i+0x212>
 8109014:	e7eb      	b.n	8108fee <_printf_i+0x206>
 8109016:	2500      	movs	r5, #0
 8109018:	f104 0619 	add.w	r6, r4, #25
 810901c:	e7f5      	b.n	810900a <_printf_i+0x222>
 810901e:	bf00      	nop
 8109020:	08109405 	.word	0x08109405
 8109024:	08109416 	.word	0x08109416

08109028 <__sflush_r>:
 8109028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8109030:	0716      	lsls	r6, r2, #28
 8109032:	4605      	mov	r5, r0
 8109034:	460c      	mov	r4, r1
 8109036:	d454      	bmi.n	81090e2 <__sflush_r+0xba>
 8109038:	684b      	ldr	r3, [r1, #4]
 810903a:	2b00      	cmp	r3, #0
 810903c:	dc02      	bgt.n	8109044 <__sflush_r+0x1c>
 810903e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8109040:	2b00      	cmp	r3, #0
 8109042:	dd48      	ble.n	81090d6 <__sflush_r+0xae>
 8109044:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8109046:	2e00      	cmp	r6, #0
 8109048:	d045      	beq.n	81090d6 <__sflush_r+0xae>
 810904a:	2300      	movs	r3, #0
 810904c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8109050:	682f      	ldr	r7, [r5, #0]
 8109052:	6a21      	ldr	r1, [r4, #32]
 8109054:	602b      	str	r3, [r5, #0]
 8109056:	d030      	beq.n	81090ba <__sflush_r+0x92>
 8109058:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 810905a:	89a3      	ldrh	r3, [r4, #12]
 810905c:	0759      	lsls	r1, r3, #29
 810905e:	d505      	bpl.n	810906c <__sflush_r+0x44>
 8109060:	6863      	ldr	r3, [r4, #4]
 8109062:	1ad2      	subs	r2, r2, r3
 8109064:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8109066:	b10b      	cbz	r3, 810906c <__sflush_r+0x44>
 8109068:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 810906a:	1ad2      	subs	r2, r2, r3
 810906c:	2300      	movs	r3, #0
 810906e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8109070:	6a21      	ldr	r1, [r4, #32]
 8109072:	4628      	mov	r0, r5
 8109074:	47b0      	blx	r6
 8109076:	1c43      	adds	r3, r0, #1
 8109078:	89a3      	ldrh	r3, [r4, #12]
 810907a:	d106      	bne.n	810908a <__sflush_r+0x62>
 810907c:	6829      	ldr	r1, [r5, #0]
 810907e:	291d      	cmp	r1, #29
 8109080:	d82b      	bhi.n	81090da <__sflush_r+0xb2>
 8109082:	4a2a      	ldr	r2, [pc, #168]	@ (810912c <__sflush_r+0x104>)
 8109084:	410a      	asrs	r2, r1
 8109086:	07d6      	lsls	r6, r2, #31
 8109088:	d427      	bmi.n	81090da <__sflush_r+0xb2>
 810908a:	2200      	movs	r2, #0
 810908c:	04d9      	lsls	r1, r3, #19
 810908e:	6062      	str	r2, [r4, #4]
 8109090:	6922      	ldr	r2, [r4, #16]
 8109092:	6022      	str	r2, [r4, #0]
 8109094:	d504      	bpl.n	81090a0 <__sflush_r+0x78>
 8109096:	1c42      	adds	r2, r0, #1
 8109098:	d101      	bne.n	810909e <__sflush_r+0x76>
 810909a:	682b      	ldr	r3, [r5, #0]
 810909c:	b903      	cbnz	r3, 81090a0 <__sflush_r+0x78>
 810909e:	6560      	str	r0, [r4, #84]	@ 0x54
 81090a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81090a2:	602f      	str	r7, [r5, #0]
 81090a4:	b1b9      	cbz	r1, 81090d6 <__sflush_r+0xae>
 81090a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81090aa:	4299      	cmp	r1, r3
 81090ac:	d002      	beq.n	81090b4 <__sflush_r+0x8c>
 81090ae:	4628      	mov	r0, r5
 81090b0:	f7ff fc9c 	bl	81089ec <_free_r>
 81090b4:	2300      	movs	r3, #0
 81090b6:	6363      	str	r3, [r4, #52]	@ 0x34
 81090b8:	e00d      	b.n	81090d6 <__sflush_r+0xae>
 81090ba:	2301      	movs	r3, #1
 81090bc:	4628      	mov	r0, r5
 81090be:	47b0      	blx	r6
 81090c0:	4602      	mov	r2, r0
 81090c2:	1c50      	adds	r0, r2, #1
 81090c4:	d1c9      	bne.n	810905a <__sflush_r+0x32>
 81090c6:	682b      	ldr	r3, [r5, #0]
 81090c8:	2b00      	cmp	r3, #0
 81090ca:	d0c6      	beq.n	810905a <__sflush_r+0x32>
 81090cc:	2b1d      	cmp	r3, #29
 81090ce:	d001      	beq.n	81090d4 <__sflush_r+0xac>
 81090d0:	2b16      	cmp	r3, #22
 81090d2:	d11d      	bne.n	8109110 <__sflush_r+0xe8>
 81090d4:	602f      	str	r7, [r5, #0]
 81090d6:	2000      	movs	r0, #0
 81090d8:	e021      	b.n	810911e <__sflush_r+0xf6>
 81090da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81090de:	b21b      	sxth	r3, r3
 81090e0:	e01a      	b.n	8109118 <__sflush_r+0xf0>
 81090e2:	690f      	ldr	r7, [r1, #16]
 81090e4:	2f00      	cmp	r7, #0
 81090e6:	d0f6      	beq.n	81090d6 <__sflush_r+0xae>
 81090e8:	0793      	lsls	r3, r2, #30
 81090ea:	680e      	ldr	r6, [r1, #0]
 81090ec:	600f      	str	r7, [r1, #0]
 81090ee:	bf0c      	ite	eq
 81090f0:	694b      	ldreq	r3, [r1, #20]
 81090f2:	2300      	movne	r3, #0
 81090f4:	eba6 0807 	sub.w	r8, r6, r7
 81090f8:	608b      	str	r3, [r1, #8]
 81090fa:	f1b8 0f00 	cmp.w	r8, #0
 81090fe:	ddea      	ble.n	81090d6 <__sflush_r+0xae>
 8109100:	4643      	mov	r3, r8
 8109102:	463a      	mov	r2, r7
 8109104:	6a21      	ldr	r1, [r4, #32]
 8109106:	4628      	mov	r0, r5
 8109108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810910a:	47b0      	blx	r6
 810910c:	2800      	cmp	r0, #0
 810910e:	dc08      	bgt.n	8109122 <__sflush_r+0xfa>
 8109110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8109118:	f04f 30ff 	mov.w	r0, #4294967295
 810911c:	81a3      	strh	r3, [r4, #12]
 810911e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8109122:	4407      	add	r7, r0
 8109124:	eba8 0800 	sub.w	r8, r8, r0
 8109128:	e7e7      	b.n	81090fa <__sflush_r+0xd2>
 810912a:	bf00      	nop
 810912c:	dfbffffe 	.word	0xdfbffffe

08109130 <_fflush_r>:
 8109130:	b538      	push	{r3, r4, r5, lr}
 8109132:	690b      	ldr	r3, [r1, #16]
 8109134:	4605      	mov	r5, r0
 8109136:	460c      	mov	r4, r1
 8109138:	b913      	cbnz	r3, 8109140 <_fflush_r+0x10>
 810913a:	2500      	movs	r5, #0
 810913c:	4628      	mov	r0, r5
 810913e:	bd38      	pop	{r3, r4, r5, pc}
 8109140:	b118      	cbz	r0, 810914a <_fflush_r+0x1a>
 8109142:	6a03      	ldr	r3, [r0, #32]
 8109144:	b90b      	cbnz	r3, 810914a <_fflush_r+0x1a>
 8109146:	f7ff fa99 	bl	810867c <__sinit>
 810914a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810914e:	2b00      	cmp	r3, #0
 8109150:	d0f3      	beq.n	810913a <_fflush_r+0xa>
 8109152:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8109154:	07d0      	lsls	r0, r2, #31
 8109156:	d404      	bmi.n	8109162 <_fflush_r+0x32>
 8109158:	0599      	lsls	r1, r3, #22
 810915a:	d402      	bmi.n	8109162 <_fflush_r+0x32>
 810915c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810915e:	f7ff fc36 	bl	81089ce <__retarget_lock_acquire_recursive>
 8109162:	4628      	mov	r0, r5
 8109164:	4621      	mov	r1, r4
 8109166:	f7ff ff5f 	bl	8109028 <__sflush_r>
 810916a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 810916c:	4605      	mov	r5, r0
 810916e:	07da      	lsls	r2, r3, #31
 8109170:	d4e4      	bmi.n	810913c <_fflush_r+0xc>
 8109172:	89a3      	ldrh	r3, [r4, #12]
 8109174:	059b      	lsls	r3, r3, #22
 8109176:	d4e1      	bmi.n	810913c <_fflush_r+0xc>
 8109178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 810917a:	f7ff fc29 	bl	81089d0 <__retarget_lock_release_recursive>
 810917e:	e7dd      	b.n	810913c <_fflush_r+0xc>

08109180 <__swhatbuf_r>:
 8109180:	b570      	push	{r4, r5, r6, lr}
 8109182:	460c      	mov	r4, r1
 8109184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109188:	b096      	sub	sp, #88	@ 0x58
 810918a:	4615      	mov	r5, r2
 810918c:	2900      	cmp	r1, #0
 810918e:	461e      	mov	r6, r3
 8109190:	da0c      	bge.n	81091ac <__swhatbuf_r+0x2c>
 8109192:	89a3      	ldrh	r3, [r4, #12]
 8109194:	2100      	movs	r1, #0
 8109196:	f013 0f80 	tst.w	r3, #128	@ 0x80
 810919a:	bf14      	ite	ne
 810919c:	2340      	movne	r3, #64	@ 0x40
 810919e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81091a2:	2000      	movs	r0, #0
 81091a4:	6031      	str	r1, [r6, #0]
 81091a6:	602b      	str	r3, [r5, #0]
 81091a8:	b016      	add	sp, #88	@ 0x58
 81091aa:	bd70      	pop	{r4, r5, r6, pc}
 81091ac:	466a      	mov	r2, sp
 81091ae:	f000 f849 	bl	8109244 <_fstat_r>
 81091b2:	2800      	cmp	r0, #0
 81091b4:	dbed      	blt.n	8109192 <__swhatbuf_r+0x12>
 81091b6:	9901      	ldr	r1, [sp, #4]
 81091b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 81091bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 81091c0:	4259      	negs	r1, r3
 81091c2:	4159      	adcs	r1, r3
 81091c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 81091c8:	e7eb      	b.n	81091a2 <__swhatbuf_r+0x22>

081091ca <__smakebuf_r>:
 81091ca:	898b      	ldrh	r3, [r1, #12]
 81091cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81091ce:	079d      	lsls	r5, r3, #30
 81091d0:	4606      	mov	r6, r0
 81091d2:	460c      	mov	r4, r1
 81091d4:	d507      	bpl.n	81091e6 <__smakebuf_r+0x1c>
 81091d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 81091da:	6023      	str	r3, [r4, #0]
 81091dc:	6123      	str	r3, [r4, #16]
 81091de:	2301      	movs	r3, #1
 81091e0:	6163      	str	r3, [r4, #20]
 81091e2:	b003      	add	sp, #12
 81091e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81091e6:	ab01      	add	r3, sp, #4
 81091e8:	466a      	mov	r2, sp
 81091ea:	f7ff ffc9 	bl	8109180 <__swhatbuf_r>
 81091ee:	9f00      	ldr	r7, [sp, #0]
 81091f0:	4605      	mov	r5, r0
 81091f2:	4630      	mov	r0, r6
 81091f4:	4639      	mov	r1, r7
 81091f6:	f7ff f929 	bl	810844c <_malloc_r>
 81091fa:	b948      	cbnz	r0, 8109210 <__smakebuf_r+0x46>
 81091fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109200:	059a      	lsls	r2, r3, #22
 8109202:	d4ee      	bmi.n	81091e2 <__smakebuf_r+0x18>
 8109204:	f023 0303 	bic.w	r3, r3, #3
 8109208:	f043 0302 	orr.w	r3, r3, #2
 810920c:	81a3      	strh	r3, [r4, #12]
 810920e:	e7e2      	b.n	81091d6 <__smakebuf_r+0xc>
 8109210:	89a3      	ldrh	r3, [r4, #12]
 8109212:	6020      	str	r0, [r4, #0]
 8109214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8109218:	81a3      	strh	r3, [r4, #12]
 810921a:	9b01      	ldr	r3, [sp, #4]
 810921c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8109220:	b15b      	cbz	r3, 810923a <__smakebuf_r+0x70>
 8109222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109226:	4630      	mov	r0, r6
 8109228:	f000 f81e 	bl	8109268 <_isatty_r>
 810922c:	b128      	cbz	r0, 810923a <__smakebuf_r+0x70>
 810922e:	89a3      	ldrh	r3, [r4, #12]
 8109230:	f023 0303 	bic.w	r3, r3, #3
 8109234:	f043 0301 	orr.w	r3, r3, #1
 8109238:	81a3      	strh	r3, [r4, #12]
 810923a:	89a3      	ldrh	r3, [r4, #12]
 810923c:	431d      	orrs	r5, r3
 810923e:	81a5      	strh	r5, [r4, #12]
 8109240:	e7cf      	b.n	81091e2 <__smakebuf_r+0x18>
	...

08109244 <_fstat_r>:
 8109244:	b538      	push	{r3, r4, r5, lr}
 8109246:	2300      	movs	r3, #0
 8109248:	4d06      	ldr	r5, [pc, #24]	@ (8109264 <_fstat_r+0x20>)
 810924a:	4604      	mov	r4, r0
 810924c:	4608      	mov	r0, r1
 810924e:	4611      	mov	r1, r2
 8109250:	602b      	str	r3, [r5, #0]
 8109252:	f7f7 ffe0 	bl	8101216 <_fstat>
 8109256:	1c43      	adds	r3, r0, #1
 8109258:	d102      	bne.n	8109260 <_fstat_r+0x1c>
 810925a:	682b      	ldr	r3, [r5, #0]
 810925c:	b103      	cbz	r3, 8109260 <_fstat_r+0x1c>
 810925e:	6023      	str	r3, [r4, #0]
 8109260:	bd38      	pop	{r3, r4, r5, pc}
 8109262:	bf00      	nop
 8109264:	20000390 	.word	0x20000390

08109268 <_isatty_r>:
 8109268:	b538      	push	{r3, r4, r5, lr}
 810926a:	2300      	movs	r3, #0
 810926c:	4d05      	ldr	r5, [pc, #20]	@ (8109284 <_isatty_r+0x1c>)
 810926e:	4604      	mov	r4, r0
 8109270:	4608      	mov	r0, r1
 8109272:	602b      	str	r3, [r5, #0]
 8109274:	f7f7 ffdf 	bl	8101236 <_isatty>
 8109278:	1c43      	adds	r3, r0, #1
 810927a:	d102      	bne.n	8109282 <_isatty_r+0x1a>
 810927c:	682b      	ldr	r3, [r5, #0]
 810927e:	b103      	cbz	r3, 8109282 <_isatty_r+0x1a>
 8109280:	6023      	str	r3, [r4, #0]
 8109282:	bd38      	pop	{r3, r4, r5, pc}
 8109284:	20000390 	.word	0x20000390

08109288 <memchr>:
 8109288:	b2c9      	uxtb	r1, r1
 810928a:	4603      	mov	r3, r0
 810928c:	4402      	add	r2, r0
 810928e:	b510      	push	{r4, lr}
 8109290:	4293      	cmp	r3, r2
 8109292:	4618      	mov	r0, r3
 8109294:	d101      	bne.n	810929a <memchr+0x12>
 8109296:	2000      	movs	r0, #0
 8109298:	e003      	b.n	81092a2 <memchr+0x1a>
 810929a:	7804      	ldrb	r4, [r0, #0]
 810929c:	3301      	adds	r3, #1
 810929e:	428c      	cmp	r4, r1
 81092a0:	d1f6      	bne.n	8109290 <memchr+0x8>
 81092a2:	bd10      	pop	{r4, pc}

081092a4 <_init>:
 81092a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81092a6:	bf00      	nop
 81092a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81092aa:	bc08      	pop	{r3}
 81092ac:	469e      	mov	lr, r3
 81092ae:	4770      	bx	lr

081092b0 <_fini>:
 81092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81092b2:	bf00      	nop
 81092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81092b6:	bc08      	pop	{r3}
 81092b8:	469e      	mov	lr, r3
 81092ba:	4770      	bx	lr
